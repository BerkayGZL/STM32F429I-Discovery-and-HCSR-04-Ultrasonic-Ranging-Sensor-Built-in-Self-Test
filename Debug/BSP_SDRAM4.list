
BSP_SDRAM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb88  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000030c4  0800cd38  0800cd38  0001cd38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fdfc  0800fdfc  000200d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800fdfc  0800fdfc  0001fdfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fe04  0800fe04  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fe04  0800fe04  0001fe04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fe08  0800fe08  0001fe08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  0800fe0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200d4  2**0
                  CONTENTS
 10 .bss          00004e24  200000d4  200000d4  000200d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004ef8  20004ef8  000200d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000299c0  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000519b  00000000  00000000  00049ac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002008  00000000  00000000  0004ec60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001e10  00000000  00000000  00050c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002859e  00000000  00000000  00052a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023674  00000000  00000000  0007b016  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f5931  00000000  00000000  0009e68a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00193fbb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000090cc  00000000  00000000  00194010  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000d4 	.word	0x200000d4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800cd20 	.word	0x0800cd20

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000d8 	.word	0x200000d8
 80001ec:	0800cd20 	.word	0x0800cd20

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_d2uiz>:
 8000b4c:	004a      	lsls	r2, r1, #1
 8000b4e:	d211      	bcs.n	8000b74 <__aeabi_d2uiz+0x28>
 8000b50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b54:	d211      	bcs.n	8000b7a <__aeabi_d2uiz+0x2e>
 8000b56:	d50d      	bpl.n	8000b74 <__aeabi_d2uiz+0x28>
 8000b58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b60:	d40e      	bmi.n	8000b80 <__aeabi_d2uiz+0x34>
 8000b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7e:	d102      	bne.n	8000b86 <__aeabi_d2uiz+0x3a>
 8000b80:	f04f 30ff 	mov.w	r0, #4294967295
 8000b84:	4770      	bx	lr
 8000b86:	f04f 0000 	mov.w	r0, #0
 8000b8a:	4770      	bx	lr

08000b8c <__aeabi_d2f>:
 8000b8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b94:	bf24      	itt	cs
 8000b96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b9e:	d90d      	bls.n	8000bbc <__aeabi_d2f+0x30>
 8000ba0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ba4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ba8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bb0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb4:	bf08      	it	eq
 8000bb6:	f020 0001 	biceq.w	r0, r0, #1
 8000bba:	4770      	bx	lr
 8000bbc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bc0:	d121      	bne.n	8000c06 <__aeabi_d2f+0x7a>
 8000bc2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bc6:	bfbc      	itt	lt
 8000bc8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bcc:	4770      	bxlt	lr
 8000bce:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bd2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bd6:	f1c2 0218 	rsb	r2, r2, #24
 8000bda:	f1c2 0c20 	rsb	ip, r2, #32
 8000bde:	fa10 f30c 	lsls.w	r3, r0, ip
 8000be2:	fa20 f002 	lsr.w	r0, r0, r2
 8000be6:	bf18      	it	ne
 8000be8:	f040 0001 	orrne.w	r0, r0, #1
 8000bec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bf8:	ea40 000c 	orr.w	r0, r0, ip
 8000bfc:	fa23 f302 	lsr.w	r3, r3, r2
 8000c00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c04:	e7cc      	b.n	8000ba0 <__aeabi_d2f+0x14>
 8000c06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c0a:	d107      	bne.n	8000c1c <__aeabi_d2f+0x90>
 8000c0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c10:	bf1e      	ittt	ne
 8000c12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c1a:	4770      	bxne	lr
 8000c1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop

08000c2c <__aeabi_uldivmod>:
 8000c2c:	b953      	cbnz	r3, 8000c44 <__aeabi_uldivmod+0x18>
 8000c2e:	b94a      	cbnz	r2, 8000c44 <__aeabi_uldivmod+0x18>
 8000c30:	2900      	cmp	r1, #0
 8000c32:	bf08      	it	eq
 8000c34:	2800      	cmpeq	r0, #0
 8000c36:	bf1c      	itt	ne
 8000c38:	f04f 31ff 	movne.w	r1, #4294967295
 8000c3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c40:	f000 b96e 	b.w	8000f20 <__aeabi_idiv0>
 8000c44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c4c:	f000 f806 	bl	8000c5c <__udivmoddi4>
 8000c50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c58:	b004      	add	sp, #16
 8000c5a:	4770      	bx	lr

08000c5c <__udivmoddi4>:
 8000c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c60:	9d08      	ldr	r5, [sp, #32]
 8000c62:	4604      	mov	r4, r0
 8000c64:	468c      	mov	ip, r1
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	f040 8083 	bne.w	8000d72 <__udivmoddi4+0x116>
 8000c6c:	428a      	cmp	r2, r1
 8000c6e:	4617      	mov	r7, r2
 8000c70:	d947      	bls.n	8000d02 <__udivmoddi4+0xa6>
 8000c72:	fab2 f282 	clz	r2, r2
 8000c76:	b142      	cbz	r2, 8000c8a <__udivmoddi4+0x2e>
 8000c78:	f1c2 0020 	rsb	r0, r2, #32
 8000c7c:	fa24 f000 	lsr.w	r0, r4, r0
 8000c80:	4091      	lsls	r1, r2
 8000c82:	4097      	lsls	r7, r2
 8000c84:	ea40 0c01 	orr.w	ip, r0, r1
 8000c88:	4094      	lsls	r4, r2
 8000c8a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c8e:	0c23      	lsrs	r3, r4, #16
 8000c90:	fbbc f6f8 	udiv	r6, ip, r8
 8000c94:	fa1f fe87 	uxth.w	lr, r7
 8000c98:	fb08 c116 	mls	r1, r8, r6, ip
 8000c9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ca0:	fb06 f10e 	mul.w	r1, r6, lr
 8000ca4:	4299      	cmp	r1, r3
 8000ca6:	d909      	bls.n	8000cbc <__udivmoddi4+0x60>
 8000ca8:	18fb      	adds	r3, r7, r3
 8000caa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cae:	f080 8119 	bcs.w	8000ee4 <__udivmoddi4+0x288>
 8000cb2:	4299      	cmp	r1, r3
 8000cb4:	f240 8116 	bls.w	8000ee4 <__udivmoddi4+0x288>
 8000cb8:	3e02      	subs	r6, #2
 8000cba:	443b      	add	r3, r7
 8000cbc:	1a5b      	subs	r3, r3, r1
 8000cbe:	b2a4      	uxth	r4, r4
 8000cc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ccc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cd0:	45a6      	cmp	lr, r4
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x8c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	f080 8105 	bcs.w	8000ee8 <__udivmoddi4+0x28c>
 8000cde:	45a6      	cmp	lr, r4
 8000ce0:	f240 8102 	bls.w	8000ee8 <__udivmoddi4+0x28c>
 8000ce4:	3802      	subs	r0, #2
 8000ce6:	443c      	add	r4, r7
 8000ce8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cec:	eba4 040e 	sub.w	r4, r4, lr
 8000cf0:	2600      	movs	r6, #0
 8000cf2:	b11d      	cbz	r5, 8000cfc <__udivmoddi4+0xa0>
 8000cf4:	40d4      	lsrs	r4, r2
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cfc:	4631      	mov	r1, r6
 8000cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d02:	b902      	cbnz	r2, 8000d06 <__udivmoddi4+0xaa>
 8000d04:	deff      	udf	#255	; 0xff
 8000d06:	fab2 f282 	clz	r2, r2
 8000d0a:	2a00      	cmp	r2, #0
 8000d0c:	d150      	bne.n	8000db0 <__udivmoddi4+0x154>
 8000d0e:	1bcb      	subs	r3, r1, r7
 8000d10:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d14:	fa1f f887 	uxth.w	r8, r7
 8000d18:	2601      	movs	r6, #1
 8000d1a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d1e:	0c21      	lsrs	r1, r4, #16
 8000d20:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d28:	fb08 f30c 	mul.w	r3, r8, ip
 8000d2c:	428b      	cmp	r3, r1
 8000d2e:	d907      	bls.n	8000d40 <__udivmoddi4+0xe4>
 8000d30:	1879      	adds	r1, r7, r1
 8000d32:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d36:	d202      	bcs.n	8000d3e <__udivmoddi4+0xe2>
 8000d38:	428b      	cmp	r3, r1
 8000d3a:	f200 80e9 	bhi.w	8000f10 <__udivmoddi4+0x2b4>
 8000d3e:	4684      	mov	ip, r0
 8000d40:	1ac9      	subs	r1, r1, r3
 8000d42:	b2a3      	uxth	r3, r4
 8000d44:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d48:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d4c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d50:	fb08 f800 	mul.w	r8, r8, r0
 8000d54:	45a0      	cmp	r8, r4
 8000d56:	d907      	bls.n	8000d68 <__udivmoddi4+0x10c>
 8000d58:	193c      	adds	r4, r7, r4
 8000d5a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d5e:	d202      	bcs.n	8000d66 <__udivmoddi4+0x10a>
 8000d60:	45a0      	cmp	r8, r4
 8000d62:	f200 80d9 	bhi.w	8000f18 <__udivmoddi4+0x2bc>
 8000d66:	4618      	mov	r0, r3
 8000d68:	eba4 0408 	sub.w	r4, r4, r8
 8000d6c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d70:	e7bf      	b.n	8000cf2 <__udivmoddi4+0x96>
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0x12e>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80b1 	beq.w	8000ede <__udivmoddi4+0x282>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x1cc>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0x140>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80b8 	bhi.w	8000f0c <__udivmoddi4+0x2b0>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0103 	sbc.w	r1, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	468c      	mov	ip, r1
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0a8      	beq.n	8000cfc <__udivmoddi4+0xa0>
 8000daa:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dae:	e7a5      	b.n	8000cfc <__udivmoddi4+0xa0>
 8000db0:	f1c2 0320 	rsb	r3, r2, #32
 8000db4:	fa20 f603 	lsr.w	r6, r0, r3
 8000db8:	4097      	lsls	r7, r2
 8000dba:	fa01 f002 	lsl.w	r0, r1, r2
 8000dbe:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dc2:	40d9      	lsrs	r1, r3
 8000dc4:	4330      	orrs	r0, r6
 8000dc6:	0c03      	lsrs	r3, r0, #16
 8000dc8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000dcc:	fa1f f887 	uxth.w	r8, r7
 8000dd0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000dd4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd8:	fb06 f108 	mul.w	r1, r6, r8
 8000ddc:	4299      	cmp	r1, r3
 8000dde:	fa04 f402 	lsl.w	r4, r4, r2
 8000de2:	d909      	bls.n	8000df8 <__udivmoddi4+0x19c>
 8000de4:	18fb      	adds	r3, r7, r3
 8000de6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000dea:	f080 808d 	bcs.w	8000f08 <__udivmoddi4+0x2ac>
 8000dee:	4299      	cmp	r1, r3
 8000df0:	f240 808a 	bls.w	8000f08 <__udivmoddi4+0x2ac>
 8000df4:	3e02      	subs	r6, #2
 8000df6:	443b      	add	r3, r7
 8000df8:	1a5b      	subs	r3, r3, r1
 8000dfa:	b281      	uxth	r1, r0
 8000dfc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e00:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e08:	fb00 f308 	mul.w	r3, r0, r8
 8000e0c:	428b      	cmp	r3, r1
 8000e0e:	d907      	bls.n	8000e20 <__udivmoddi4+0x1c4>
 8000e10:	1879      	adds	r1, r7, r1
 8000e12:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e16:	d273      	bcs.n	8000f00 <__udivmoddi4+0x2a4>
 8000e18:	428b      	cmp	r3, r1
 8000e1a:	d971      	bls.n	8000f00 <__udivmoddi4+0x2a4>
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	4439      	add	r1, r7
 8000e20:	1acb      	subs	r3, r1, r3
 8000e22:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e26:	e778      	b.n	8000d1a <__udivmoddi4+0xbe>
 8000e28:	f1c6 0c20 	rsb	ip, r6, #32
 8000e2c:	fa03 f406 	lsl.w	r4, r3, r6
 8000e30:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e34:	431c      	orrs	r4, r3
 8000e36:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e42:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e46:	431f      	orrs	r7, r3
 8000e48:	0c3b      	lsrs	r3, r7, #16
 8000e4a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e4e:	fa1f f884 	uxth.w	r8, r4
 8000e52:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e56:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e5a:	fb09 fa08 	mul.w	sl, r9, r8
 8000e5e:	458a      	cmp	sl, r1
 8000e60:	fa02 f206 	lsl.w	r2, r2, r6
 8000e64:	fa00 f306 	lsl.w	r3, r0, r6
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x220>
 8000e6a:	1861      	adds	r1, r4, r1
 8000e6c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e70:	d248      	bcs.n	8000f04 <__udivmoddi4+0x2a8>
 8000e72:	458a      	cmp	sl, r1
 8000e74:	d946      	bls.n	8000f04 <__udivmoddi4+0x2a8>
 8000e76:	f1a9 0902 	sub.w	r9, r9, #2
 8000e7a:	4421      	add	r1, r4
 8000e7c:	eba1 010a 	sub.w	r1, r1, sl
 8000e80:	b2bf      	uxth	r7, r7
 8000e82:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e86:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e8a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e8e:	fb00 f808 	mul.w	r8, r0, r8
 8000e92:	45b8      	cmp	r8, r7
 8000e94:	d907      	bls.n	8000ea6 <__udivmoddi4+0x24a>
 8000e96:	19e7      	adds	r7, r4, r7
 8000e98:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e9c:	d22e      	bcs.n	8000efc <__udivmoddi4+0x2a0>
 8000e9e:	45b8      	cmp	r8, r7
 8000ea0:	d92c      	bls.n	8000efc <__udivmoddi4+0x2a0>
 8000ea2:	3802      	subs	r0, #2
 8000ea4:	4427      	add	r7, r4
 8000ea6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eaa:	eba7 0708 	sub.w	r7, r7, r8
 8000eae:	fba0 8902 	umull	r8, r9, r0, r2
 8000eb2:	454f      	cmp	r7, r9
 8000eb4:	46c6      	mov	lr, r8
 8000eb6:	4649      	mov	r1, r9
 8000eb8:	d31a      	bcc.n	8000ef0 <__udivmoddi4+0x294>
 8000eba:	d017      	beq.n	8000eec <__udivmoddi4+0x290>
 8000ebc:	b15d      	cbz	r5, 8000ed6 <__udivmoddi4+0x27a>
 8000ebe:	ebb3 020e 	subs.w	r2, r3, lr
 8000ec2:	eb67 0701 	sbc.w	r7, r7, r1
 8000ec6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000eca:	40f2      	lsrs	r2, r6
 8000ecc:	ea4c 0202 	orr.w	r2, ip, r2
 8000ed0:	40f7      	lsrs	r7, r6
 8000ed2:	e9c5 2700 	strd	r2, r7, [r5]
 8000ed6:	2600      	movs	r6, #0
 8000ed8:	4631      	mov	r1, r6
 8000eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ede:	462e      	mov	r6, r5
 8000ee0:	4628      	mov	r0, r5
 8000ee2:	e70b      	b.n	8000cfc <__udivmoddi4+0xa0>
 8000ee4:	4606      	mov	r6, r0
 8000ee6:	e6e9      	b.n	8000cbc <__udivmoddi4+0x60>
 8000ee8:	4618      	mov	r0, r3
 8000eea:	e6fd      	b.n	8000ce8 <__udivmoddi4+0x8c>
 8000eec:	4543      	cmp	r3, r8
 8000eee:	d2e5      	bcs.n	8000ebc <__udivmoddi4+0x260>
 8000ef0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ef4:	eb69 0104 	sbc.w	r1, r9, r4
 8000ef8:	3801      	subs	r0, #1
 8000efa:	e7df      	b.n	8000ebc <__udivmoddi4+0x260>
 8000efc:	4608      	mov	r0, r1
 8000efe:	e7d2      	b.n	8000ea6 <__udivmoddi4+0x24a>
 8000f00:	4660      	mov	r0, ip
 8000f02:	e78d      	b.n	8000e20 <__udivmoddi4+0x1c4>
 8000f04:	4681      	mov	r9, r0
 8000f06:	e7b9      	b.n	8000e7c <__udivmoddi4+0x220>
 8000f08:	4666      	mov	r6, ip
 8000f0a:	e775      	b.n	8000df8 <__udivmoddi4+0x19c>
 8000f0c:	4630      	mov	r0, r6
 8000f0e:	e74a      	b.n	8000da6 <__udivmoddi4+0x14a>
 8000f10:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f14:	4439      	add	r1, r7
 8000f16:	e713      	b.n	8000d40 <__udivmoddi4+0xe4>
 8000f18:	3802      	subs	r0, #2
 8000f1a:	443c      	add	r4, r7
 8000f1c:	e724      	b.n	8000d68 <__udivmoddi4+0x10c>
 8000f1e:	bf00      	nop

08000f20 <__aeabi_idiv0>:
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000f28:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <DWT_Delay_Init+0x58>)
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	4a13      	ldr	r2, [pc, #76]	; (8000f7c <DWT_Delay_Init+0x58>)
 8000f2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000f32:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000f34:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <DWT_Delay_Init+0x58>)
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	4a10      	ldr	r2, [pc, #64]	; (8000f7c <DWT_Delay_Init+0x58>)
 8000f3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f3e:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000f40:	4b0f      	ldr	r3, [pc, #60]	; (8000f80 <DWT_Delay_Init+0x5c>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a0e      	ldr	r2, [pc, #56]	; (8000f80 <DWT_Delay_Init+0x5c>)
 8000f46:	f023 0301 	bic.w	r3, r3, #1
 8000f4a:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000f4c:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <DWT_Delay_Init+0x5c>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a0b      	ldr	r2, [pc, #44]	; (8000f80 <DWT_Delay_Init+0x5c>)
 8000f52:	f043 0301 	orr.w	r3, r3, #1
 8000f56:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000f58:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <DWT_Delay_Init+0x5c>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000f5e:	bf00      	nop
     __ASM volatile ("NOP");
 8000f60:	bf00      	nop
  __ASM volatile ("NOP");
 8000f62:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000f64:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <DWT_Delay_Init+0x5c>)
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	e000      	b.n	8000f72 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000f70:	2301      	movs	r3, #1
  }
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	e000edf0 	.word	0xe000edf0
 8000f80:	e0001000 	.word	0xe0001000

08000f84 <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000f8c:	4b0d      	ldr	r3, [pc, #52]	; (8000fc4 <DWT_Delay_us+0x40>)
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000f92:	f005 faf3 	bl	800657c <HAL_RCC_GetHCLKFreq>
 8000f96:	4603      	mov	r3, r0
 8000f98:	4a0b      	ldr	r2, [pc, #44]	; (8000fc8 <DWT_Delay_us+0x44>)
 8000f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f9e:	0c9b      	lsrs	r3, r3, #18
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	fb02 f303 	mul.w	r3, r2, r3
 8000fa6:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000fa8:	bf00      	nop
 8000faa:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <DWT_Delay_us+0x40>)
 8000fac:	685a      	ldr	r2, [r3, #4]
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	1ad2      	subs	r2, r2, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d3f8      	bcc.n	8000faa <DWT_Delay_us+0x26>
}
 8000fb8:	bf00      	nop
 8000fba:	bf00      	nop
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	e0001000 	.word	0xe0001000
 8000fc8:	431bde83 	.word	0x431bde83

08000fcc <printMessage>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void printMessage(char *format, ...)
{
 8000fcc:	b40f      	push	{r0, r1, r2, r3}
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b09a      	sub	sp, #104	; 0x68
 8000fd2:	af00      	add	r7, sp, #0
	char comingMessage[100];

	va_list vaList;
	va_start(vaList, format);
 8000fd4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000fd8:	603b      	str	r3, [r7, #0]
	vsprintf(comingMessage, format, vaList);
 8000fda:	1d3b      	adds	r3, r7, #4
 8000fdc:	683a      	ldr	r2, [r7, #0]
 8000fde:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f00a fda3 	bl	800bb2c <vsiprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)comingMessage, strlen(comingMessage), HAL_MAX_DELAY);
 8000fe6:	1d3b      	adds	r3, r7, #4
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff f901 	bl	80001f0 <strlen>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	b29a      	uxth	r2, r3
 8000ff2:	1d39      	adds	r1, r7, #4
 8000ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff8:	4804      	ldr	r0, [pc, #16]	; (800100c <printMessage+0x40>)
 8000ffa:	f007 f85c 	bl	80080b6 <HAL_UART_Transmit>
	va_end(vaList);
}
 8000ffe:	bf00      	nop
 8001000:	3768      	adds	r7, #104	; 0x68
 8001002:	46bd      	mov	sp, r7
 8001004:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001008:	b004      	add	sp, #16
 800100a:	4770      	bx	lr
 800100c:	20004cd0 	.word	0x20004cd0

08001010 <Read_HCSR04>:


uint32_t Read_HCSR04()
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
	uint32_t local_time=0;
 8001016:	2300      	movs	r3, #0
 8001018:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800101a:	2201      	movs	r2, #1
 800101c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001020:	4816      	ldr	r0, [pc, #88]	; (800107c <Read_HCSR04+0x6c>)
 8001022:	f004 fb0f 	bl	8005644 <HAL_GPIO_WritePin>

	DWT_Delay_us(10);
 8001026:	200a      	movs	r0, #10
 8001028:	f7ff ffac 	bl	8000f84 <DWT_Delay_us>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800102c:	2200      	movs	r2, #0
 800102e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001032:	4812      	ldr	r0, [pc, #72]	; (800107c <Read_HCSR04+0x6c>)
 8001034:	f004 fb06 	bl	8005644 <HAL_GPIO_WritePin>

	HAL_TIM_Base_Start_IT(&htim2);
 8001038:	4811      	ldr	r0, [pc, #68]	; (8001080 <Read_HCSR04+0x70>)
 800103a:	f006 fb8f 	bl	800775c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 800103e:	4811      	ldr	r0, [pc, #68]	; (8001084 <Read_HCSR04+0x74>)
 8001040:	f006 fb8c 	bl	800775c <HAL_TIM_Base_Start_IT>

		while (!(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_3))){}
 8001044:	bf00      	nop
 8001046:	2108      	movs	r1, #8
 8001048:	480f      	ldr	r0, [pc, #60]	; (8001088 <Read_HCSR04+0x78>)
 800104a:	f004 fae3 	bl	8005614 <HAL_GPIO_ReadPin>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d0f8      	beq.n	8001046 <Read_HCSR04+0x36>


		while(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_3))				// echo pinden deger gelirse
 8001054:	e005      	b.n	8001062 <Read_HCSR04+0x52>
		{
			local_time++;										// increment local time
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	3301      	adds	r3, #1
 800105a:	607b      	str	r3, [r7, #4]
			DWT_Delay_us(1);									// every 1 us
 800105c:	2001      	movs	r0, #1
 800105e:	f7ff ff91 	bl	8000f84 <DWT_Delay_us>
		while(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_3))				// echo pinden deger gelirse
 8001062:	2108      	movs	r1, #8
 8001064:	4808      	ldr	r0, [pc, #32]	; (8001088 <Read_HCSR04+0x78>)
 8001066:	f004 fad5 	bl	8005614 <HAL_GPIO_ReadPin>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d1f2      	bne.n	8001056 <Read_HCSR04+0x46>

		}

		return local_time;
 8001070:	687b      	ldr	r3, [r7, #4]
}
 8001072:	4618      	mov	r0, r3
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40020800 	.word	0x40020800
 8001080:	20004d20 	.word	0x20004d20
 8001084:	20004c84 	.word	0x20004c84
 8001088:	40021000 	.word	0x40021000

0800108c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]

	if (htim == &htim3){
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4a08      	ldr	r2, [pc, #32]	; (80010b8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d101      	bne.n	80010a0 <HAL_TIM_PeriodElapsedCallback+0x14>
		simulateButtonPress();
 800109c:	f000 f810 	bl	80010c0 <simulateButtonPress>
	}

	if (htim->Instance == TIM6) {
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a05      	ldr	r2, [pc, #20]	; (80010bc <HAL_TIM_PeriodElapsedCallback+0x30>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d101      	bne.n	80010ae <HAL_TIM_PeriodElapsedCallback+0x22>
		    HAL_IncTick();
 80010aa:	f003 fb85 	bl	80047b8 <HAL_IncTick>
		  }

}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20004c84 	.word	0x20004c84
 80010bc:	40001000 	.word	0x40001000

080010c0 <simulateButtonPress>:


void simulateButtonPress(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
    // Generate a software interrupt on the EXTI line
    EXTI->SWIER |= EXTI_SWIER_SWIER0;
 80010c4:	4b05      	ldr	r3, [pc, #20]	; (80010dc <simulateButtonPress+0x1c>)
 80010c6:	691b      	ldr	r3, [r3, #16]
 80010c8:	4a04      	ldr	r2, [pc, #16]	; (80010dc <simulateButtonPress+0x1c>)
 80010ca:	f043 0301 	orr.w	r3, r3, #1
 80010ce:	6113      	str	r3, [r2, #16]
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	40013c00 	.word	0x40013c00

080010e0 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80010e0:	b590      	push	{r4, r7, lr}
 80010e2:	b093      	sub	sp, #76	; 0x4c
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	80fb      	strh	r3, [r7, #6]
	  static int adddress =  0x080E0000;
	  char  stime [30] = "Current Time: ";
 80010ea:	4b87      	ldr	r3, [pc, #540]	; (8001308 <HAL_GPIO_EXTI_Callback+0x228>)
 80010ec:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80010f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010f2:	c407      	stmia	r4!, {r0, r1, r2}
 80010f4:	8023      	strh	r3, [r4, #0]
 80010f6:	3402      	adds	r4, #2
 80010f8:	0c1b      	lsrs	r3, r3, #16
 80010fa:	7023      	strb	r3, [r4, #0]
 80010fc:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	f8c3 200b 	str.w	r2, [r3, #11]
	  char err_time [30] = "Error Time: ";
 800110c:	4b7f      	ldr	r3, [pc, #508]	; (800130c <HAL_GPIO_EXTI_Callback+0x22c>)
 800110e:	f107 0408 	add.w	r4, r7, #8
 8001112:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001114:	c407      	stmia	r4!, {r0, r1, r2}
 8001116:	7023      	strb	r3, [r4, #0]
 8001118:	f107 0315 	add.w	r3, r7, #21
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	741a      	strb	r2, [r3, #16]
		if (GPIO_Pin == GPIO_PIN_0 && (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_3)) ){
 8001128:	88fb      	ldrh	r3, [r7, #6]
 800112a:	2b01      	cmp	r3, #1
 800112c:	f040 80e7 	bne.w	80012fe <HAL_GPIO_EXTI_Callback+0x21e>
 8001130:	2108      	movs	r1, #8
 8001132:	4877      	ldr	r0, [pc, #476]	; (8001310 <HAL_GPIO_EXTI_Callback+0x230>)
 8001134:	f004 fa6e 	bl	8005614 <HAL_GPIO_ReadPin>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	f000 80df 	beq.w	80012fe <HAL_GPIO_EXTI_Callback+0x21e>


			__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);
 8001140:	4b74      	ldr	r3, [pc, #464]	; (8001314 <HAL_GPIO_EXTI_Callback+0x234>)
 8001142:	22f3      	movs	r2, #243	; 0xf3
 8001144:	60da      	str	r2, [r3, #12]

			BSP_LCD_DisplayStringAt(245, 185, (uint8_t *)"Echo pin is opened!", CENTER_MODE);
 8001146:	2301      	movs	r3, #1
 8001148:	4a73      	ldr	r2, [pc, #460]	; (8001318 <HAL_GPIO_EXTI_Callback+0x238>)
 800114a:	21b9      	movs	r1, #185	; 0xb9
 800114c:	20f5      	movs	r0, #245	; 0xf5
 800114e:	f002 fb9f 	bl	8003890 <BSP_LCD_DisplayStringAt>
			__HAL_TIM_SetCounter(&htim3, 0 );
 8001152:	4b72      	ldr	r3, [pc, #456]	; (800131c <HAL_GPIO_EXTI_Callback+0x23c>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2200      	movs	r2, #0
 8001158:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_Base_Stop_IT(&htim3);
 800115a:	4870      	ldr	r0, [pc, #448]	; (800131c <HAL_GPIO_EXTI_Callback+0x23c>)
 800115c:	f006 fb6e 	bl	800783c <HAL_TIM_Base_Stop_IT>

			time_seconds = __HAL_TIM_GET_COUNTER(&htim2)/ TIMx_clock_frequency ;
 8001160:	4b6f      	ldr	r3, [pc, #444]	; (8001320 <HAL_GPIO_EXTI_Callback+0x240>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001166:	ee07 3a90 	vmov	s15, r3
 800116a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800116e:	4b6d      	ldr	r3, [pc, #436]	; (8001324 <HAL_GPIO_EXTI_Callback+0x244>)
 8001170:	ed93 7a00 	vldr	s14, [r3]
 8001174:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001178:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800117c:	ee17 3a90 	vmov	r3, s15
 8001180:	b29a      	uxth	r2, r3
 8001182:	4b69      	ldr	r3, [pc, #420]	; (8001328 <HAL_GPIO_EXTI_Callback+0x248>)
 8001184:	801a      	strh	r2, [r3, #0]



				itoa(time_seconds, strtime, 10);
 8001186:	4b68      	ldr	r3, [pc, #416]	; (8001328 <HAL_GPIO_EXTI_Callback+0x248>)
 8001188:	881b      	ldrh	r3, [r3, #0]
 800118a:	220a      	movs	r2, #10
 800118c:	4967      	ldr	r1, [pc, #412]	; (800132c <HAL_GPIO_EXTI_Callback+0x24c>)
 800118e:	4618      	mov	r0, r3
 8001190:	f00a fb16 	bl	800b7c0 <itoa>
				strcat(stime,strtime);
 8001194:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001198:	4964      	ldr	r1, [pc, #400]	; (800132c <HAL_GPIO_EXTI_Callback+0x24c>)
 800119a:	4618      	mov	r0, r3
 800119c:	f00a fc5e 	bl	800ba5c <strcat>
				BSP_LCD_DisplayStringAt(245, 210, (uint8_t *)stime, CENTER_MODE);
 80011a0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80011a4:	2301      	movs	r3, #1
 80011a6:	21d2      	movs	r1, #210	; 0xd2
 80011a8:	20f5      	movs	r0, #245	; 0xf5
 80011aa:	f002 fb71 	bl	8003890 <BSP_LCD_DisplayStringAt>




				while(*(uint32_t*)flash_address != 0xFFFFFFFF) {
 80011ae:	e004      	b.n	80011ba <HAL_GPIO_EXTI_Callback+0xda>
							flash_address += 4;
 80011b0:	4b5f      	ldr	r3, [pc, #380]	; (8001330 <HAL_GPIO_EXTI_Callback+0x250>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	3304      	adds	r3, #4
 80011b6:	4a5e      	ldr	r2, [pc, #376]	; (8001330 <HAL_GPIO_EXTI_Callback+0x250>)
 80011b8:	6013      	str	r3, [r2, #0]
				while(*(uint32_t*)flash_address != 0xFFFFFFFF) {
 80011ba:	4b5d      	ldr	r3, [pc, #372]	; (8001330 <HAL_GPIO_EXTI_Callback+0x250>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011c4:	d1f4      	bne.n	80011b0 <HAL_GPIO_EXTI_Callback+0xd0>

						}

				if (*(uint32_t*)flash_address == 0xFFFFFFFF) {
 80011c6:	4b5a      	ldr	r3, [pc, #360]	; (8001330 <HAL_GPIO_EXTI_Callback+0x250>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011d0:	d104      	bne.n	80011dc <HAL_GPIO_EXTI_Callback+0xfc>
					count++;
 80011d2:	4b58      	ldr	r3, [pc, #352]	; (8001334 <HAL_GPIO_EXTI_Callback+0x254>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	3301      	adds	r3, #1
 80011d8:	4a56      	ldr	r2, [pc, #344]	; (8001334 <HAL_GPIO_EXTI_Callback+0x254>)
 80011da:	6013      	str	r3, [r2, #0]
				}

				HAL_FLASH_Unlock(); // flash kilidi açıldı
 80011dc:	f003 fefc 	bl	8004fd8 <HAL_FLASH_Unlock>

				HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flash_address, time_seconds);
 80011e0:	4b53      	ldr	r3, [pc, #332]	; (8001330 <HAL_GPIO_EXTI_Callback+0x250>)
 80011e2:	6819      	ldr	r1, [r3, #0]
 80011e4:	4b50      	ldr	r3, [pc, #320]	; (8001328 <HAL_GPIO_EXTI_Callback+0x248>)
 80011e6:	881b      	ldrh	r3, [r3, #0]
 80011e8:	b29a      	uxth	r2, r3
 80011ea:	f04f 0300 	mov.w	r3, #0
 80011ee:	2002      	movs	r0, #2
 80011f0:	f003 fe9e 	bl	8004f30 <HAL_FLASH_Program>
							flash_address +=4;
 80011f4:	4b4e      	ldr	r3, [pc, #312]	; (8001330 <HAL_GPIO_EXTI_Callback+0x250>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	3304      	adds	r3, #4
 80011fa:	4a4d      	ldr	r2, [pc, #308]	; (8001330 <HAL_GPIO_EXTI_Callback+0x250>)
 80011fc:	6013      	str	r3, [r2, #0]
							HAL_FLASH_Lock();
 80011fe:	f003 ff0d 	bl	800501c <HAL_FLASH_Lock>
							count_global++;
 8001202:	4b4d      	ldr	r3, [pc, #308]	; (8001338 <HAL_GPIO_EXTI_Callback+0x258>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	3301      	adds	r3, #1
 8001208:	4a4b      	ldr	r2, [pc, #300]	; (8001338 <HAL_GPIO_EXTI_Callback+0x258>)
 800120a:	6013      	str	r3, [r2, #0]

				if (count == 1) {
 800120c:	4b49      	ldr	r3, [pc, #292]	; (8001334 <HAL_GPIO_EXTI_Callback+0x254>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d119      	bne.n	8001248 <HAL_GPIO_EXTI_Callback+0x168>
					itoa(*(uint32_t*)(flash_address-sizeof(uint32_t)), strtime, 10);
 8001214:	4b46      	ldr	r3, [pc, #280]	; (8001330 <HAL_GPIO_EXTI_Callback+0x250>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	3b04      	subs	r3, #4
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	220a      	movs	r2, #10
 800121e:	4943      	ldr	r1, [pc, #268]	; (800132c <HAL_GPIO_EXTI_Callback+0x24c>)
 8001220:	4618      	mov	r0, r3
 8001222:	f00a facd 	bl	800b7c0 <itoa>
					strcat(err_time,strtime);
 8001226:	f107 0308 	add.w	r3, r7, #8
 800122a:	4940      	ldr	r1, [pc, #256]	; (800132c <HAL_GPIO_EXTI_Callback+0x24c>)
 800122c:	4618      	mov	r0, r3
 800122e:	f00a fc15 	bl	800ba5c <strcat>
					BSP_LCD_ClearStringLine(20); // Clear the line where the distance value is displayed
 8001232:	2014      	movs	r0, #20
 8001234:	f002 fa84 	bl	8003740 <BSP_LCD_ClearStringLine>
					BSP_LCD_DisplayStringAt(245, 235, (uint8_t *)err_time, CENTER_MODE);
 8001238:	f107 0208 	add.w	r2, r7, #8
 800123c:	2301      	movs	r3, #1
 800123e:	21eb      	movs	r1, #235	; 0xeb
 8001240:	20f5      	movs	r0, #245	; 0xf5
 8001242:	f002 fb25 	bl	8003890 <BSP_LCD_DisplayStringAt>
 8001246:	e03f      	b.n	80012c8 <HAL_GPIO_EXTI_Callback+0x1e8>

				}
				else if (count == 2) {
 8001248:	4b3a      	ldr	r3, [pc, #232]	; (8001334 <HAL_GPIO_EXTI_Callback+0x254>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2b02      	cmp	r3, #2
 800124e:	d11a      	bne.n	8001286 <HAL_GPIO_EXTI_Callback+0x1a6>
					itoa(*(uint32_t*)(flash_address-sizeof(uint32_t)), strtime, 10);
 8001250:	4b37      	ldr	r3, [pc, #220]	; (8001330 <HAL_GPIO_EXTI_Callback+0x250>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	3b04      	subs	r3, #4
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	220a      	movs	r2, #10
 800125a:	4934      	ldr	r1, [pc, #208]	; (800132c <HAL_GPIO_EXTI_Callback+0x24c>)
 800125c:	4618      	mov	r0, r3
 800125e:	f00a faaf 	bl	800b7c0 <itoa>
					strcat(err_time,strtime);
 8001262:	f107 0308 	add.w	r3, r7, #8
 8001266:	4931      	ldr	r1, [pc, #196]	; (800132c <HAL_GPIO_EXTI_Callback+0x24c>)
 8001268:	4618      	mov	r0, r3
 800126a:	f00a fbf7 	bl	800ba5c <strcat>
					BSP_LCD_ClearStringLine(20); // Clear the line where the distance value is displayed
 800126e:	2014      	movs	r0, #20
 8001270:	f002 fa66 	bl	8003740 <BSP_LCD_ClearStringLine>
					BSP_LCD_DisplayStringAt(245, 260, (uint8_t *)err_time, CENTER_MODE);
 8001274:	f107 0208 	add.w	r2, r7, #8
 8001278:	2301      	movs	r3, #1
 800127a:	f44f 7182 	mov.w	r1, #260	; 0x104
 800127e:	20f5      	movs	r0, #245	; 0xf5
 8001280:	f002 fb06 	bl	8003890 <BSP_LCD_DisplayStringAt>
 8001284:	e020      	b.n	80012c8 <HAL_GPIO_EXTI_Callback+0x1e8>

				}

				else if (count == 3) {
 8001286:	4b2b      	ldr	r3, [pc, #172]	; (8001334 <HAL_GPIO_EXTI_Callback+0x254>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2b03      	cmp	r3, #3
 800128c:	d11c      	bne.n	80012c8 <HAL_GPIO_EXTI_Callback+0x1e8>
					itoa(*(uint32_t*)(flash_address-sizeof(uint32_t)), strtime, 10);
 800128e:	4b28      	ldr	r3, [pc, #160]	; (8001330 <HAL_GPIO_EXTI_Callback+0x250>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	3b04      	subs	r3, #4
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	220a      	movs	r2, #10
 8001298:	4924      	ldr	r1, [pc, #144]	; (800132c <HAL_GPIO_EXTI_Callback+0x24c>)
 800129a:	4618      	mov	r0, r3
 800129c:	f00a fa90 	bl	800b7c0 <itoa>
					strcat(err_time,strtime);
 80012a0:	f107 0308 	add.w	r3, r7, #8
 80012a4:	4921      	ldr	r1, [pc, #132]	; (800132c <HAL_GPIO_EXTI_Callback+0x24c>)
 80012a6:	4618      	mov	r0, r3
 80012a8:	f00a fbd8 	bl	800ba5c <strcat>
					BSP_LCD_ClearStringLine(20); // Clear the line where the distance value is displayed
 80012ac:	2014      	movs	r0, #20
 80012ae:	f002 fa47 	bl	8003740 <BSP_LCD_ClearStringLine>
					BSP_LCD_DisplayStringAt(245, 285, (uint8_t *)err_time, CENTER_MODE);
 80012b2:	f107 0208 	add.w	r2, r7, #8
 80012b6:	2301      	movs	r3, #1
 80012b8:	f240 111d 	movw	r1, #285	; 0x11d
 80012bc:	20f5      	movs	r0, #245	; 0xf5
 80012be:	f002 fae7 	bl	8003890 <BSP_LCD_DisplayStringAt>
					count= 0;
 80012c2:	4b1c      	ldr	r3, [pc, #112]	; (8001334 <HAL_GPIO_EXTI_Callback+0x254>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]



				while (1) {

					if ((HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_3))) {
 80012c8:	2108      	movs	r1, #8
 80012ca:	4811      	ldr	r0, [pc, #68]	; (8001310 <HAL_GPIO_EXTI_Callback+0x230>)
 80012cc:	f004 f9a2 	bl	8005614 <HAL_GPIO_ReadPin>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d012      	beq.n	80012fc <HAL_GPIO_EXTI_Callback+0x21c>
				HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_SET);
 80012d6:	2201      	movs	r2, #1
 80012d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012dc:	4817      	ldr	r0, [pc, #92]	; (800133c <HAL_GPIO_EXTI_Callback+0x25c>)
 80012de:	f004 f9b1 	bl	8005644 <HAL_GPIO_WritePin>
				HAL_Delay(100);
 80012e2:	2064      	movs	r0, #100	; 0x64
 80012e4:	f003 fa88 	bl	80047f8 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);
 80012e8:	2200      	movs	r2, #0
 80012ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012ee:	4813      	ldr	r0, [pc, #76]	; (800133c <HAL_GPIO_EXTI_Callback+0x25c>)
 80012f0:	f004 f9a8 	bl	8005644 <HAL_GPIO_WritePin>
				HAL_Delay(100);
 80012f4:	2064      	movs	r0, #100	; 0x64
 80012f6:	f003 fa7f 	bl	80047f8 <HAL_Delay>
					if ((HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_3))) {
 80012fa:	e7e5      	b.n	80012c8 <HAL_GPIO_EXTI_Callback+0x1e8>

				}
					else{ break;}
 80012fc:	bf00      	nop
				}

		}


		}
 80012fe:	bf00      	nop
 8001300:	374c      	adds	r7, #76	; 0x4c
 8001302:	46bd      	mov	sp, r7
 8001304:	bd90      	pop	{r4, r7, pc}
 8001306:	bf00      	nop
 8001308:	0800cd70 	.word	0x0800cd70
 800130c:	0800cd90 	.word	0x0800cd90
 8001310:	40021000 	.word	0x40021000
 8001314:	40023c00 	.word	0x40023c00
 8001318:	0800cd5c 	.word	0x0800cd5c
 800131c:	20004c84 	.word	0x20004c84
 8001320:	20004d20 	.word	0x20004d20
 8001324:	20000000 	.word	0x20000000
 8001328:	20004d88 	.word	0x20004d88
 800132c:	20004d78 	.word	0x20004d78
 8001330:	20000004 	.word	0x20000004
 8001334:	200000f4 	.word	0x200000f4
 8001338:	200000f0 	.word	0x200000f0
 800133c:	40021800 	.word	0x40021800

08001340 <drawTicks>:


void drawTicks(uint16_t x , uint16_t y, uint16_t radius){
 8001340:	b590      	push	{r4, r7, lr}
 8001342:	ed2d 8b02 	vpush	{d8}
 8001346:	b08f      	sub	sp, #60	; 0x3c
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	80fb      	strh	r3, [r7, #6]
 800134e:	460b      	mov	r3, r1
 8001350:	80bb      	strh	r3, [r7, #4]
 8001352:	4613      	mov	r3, r2
 8001354:	807b      	strh	r3, [r7, #2]
	int tickLength = 10;
 8001356:	230a      	movs	r3, #10
 8001358:	62bb      	str	r3, [r7, #40]	; 0x28
	int loop_angle = 180;
 800135a:	23b4      	movs	r3, #180	; 0xb4
 800135c:	637b      	str	r3, [r7, #52]	; 0x34
	int count = 9;
 800135e:	2309      	movs	r3, #9
 8001360:	633b      	str	r3, [r7, #48]	; 0x30
	int angleStep = 1;
 8001362:	2301      	movs	r3, #1
 8001364:	627b      	str	r3, [r7, #36]	; 0x24
	int angle = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	62fb      	str	r3, [r7, #44]	; 0x2c
	char str[3];

	 for (loop_angle; loop_angle <= 360; loop_angle += angleStep)
 800136a:	e111      	b.n	8001590 <drawTicks+0x250>
	    {
		 float radians = loop_angle * 3.14159265f / 180.0f;
 800136c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800136e:	ee07 3a90 	vmov	s15, r3
 8001372:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001376:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 80015a8 <drawTicks+0x268>
 800137a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800137e:	eddf 6a8b 	vldr	s13, [pc, #556]	; 80015ac <drawTicks+0x26c>
 8001382:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001386:	edc7 7a08 	vstr	s15, [r7, #32]
		 uint16_t xPos = x + radius * cosf(radians);
 800138a:	88fb      	ldrh	r3, [r7, #6]
 800138c:	ee07 3a90 	vmov	s15, r3
 8001390:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001394:	887b      	ldrh	r3, [r7, #2]
 8001396:	ee07 3a90 	vmov	s15, r3
 800139a:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 800139e:	ed97 0a08 	vldr	s0, [r7, #32]
 80013a2:	f00a ff11 	bl	800c1c8 <cosf>
 80013a6:	eef0 7a40 	vmov.f32	s15, s0
 80013aa:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80013ae:	ee78 7a27 	vadd.f32	s15, s16, s15
 80013b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013b6:	ee17 3a90 	vmov	r3, s15
 80013ba:	83fb      	strh	r3, [r7, #30]
		 uint16_t yPos = y + radius * sinf(radians);
 80013bc:	88bb      	ldrh	r3, [r7, #4]
 80013be:	ee07 3a90 	vmov	s15, r3
 80013c2:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80013c6:	887b      	ldrh	r3, [r7, #2]
 80013c8:	ee07 3a90 	vmov	s15, r3
 80013cc:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 80013d0:	ed97 0a08 	vldr	s0, [r7, #32]
 80013d4:	f00a ff38 	bl	800c248 <sinf>
 80013d8:	eef0 7a40 	vmov.f32	s15, s0
 80013dc:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80013e0:	ee78 7a27 	vadd.f32	s15, s16, s15
 80013e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013e8:	ee17 3a90 	vmov	r3, s15
 80013ec:	83bb      	strh	r3, [r7, #28]

	if (loop_angle / 20 == count) {
 80013ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013f0:	4a6f      	ldr	r2, [pc, #444]	; (80015b0 <drawTicks+0x270>)
 80013f2:	fb82 1203 	smull	r1, r2, r2, r3
 80013f6:	10d2      	asrs	r2, r2, #3
 80013f8:	17db      	asrs	r3, r3, #31
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013fe:	429a      	cmp	r2, r3
 8001400:	f040 80c2 	bne.w	8001588 <drawTicks+0x248>
		 BSP_LCD_DrawLine(xPos, yPos, xPos + tickLength*cosf(radians), yPos + tickLength*sinf(radians));
 8001404:	8bfb      	ldrh	r3, [r7, #30]
 8001406:	ee07 3a90 	vmov	s15, r3
 800140a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800140e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001410:	ee07 3a90 	vmov	s15, r3
 8001414:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8001418:	ed97 0a08 	vldr	s0, [r7, #32]
 800141c:	f00a fed4 	bl	800c1c8 <cosf>
 8001420:	eef0 7a40 	vmov.f32	s15, s0
 8001424:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8001428:	ee78 7a27 	vadd.f32	s15, s16, s15
 800142c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001430:	ee17 3a90 	vmov	r3, s15
 8001434:	b29c      	uxth	r4, r3
 8001436:	8bbb      	ldrh	r3, [r7, #28]
 8001438:	ee07 3a90 	vmov	s15, r3
 800143c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001442:	ee07 3a90 	vmov	s15, r3
 8001446:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 800144a:	ed97 0a08 	vldr	s0, [r7, #32]
 800144e:	f00a fefb 	bl	800c248 <sinf>
 8001452:	eef0 7a40 	vmov.f32	s15, s0
 8001456:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800145a:	ee78 7a27 	vadd.f32	s15, s16, s15
 800145e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001462:	ee17 3a90 	vmov	r3, s15
 8001466:	b29b      	uxth	r3, r3
 8001468:	8bb9      	ldrh	r1, [r7, #28]
 800146a:	8bf8      	ldrh	r0, [r7, #30]
 800146c:	4622      	mov	r2, r4
 800146e:	f002 fb0b 	bl	8003a88 <BSP_LCD_DrawLine>

		 count++;
 8001472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001474:	3301      	adds	r3, #1
 8001476:	633b      	str	r3, [r7, #48]	; 0x30
		 itoa(angle, str, 10);
 8001478:	f107 0308 	add.w	r3, r7, #8
 800147c:	220a      	movs	r2, #10
 800147e:	4619      	mov	r1, r3
 8001480:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001482:	f00a f99d 	bl	800b7c0 <itoa>
		 BSP_LCD_SetFont(&Font12);
 8001486:	484b      	ldr	r0, [pc, #300]	; (80015b4 <drawTicks+0x274>)
 8001488:	f002 f902 	bl	8003690 <BSP_LCD_SetFont>

		 // Calculate the coordinates for displaying the number
		 int strWidth = strlen(str) * BSP_LCD_GetFont()->Width;  // Calculate the width of the string
 800148c:	f107 0308 	add.w	r3, r7, #8
 8001490:	4618      	mov	r0, r3
 8001492:	f7fe fead 	bl	80001f0 <strlen>
 8001496:	4604      	mov	r4, r0
 8001498:	f002 f914 	bl	80036c4 <BSP_LCD_GetFont>
 800149c:	4603      	mov	r3, r0
 800149e:	889b      	ldrh	r3, [r3, #4]
 80014a0:	fb03 f304 	mul.w	r3, r3, r4
 80014a4:	61bb      	str	r3, [r7, #24]
		 int strHeight = BSP_LCD_GetFont()->Height;  // Get the height of the font
 80014a6:	f002 f90d 	bl	80036c4 <BSP_LCD_GetFont>
 80014aa:	4603      	mov	r3, r0
 80014ac:	88db      	ldrh	r3, [r3, #6]
 80014ae:	617b      	str	r3, [r7, #20]
		 int textX = xPos - strWidth / 2;  // Calculate the X-coordinate for centering the text
 80014b0:	8bfa      	ldrh	r2, [r7, #30]
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	0fd9      	lsrs	r1, r3, #31
 80014b6:	440b      	add	r3, r1
 80014b8:	105b      	asrs	r3, r3, #1
 80014ba:	425b      	negs	r3, r3
 80014bc:	4413      	add	r3, r2
 80014be:	613b      	str	r3, [r7, #16]
		 int textY = yPos - strHeight / 2;  // Calculate the Y-coordinate for centering the text
 80014c0:	8bba      	ldrh	r2, [r7, #28]
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	0fd9      	lsrs	r1, r3, #31
 80014c6:	440b      	add	r3, r1
 80014c8:	105b      	asrs	r3, r3, #1
 80014ca:	425b      	negs	r3, r3
 80014cc:	4413      	add	r3, r2
 80014ce:	60fb      	str	r3, [r7, #12]


		      if (count >= 15) {
 80014d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014d2:	2b0e      	cmp	r3, #14
 80014d4:	dd10      	ble.n	80014f8 <drawTicks+0x1b8>
		    	  BSP_LCD_DisplayStringAt(textX - 10, textY+10, (uint8_t *)str, LEFT_MODE);
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	b29b      	uxth	r3, r3
 80014da:	3b0a      	subs	r3, #10
 80014dc:	b298      	uxth	r0, r3
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	330a      	adds	r3, #10
 80014e4:	b299      	uxth	r1, r3
 80014e6:	f107 0208 	add.w	r2, r7, #8
 80014ea:	2303      	movs	r3, #3
 80014ec:	f002 f9d0 	bl	8003890 <BSP_LCD_DisplayStringAt>
		    	  		             angle += 20;
 80014f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014f2:	3314      	adds	r3, #20
 80014f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014f6:	e044      	b.n	8001582 <drawTicks+0x242>
		      }

		      else if (count == 12) {
 80014f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014fa:	2b0c      	cmp	r3, #12
 80014fc:	d110      	bne.n	8001520 <drawTicks+0x1e0>
		    	  BSP_LCD_DisplayStringAt(textX + 5, textY+15, (uint8_t *)str, LEFT_MODE);
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	b29b      	uxth	r3, r3
 8001502:	3305      	adds	r3, #5
 8001504:	b298      	uxth	r0, r3
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	b29b      	uxth	r3, r3
 800150a:	330f      	adds	r3, #15
 800150c:	b299      	uxth	r1, r3
 800150e:	f107 0208 	add.w	r2, r7, #8
 8001512:	2303      	movs	r3, #3
 8001514:	f002 f9bc 	bl	8003890 <BSP_LCD_DisplayStringAt>
		    	  		    	  		 angle += 20;
 8001518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800151a:	3314      	adds	r3, #20
 800151c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800151e:	e030      	b.n	8001582 <drawTicks+0x242>
		      }

		      else if (count == 13) {
 8001520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001522:	2b0d      	cmp	r3, #13
 8001524:	d10e      	bne.n	8001544 <drawTicks+0x204>
		     		    	  BSP_LCD_DisplayStringAt(textX , textY+15, (uint8_t *)str, LEFT_MODE);
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	b298      	uxth	r0, r3
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	b29b      	uxth	r3, r3
 800152e:	330f      	adds	r3, #15
 8001530:	b299      	uxth	r1, r3
 8001532:	f107 0208 	add.w	r2, r7, #8
 8001536:	2303      	movs	r3, #3
 8001538:	f002 f9aa 	bl	8003890 <BSP_LCD_DisplayStringAt>
		     		    	  		    	  		 angle += 20;
 800153c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800153e:	3314      	adds	r3, #20
 8001540:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001542:	e01e      	b.n	8001582 <drawTicks+0x242>
		      }

		      else if (count == 14) {
 8001544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001546:	2b0e      	cmp	r3, #14
 8001548:	d10e      	bne.n	8001568 <drawTicks+0x228>
		      		     		    	  BSP_LCD_DisplayStringAt(textX , textY+15, (uint8_t *)str, LEFT_MODE);
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	b298      	uxth	r0, r3
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	b29b      	uxth	r3, r3
 8001552:	330f      	adds	r3, #15
 8001554:	b299      	uxth	r1, r3
 8001556:	f107 0208 	add.w	r2, r7, #8
 800155a:	2303      	movs	r3, #3
 800155c:	f002 f998 	bl	8003890 <BSP_LCD_DisplayStringAt>
		      		     		    	  		    	  		 angle += 20;
 8001560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001562:	3314      	adds	r3, #20
 8001564:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001566:	e00c      	b.n	8001582 <drawTicks+0x242>
		     }

		      else
		    	  BSP_LCD_DisplayStringAt(textX + 10, textY+10, (uint8_t *)str, LEFT_MODE);
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	b29b      	uxth	r3, r3
 800156c:	330a      	adds	r3, #10
 800156e:	b298      	uxth	r0, r3
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	b29b      	uxth	r3, r3
 8001574:	330a      	adds	r3, #10
 8001576:	b299      	uxth	r1, r3
 8001578:	f107 0208 	add.w	r2, r7, #8
 800157c:	2303      	movs	r3, #3
 800157e:	f002 f987 	bl	8003890 <BSP_LCD_DisplayStringAt>
		    	  		    	  		             angle += 20;
 8001582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001584:	3314      	adds	r3, #20
 8001586:	62fb      	str	r3, [r7, #44]	; 0x2c
	 for (loop_angle; loop_angle <= 360; loop_angle += angleStep)
 8001588:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800158a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158c:	4413      	add	r3, r2
 800158e:	637b      	str	r3, [r7, #52]	; 0x34
 8001590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001592:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8001596:	f77f aee9 	ble.w	800136c <drawTicks+0x2c>


	}

}
}
 800159a:	bf00      	nop
 800159c:	bf00      	nop
 800159e:	373c      	adds	r7, #60	; 0x3c
 80015a0:	46bd      	mov	sp, r7
 80015a2:	ecbd 8b02 	vpop	{d8}
 80015a6:	bd90      	pop	{r4, r7, pc}
 80015a8:	40490fdb 	.word	0x40490fdb
 80015ac:	43340000 	.word	0x43340000
 80015b0:	66666667 	.word	0x66666667
 80015b4:	20000058 	.word	0x20000058

080015b8 <drawArc>:


void drawArc(uint16_t x , uint16_t y, uint16_t radius, uint16_t startAngle, uint16_t endAngle)
{
 80015b8:	b590      	push	{r4, r7, lr}
 80015ba:	ed2d 8b02 	vpush	{d8}
 80015be:	b087      	sub	sp, #28
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4604      	mov	r4, r0
 80015c4:	4608      	mov	r0, r1
 80015c6:	4611      	mov	r1, r2
 80015c8:	461a      	mov	r2, r3
 80015ca:	4623      	mov	r3, r4
 80015cc:	80fb      	strh	r3, [r7, #6]
 80015ce:	4603      	mov	r3, r0
 80015d0:	80bb      	strh	r3, [r7, #4]
 80015d2:	460b      	mov	r3, r1
 80015d4:	807b      	strh	r3, [r7, #2]
 80015d6:	4613      	mov	r3, r2
 80015d8:	803b      	strh	r3, [r7, #0]

    float angleStep = 0.1f; // Adjust this value for the desired angle resolution
 80015da:	4b34      	ldr	r3, [pc, #208]	; (80016ac <drawArc+0xf4>)
 80015dc:	613b      	str	r3, [r7, #16]

    for (float angle = startAngle; angle <= endAngle; angle += angleStep)
 80015de:	883b      	ldrh	r3, [r7, #0]
 80015e0:	ee07 3a90 	vmov	s15, r3
 80015e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015e8:	edc7 7a05 	vstr	s15, [r7, #20]
 80015ec:	e04b      	b.n	8001686 <drawArc+0xce>
    {

        float radians = angle * 3.14159265f / 180.0f;
 80015ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80015f2:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80016b0 <drawArc+0xf8>
 80015f6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80015fa:	eddf 6a2e 	vldr	s13, [pc, #184]	; 80016b4 <drawArc+0xfc>
 80015fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001602:	edc7 7a03 	vstr	s15, [r7, #12]
        uint16_t xPos = x + radius * cosf(radians);
 8001606:	88fb      	ldrh	r3, [r7, #6]
 8001608:	ee07 3a90 	vmov	s15, r3
 800160c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001610:	887b      	ldrh	r3, [r7, #2]
 8001612:	ee07 3a90 	vmov	s15, r3
 8001616:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 800161a:	ed97 0a03 	vldr	s0, [r7, #12]
 800161e:	f00a fdd3 	bl	800c1c8 <cosf>
 8001622:	eef0 7a40 	vmov.f32	s15, s0
 8001626:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800162a:	ee78 7a27 	vadd.f32	s15, s16, s15
 800162e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001632:	ee17 3a90 	vmov	r3, s15
 8001636:	817b      	strh	r3, [r7, #10]
        uint16_t yPos = y + radius * sinf(radians);
 8001638:	88bb      	ldrh	r3, [r7, #4]
 800163a:	ee07 3a90 	vmov	s15, r3
 800163e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001642:	887b      	ldrh	r3, [r7, #2]
 8001644:	ee07 3a90 	vmov	s15, r3
 8001648:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 800164c:	ed97 0a03 	vldr	s0, [r7, #12]
 8001650:	f00a fdfa 	bl	800c248 <sinf>
 8001654:	eef0 7a40 	vmov.f32	s15, s0
 8001658:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800165c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001660:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001664:	ee17 3a90 	vmov	r3, s15
 8001668:	813b      	strh	r3, [r7, #8]
        BSP_LCD_DrawPixel(xPos, yPos, LCD_COLOR_RED);
 800166a:	8939      	ldrh	r1, [r7, #8]
 800166c:	897b      	ldrh	r3, [r7, #10]
 800166e:	4a12      	ldr	r2, [pc, #72]	; (80016b8 <drawArc+0x100>)
 8001670:	4618      	mov	r0, r3
 8001672:	f002 fd9d 	bl	80041b0 <BSP_LCD_DrawPixel>
    for (float angle = startAngle; angle <= endAngle; angle += angleStep)
 8001676:	ed97 7a05 	vldr	s14, [r7, #20]
 800167a:	edd7 7a04 	vldr	s15, [r7, #16]
 800167e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001682:	edc7 7a05 	vstr	s15, [r7, #20]
 8001686:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001688:	ee07 3a90 	vmov	s15, r3
 800168c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001690:	ed97 7a05 	vldr	s14, [r7, #20]
 8001694:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800169c:	d9a7      	bls.n	80015ee <drawArc+0x36>
        // Use HAL function or direct register manipulation to set the pixel at (xPos, yPos)
        // Example: BSP_LCD_DrawPixel(xPos, yPos, LCD_COLOR_RED);
        // Draw a tick mark at this angle

    }
}
 800169e:	bf00      	nop
 80016a0:	bf00      	nop
 80016a2:	371c      	adds	r7, #28
 80016a4:	46bd      	mov	sp, r7
 80016a6:	ecbd 8b02 	vpop	{d8}
 80016aa:	bd90      	pop	{r4, r7, pc}
 80016ac:	3dcccccd 	.word	0x3dcccccd
 80016b0:	40490fdb 	.word	0x40490fdb
 80016b4:	43340000 	.word	0x43340000
 80016b8:	ffff0000 	.word	0xffff0000
 80016bc:	00000000 	.word	0x00000000

080016c0 <tick_to_needle>:

double* tick_to_needle(uint16_t x, uint16_t y, uint16_t radius, uint16_t distance) {
 80016c0:	b590      	push	{r4, r7, lr}
 80016c2:	ed2d 8b02 	vpush	{d8}
 80016c6:	b091      	sub	sp, #68	; 0x44
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4604      	mov	r4, r0
 80016cc:	4608      	mov	r0, r1
 80016ce:	4611      	mov	r1, r2
 80016d0:	461a      	mov	r2, r3
 80016d2:	4623      	mov	r3, r4
 80016d4:	80fb      	strh	r3, [r7, #6]
 80016d6:	4603      	mov	r3, r0
 80016d8:	80bb      	strh	r3, [r7, #4]
 80016da:	460b      	mov	r3, r1
 80016dc:	807b      	strh	r3, [r7, #2]
 80016de:	4613      	mov	r3, r2
 80016e0:	803b      	strh	r3, [r7, #0]
	double a = 0.9;
 80016e2:	a398      	add	r3, pc, #608	; (adr r3, 8001944 <tick_to_needle+0x284>)
 80016e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double angle = 180;
 80016ec:	f04f 0200 	mov.w	r2, #0
 80016f0:	4b91      	ldr	r3, [pc, #580]	; (8001938 <tick_to_needle+0x278>)
 80016f2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	int count = 0;
 80016f6:	2300      	movs	r3, #0
 80016f8:	637b      	str	r3, [r7, #52]	; 0x34
	double b = 0.53;
 80016fa:	a38b      	add	r3, pc, #556	; (adr r3, 8001928 <tick_to_needle+0x268>)
 80016fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001700:	e9c7 2308 	strd	r2, r3, [r7, #32]

	for (angle ; angle <= 216 ; angle += a) {
 8001704:	e07c      	b.n	8001800 <tick_to_needle+0x140>
		 float radians = angle * 3.14159265f / 180.0f;
 8001706:	a38a      	add	r3, pc, #552	; (adr r3, 8001930 <tick_to_needle+0x270>)
 8001708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800170c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001710:	f7fe ff82 	bl	8000618 <__aeabi_dmul>
 8001714:	4602      	mov	r2, r0
 8001716:	460b      	mov	r3, r1
 8001718:	4610      	mov	r0, r2
 800171a:	4619      	mov	r1, r3
 800171c:	f04f 0200 	mov.w	r2, #0
 8001720:	4b85      	ldr	r3, [pc, #532]	; (8001938 <tick_to_needle+0x278>)
 8001722:	f7ff f8a3 	bl	800086c <__aeabi_ddiv>
 8001726:	4602      	mov	r2, r0
 8001728:	460b      	mov	r3, r1
 800172a:	4610      	mov	r0, r2
 800172c:	4619      	mov	r1, r3
 800172e:	f7ff fa2d 	bl	8000b8c <__aeabi_d2f>
 8001732:	4603      	mov	r3, r0
 8001734:	613b      	str	r3, [r7, #16]
		 uint16_t xPos = x + radius * cosf(radians);
 8001736:	88fb      	ldrh	r3, [r7, #6]
 8001738:	ee07 3a90 	vmov	s15, r3
 800173c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001740:	887b      	ldrh	r3, [r7, #2]
 8001742:	ee07 3a90 	vmov	s15, r3
 8001746:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 800174a:	ed97 0a04 	vldr	s0, [r7, #16]
 800174e:	f00a fd3b 	bl	800c1c8 <cosf>
 8001752:	eef0 7a40 	vmov.f32	s15, s0
 8001756:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800175a:	ee78 7a27 	vadd.f32	s15, s16, s15
 800175e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001762:	ee17 3a90 	vmov	r3, s15
 8001766:	81fb      	strh	r3, [r7, #14]
		 uint16_t yPos = y + radius * sinf(radians);
 8001768:	88bb      	ldrh	r3, [r7, #4]
 800176a:	ee07 3a90 	vmov	s15, r3
 800176e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001772:	887b      	ldrh	r3, [r7, #2]
 8001774:	ee07 3a90 	vmov	s15, r3
 8001778:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 800177c:	ed97 0a04 	vldr	s0, [r7, #16]
 8001780:	f00a fd62 	bl	800c248 <sinf>
 8001784:	eef0 7a40 	vmov.f32	s15, s0
 8001788:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800178c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001790:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001794:	ee17 3a90 	vmov	r3, s15
 8001798:	81bb      	strh	r3, [r7, #12]
		if (count == distance) {
 800179a:	883b      	ldrh	r3, [r7, #0]
 800179c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800179e:	429a      	cmp	r2, r3
 80017a0:	d121      	bne.n	80017e6 <tick_to_needle+0x126>
			double* ptr = (double*)malloc(3*sizeof(double));
 80017a2:	2018      	movs	r0, #24
 80017a4:	f00a f810 	bl	800b7c8 <malloc>
 80017a8:	4603      	mov	r3, r0
 80017aa:	60bb      	str	r3, [r7, #8]
			ptr[0] = (double)xPos;
 80017ac:	89fb      	ldrh	r3, [r7, #14]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7fe feb8 	bl	8000524 <__aeabi_ui2d>
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	68b9      	ldr	r1, [r7, #8]
 80017ba:	e9c1 2300 	strd	r2, r3, [r1]
			ptr[1] = (double)yPos;
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	f103 0408 	add.w	r4, r3, #8
 80017c4:	89bb      	ldrh	r3, [r7, #12]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7fe feac 	bl	8000524 <__aeabi_ui2d>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	e9c4 2300 	strd	r2, r3, [r4]
			ptr[2] = (double)angle;
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	f103 0110 	add.w	r1, r3, #16
 80017da:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80017de:	e9c1 2300 	strd	r2, r3, [r1]
			return ptr;
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	e099      	b.n	800191a <tick_to_needle+0x25a>
		}
		count++;
 80017e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017e8:	3301      	adds	r3, #1
 80017ea:	637b      	str	r3, [r7, #52]	; 0x34
	for (angle ; angle <= 216 ; angle += a) {
 80017ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80017f0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80017f4:	f7fe fd5a 	bl	80002ac <__adddf3>
 80017f8:	4602      	mov	r2, r0
 80017fa:	460b      	mov	r3, r1
 80017fc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001800:	f04f 0200 	mov.w	r2, #0
 8001804:	4b4d      	ldr	r3, [pc, #308]	; (800193c <tick_to_needle+0x27c>)
 8001806:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800180a:	f7ff f981 	bl	8000b10 <__aeabi_dcmple>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	f47f af78 	bne.w	8001706 <tick_to_needle+0x46>
	}


		for (angle ; angle <= 360 ; angle += b) {
 8001816:	e075      	b.n	8001904 <tick_to_needle+0x244>

				float radians = angle * 3.14159265f / 180.0f;
 8001818:	a345      	add	r3, pc, #276	; (adr r3, 8001930 <tick_to_needle+0x270>)
 800181a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001822:	f7fe fef9 	bl	8000618 <__aeabi_dmul>
 8001826:	4602      	mov	r2, r0
 8001828:	460b      	mov	r3, r1
 800182a:	4610      	mov	r0, r2
 800182c:	4619      	mov	r1, r3
 800182e:	f04f 0200 	mov.w	r2, #0
 8001832:	4b41      	ldr	r3, [pc, #260]	; (8001938 <tick_to_needle+0x278>)
 8001834:	f7ff f81a 	bl	800086c <__aeabi_ddiv>
 8001838:	4602      	mov	r2, r0
 800183a:	460b      	mov	r3, r1
 800183c:	4610      	mov	r0, r2
 800183e:	4619      	mov	r1, r3
 8001840:	f7ff f9a4 	bl	8000b8c <__aeabi_d2f>
 8001844:	4603      	mov	r3, r0
 8001846:	61fb      	str	r3, [r7, #28]
				uint16_t xPos = x + radius * cosf(radians);
 8001848:	88fb      	ldrh	r3, [r7, #6]
 800184a:	ee07 3a90 	vmov	s15, r3
 800184e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001852:	887b      	ldrh	r3, [r7, #2]
 8001854:	ee07 3a90 	vmov	s15, r3
 8001858:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 800185c:	ed97 0a07 	vldr	s0, [r7, #28]
 8001860:	f00a fcb2 	bl	800c1c8 <cosf>
 8001864:	eef0 7a40 	vmov.f32	s15, s0
 8001868:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800186c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001870:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001874:	ee17 3a90 	vmov	r3, s15
 8001878:	837b      	strh	r3, [r7, #26]
				uint16_t yPos = y + radius * sinf(radians);
 800187a:	88bb      	ldrh	r3, [r7, #4]
 800187c:	ee07 3a90 	vmov	s15, r3
 8001880:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001884:	887b      	ldrh	r3, [r7, #2]
 8001886:	ee07 3a90 	vmov	s15, r3
 800188a:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 800188e:	ed97 0a07 	vldr	s0, [r7, #28]
 8001892:	f00a fcd9 	bl	800c248 <sinf>
 8001896:	eef0 7a40 	vmov.f32	s15, s0
 800189a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800189e:	ee78 7a27 	vadd.f32	s15, s16, s15
 80018a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018a6:	ee17 3a90 	vmov	r3, s15
 80018aa:	833b      	strh	r3, [r7, #24]
				if (count == distance) {
 80018ac:	883b      	ldrh	r3, [r7, #0]
 80018ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d11a      	bne.n	80018ea <tick_to_needle+0x22a>
					double* ptr = (double*)malloc(2*sizeof(double));
 80018b4:	2010      	movs	r0, #16
 80018b6:	f009 ff87 	bl	800b7c8 <malloc>
 80018ba:	4603      	mov	r3, r0
 80018bc:	617b      	str	r3, [r7, #20]
					ptr[0] = (double)xPos;
 80018be:	8b7b      	ldrh	r3, [r7, #26]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7fe fe2f 	bl	8000524 <__aeabi_ui2d>
 80018c6:	4602      	mov	r2, r0
 80018c8:	460b      	mov	r3, r1
 80018ca:	6979      	ldr	r1, [r7, #20]
 80018cc:	e9c1 2300 	strd	r2, r3, [r1]
					ptr[1] = (double)yPos;
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	f103 0408 	add.w	r4, r3, #8
 80018d6:	8b3b      	ldrh	r3, [r7, #24]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7fe fe23 	bl	8000524 <__aeabi_ui2d>
 80018de:	4602      	mov	r2, r0
 80018e0:	460b      	mov	r3, r1
 80018e2:	e9c4 2300 	strd	r2, r3, [r4]
					return ptr;
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	e017      	b.n	800191a <tick_to_needle+0x25a>
				}
				count++;
 80018ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018ec:	3301      	adds	r3, #1
 80018ee:	637b      	str	r3, [r7, #52]	; 0x34
		for (angle ; angle <= 360 ; angle += b) {
 80018f0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80018f4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80018f8:	f7fe fcd8 	bl	80002ac <__adddf3>
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001904:	f04f 0200 	mov.w	r2, #0
 8001908:	4b0d      	ldr	r3, [pc, #52]	; (8001940 <tick_to_needle+0x280>)
 800190a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800190e:	f7ff f8ff 	bl	8000b10 <__aeabi_dcmple>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	f47f af7f 	bne.w	8001818 <tick_to_needle+0x158>

		}

}
 800191a:	4618      	mov	r0, r3
 800191c:	3744      	adds	r7, #68	; 0x44
 800191e:	46bd      	mov	sp, r7
 8001920:	ecbd 8b02 	vpop	{d8}
 8001924:	bd90      	pop	{r4, r7, pc}
 8001926:	bf00      	nop
 8001928:	8f5c28f6 	.word	0x8f5c28f6
 800192c:	3fe0f5c2 	.word	0x3fe0f5c2
 8001930:	60000000 	.word	0x60000000
 8001934:	400921fb 	.word	0x400921fb
 8001938:	40668000 	.word	0x40668000
 800193c:	406b0000 	.word	0x406b0000
 8001940:	40768000 	.word	0x40768000
 8001944:	cccccccd 	.word	0xcccccccd
 8001948:	3feccccc 	.word	0x3feccccc

0800194c <drawFilledCircle>:


void drawFilledCircle(uint16_t x, uint16_t y, uint16_t radius, uint32_t color) {
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	607b      	str	r3, [r7, #4]
 8001954:	4603      	mov	r3, r0
 8001956:	81fb      	strh	r3, [r7, #14]
 8001958:	460b      	mov	r3, r1
 800195a:	81bb      	strh	r3, [r7, #12]
 800195c:	4613      	mov	r3, r2
 800195e:	817b      	strh	r3, [r7, #10]
    BSP_LCD_SetTextColor(color);
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f001 fe63 	bl	800362c <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(x, y, radius);
 8001966:	897a      	ldrh	r2, [r7, #10]
 8001968:	89b9      	ldrh	r1, [r7, #12]
 800196a:	89fb      	ldrh	r3, [r7, #14]
 800196c:	4618      	mov	r0, r3
 800196e:	f002 fa99 	bl	8003ea4 <BSP_LCD_FillCircle>
}
 8001972:	bf00      	nop
 8001974:	3710      	adds	r7, #16
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
	...

0800197c <drawNeedle>:

void drawNeedle(uint16_t x, uint16_t y, uint16_t radius, uint16_t angle)
{
 800197c:	b590      	push	{r4, r7, lr}
 800197e:	b087      	sub	sp, #28
 8001980:	af02      	add	r7, sp, #8
 8001982:	4604      	mov	r4, r0
 8001984:	4608      	mov	r0, r1
 8001986:	4611      	mov	r1, r2
 8001988:	461a      	mov	r2, r3
 800198a:	4623      	mov	r3, r4
 800198c:	80fb      	strh	r3, [r7, #6]
 800198e:	4603      	mov	r3, r0
 8001990:	80bb      	strh	r3, [r7, #4]
 8001992:	460b      	mov	r3, r1
 8001994:	807b      	strh	r3, [r7, #2]
 8001996:	4613      	mov	r3, r2
 8001998:	803b      	strh	r3, [r7, #0]
    // Calculate the angle in radians
	  double* ptr = tick_to_needle(x,  y, radius, distance);
 800199a:	4b51      	ldr	r3, [pc, #324]	; (8001ae0 <drawNeedle+0x164>)
 800199c:	881b      	ldrh	r3, [r3, #0]
 800199e:	887a      	ldrh	r2, [r7, #2]
 80019a0:	88b9      	ldrh	r1, [r7, #4]
 80019a2:	88f8      	ldrh	r0, [r7, #6]
 80019a4:	f7ff fe8c 	bl	80016c0 <tick_to_needle>
 80019a8:	60f8      	str	r0, [r7, #12]

    float radians = angle * 3.14159265f / 180.0f;
 80019aa:	883b      	ldrh	r3, [r7, #0]
 80019ac:	ee07 3a90 	vmov	s15, r3
 80019b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019b4:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8001ae4 <drawNeedle+0x168>
 80019b8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80019bc:	eddf 6a4a 	vldr	s13, [pc, #296]	; 8001ae8 <drawNeedle+0x16c>
 80019c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019c4:	edc7 7a02 	vstr	s15, [r7, #8]

    // Calculate the coordinates for the needle tip



    drawFilledCircle(115, 120, 68, LCD_COLOR_BLUE);
 80019c8:	4b48      	ldr	r3, [pc, #288]	; (8001aec <drawNeedle+0x170>)
 80019ca:	2244      	movs	r2, #68	; 0x44
 80019cc:	2178      	movs	r1, #120	; 0x78
 80019ce:	2073      	movs	r0, #115	; 0x73
 80019d0:	f7ff ffbc 	bl	800194c <drawFilledCircle>

    // Draw the new needle line


    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80019d4:	f04f 30ff 	mov.w	r0, #4294967295
 80019d8:	f001 fe28 	bl	800362c <BSP_LCD_SetTextColor>
    BSP_LCD_DrawLine(x, y, ptr[0], ptr[1]);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e2:	4610      	mov	r0, r2
 80019e4:	4619      	mov	r1, r3
 80019e6:	f7ff f8b1 	bl	8000b4c <__aeabi_d2uiz>
 80019ea:	4603      	mov	r3, r0
 80019ec:	b29c      	uxth	r4, r3
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	3308      	adds	r3, #8
 80019f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f6:	4610      	mov	r0, r2
 80019f8:	4619      	mov	r1, r3
 80019fa:	f7ff f8a7 	bl	8000b4c <__aeabi_d2uiz>
 80019fe:	4603      	mov	r3, r0
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	88b9      	ldrh	r1, [r7, #4]
 8001a04:	88f8      	ldrh	r0, [r7, #6]
 8001a06:	4622      	mov	r2, r4
 8001a08:	f002 f83e 	bl	8003a88 <BSP_LCD_DrawLine>
    drawFilledCircle(115, 120, 6, LCD_COLOR_RED);
 8001a0c:	4b38      	ldr	r3, [pc, #224]	; (8001af0 <drawNeedle+0x174>)
 8001a0e:	2206      	movs	r2, #6
 8001a10:	2178      	movs	r1, #120	; 0x78
 8001a12:	2073      	movs	r0, #115	; 0x73
 8001a14:	f7ff ff9a 	bl	800194c <drawFilledCircle>
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001a18:	f04f 30ff 	mov.w	r0, #4294967295
 8001a1c:	f001 fe06 	bl	800362c <BSP_LCD_SetTextColor>

    if (distance>320) {
 8001a20:	4b2f      	ldr	r3, [pc, #188]	; (8001ae0 <drawNeedle+0x164>)
 8001a22:	881b      	ldrh	r3, [r3, #0]
 8001a24:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001a28:	d953      	bls.n	8001ad2 <drawNeedle+0x156>
           	BSP_LCD_Clear(LCD_COLOR_BLUE);
 8001a2a:	4830      	ldr	r0, [pc, #192]	; (8001aec <drawNeedle+0x170>)
 8001a2c:	f001 fe60 	bl	80036f0 <BSP_LCD_Clear>
            drawArc_with_Lines(115, 120, 100, 180, 360);
 8001a30:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001a34:	9300      	str	r3, [sp, #0]
 8001a36:	23b4      	movs	r3, #180	; 0xb4
 8001a38:	2264      	movs	r2, #100	; 0x64
 8001a3a:	2178      	movs	r1, #120	; 0x78
 8001a3c:	2073      	movs	r0, #115	; 0x73
 8001a3e:	f000 f859 	bl	8001af4 <drawArc_with_Lines>
            drawArc(115, 119, 100, 180, 360);
 8001a42:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001a46:	9300      	str	r3, [sp, #0]
 8001a48:	23b4      	movs	r3, #180	; 0xb4
 8001a4a:	2264      	movs	r2, #100	; 0x64
 8001a4c:	2177      	movs	r1, #119	; 0x77
 8001a4e:	2073      	movs	r0, #115	; 0x73
 8001a50:	f7ff fdb2 	bl	80015b8 <drawArc>
            drawArc(115, 118, 100, 180, 360);
 8001a54:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001a58:	9300      	str	r3, [sp, #0]
 8001a5a:	23b4      	movs	r3, #180	; 0xb4
 8001a5c:	2264      	movs	r2, #100	; 0x64
 8001a5e:	2176      	movs	r1, #118	; 0x76
 8001a60:	2073      	movs	r0, #115	; 0x73
 8001a62:	f7ff fda9 	bl	80015b8 <drawArc>
            drawArc(115, 117, 100, 180, 360);
 8001a66:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	23b4      	movs	r3, #180	; 0xb4
 8001a6e:	2264      	movs	r2, #100	; 0x64
 8001a70:	2175      	movs	r1, #117	; 0x75
 8001a72:	2073      	movs	r0, #115	; 0x73
 8001a74:	f7ff fda0 	bl	80015b8 <drawArc>
            drawArc(115, 116, 100, 180, 360);
 8001a78:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001a7c:	9300      	str	r3, [sp, #0]
 8001a7e:	23b4      	movs	r3, #180	; 0xb4
 8001a80:	2264      	movs	r2, #100	; 0x64
 8001a82:	2174      	movs	r1, #116	; 0x74
 8001a84:	2073      	movs	r0, #115	; 0x73
 8001a86:	f7ff fd97 	bl	80015b8 <drawArc>
            drawArc(115, 115, 100, 180, 360);
 8001a8a:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001a8e:	9300      	str	r3, [sp, #0]
 8001a90:	23b4      	movs	r3, #180	; 0xb4
 8001a92:	2264      	movs	r2, #100	; 0x64
 8001a94:	2173      	movs	r1, #115	; 0x73
 8001a96:	2073      	movs	r0, #115	; 0x73
 8001a98:	f7ff fd8e 	bl	80015b8 <drawArc>
            drawArc(115, 114, 100, 180, 360);
 8001a9c:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001aa0:	9300      	str	r3, [sp, #0]
 8001aa2:	23b4      	movs	r3, #180	; 0xb4
 8001aa4:	2264      	movs	r2, #100	; 0x64
 8001aa6:	2172      	movs	r1, #114	; 0x72
 8001aa8:	2073      	movs	r0, #115	; 0x73
 8001aaa:	f7ff fd85 	bl	80015b8 <drawArc>
            drawArc(115, 113, 100, 180, 360);
 8001aae:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001ab2:	9300      	str	r3, [sp, #0]
 8001ab4:	23b4      	movs	r3, #180	; 0xb4
 8001ab6:	2264      	movs	r2, #100	; 0x64
 8001ab8:	2171      	movs	r1, #113	; 0x71
 8001aba:	2073      	movs	r0, #115	; 0x73
 8001abc:	f7ff fd7c 	bl	80015b8 <drawArc>
            drawArc(115, 112, 100, 180, 360);
 8001ac0:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001ac4:	9300      	str	r3, [sp, #0]
 8001ac6:	23b4      	movs	r3, #180	; 0xb4
 8001ac8:	2264      	movs	r2, #100	; 0x64
 8001aca:	2170      	movs	r1, #112	; 0x70
 8001acc:	2073      	movs	r0, #115	; 0x73
 8001ace:	f7ff fd73 	bl	80015b8 <drawArc>
//    // Redraw the background color in the area covered by the needle
//    uint16_t backgroundRadius = radius - 21; // Adjust the radius to clear the area around the needle
//    BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
//    BSP_LCD_FillCircle(x, y, backgroundRadius);
//
    free(ptr);
 8001ad2:	68f8      	ldr	r0, [r7, #12]
 8001ad4:	f009 fe80 	bl	800b7d8 <free>
}
 8001ad8:	bf00      	nop
 8001ada:	3714      	adds	r7, #20
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd90      	pop	{r4, r7, pc}
 8001ae0:	20004c80 	.word	0x20004c80
 8001ae4:	40490fdb 	.word	0x40490fdb
 8001ae8:	43340000 	.word	0x43340000
 8001aec:	ff0000ff 	.word	0xff0000ff
 8001af0:	ffff0000 	.word	0xffff0000

08001af4 <drawArc_with_Lines>:


void drawArc_with_Lines(uint16_t x , uint16_t y, uint16_t radius, uint16_t startAngle, uint16_t endAngle)
{
 8001af4:	b590      	push	{r4, r7, lr}
 8001af6:	ed2d 8b02 	vpush	{d8}
 8001afa:	b087      	sub	sp, #28
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4604      	mov	r4, r0
 8001b00:	4608      	mov	r0, r1
 8001b02:	4611      	mov	r1, r2
 8001b04:	461a      	mov	r2, r3
 8001b06:	4623      	mov	r3, r4
 8001b08:	80fb      	strh	r3, [r7, #6]
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	80bb      	strh	r3, [r7, #4]
 8001b0e:	460b      	mov	r3, r1
 8001b10:	807b      	strh	r3, [r7, #2]
 8001b12:	4613      	mov	r3, r2
 8001b14:	803b      	strh	r3, [r7, #0]

    float angleStep = 0.1f; // Adjust this value for the desired angle resolution
 8001b16:	4b37      	ldr	r3, [pc, #220]	; (8001bf4 <drawArc_with_Lines+0x100>)
 8001b18:	613b      	str	r3, [r7, #16]

    for (float angle = startAngle; angle <= endAngle; angle += angleStep)
 8001b1a:	883b      	ldrh	r3, [r7, #0]
 8001b1c:	ee07 3a90 	vmov	s15, r3
 8001b20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b24:	edc7 7a05 	vstr	s15, [r7, #20]
 8001b28:	e04b      	b.n	8001bc2 <drawArc_with_Lines+0xce>
    {

        float radians = angle * 3.14159265f / 180.0f;
 8001b2a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b2e:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001bf8 <drawArc_with_Lines+0x104>
 8001b32:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b36:	eddf 6a31 	vldr	s13, [pc, #196]	; 8001bfc <drawArc_with_Lines+0x108>
 8001b3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b3e:	edc7 7a03 	vstr	s15, [r7, #12]
        uint16_t xPos = x + radius * cosf(radians);
 8001b42:	88fb      	ldrh	r3, [r7, #6]
 8001b44:	ee07 3a90 	vmov	s15, r3
 8001b48:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001b4c:	887b      	ldrh	r3, [r7, #2]
 8001b4e:	ee07 3a90 	vmov	s15, r3
 8001b52:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8001b56:	ed97 0a03 	vldr	s0, [r7, #12]
 8001b5a:	f00a fb35 	bl	800c1c8 <cosf>
 8001b5e:	eef0 7a40 	vmov.f32	s15, s0
 8001b62:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8001b66:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001b6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b6e:	ee17 3a90 	vmov	r3, s15
 8001b72:	817b      	strh	r3, [r7, #10]
        uint16_t yPos = y + radius * sinf(radians);
 8001b74:	88bb      	ldrh	r3, [r7, #4]
 8001b76:	ee07 3a90 	vmov	s15, r3
 8001b7a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001b7e:	887b      	ldrh	r3, [r7, #2]
 8001b80:	ee07 3a90 	vmov	s15, r3
 8001b84:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8001b88:	ed97 0a03 	vldr	s0, [r7, #12]
 8001b8c:	f00a fb5c 	bl	800c248 <sinf>
 8001b90:	eef0 7a40 	vmov.f32	s15, s0
 8001b94:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8001b98:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001b9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ba0:	ee17 3a90 	vmov	r3, s15
 8001ba4:	813b      	strh	r3, [r7, #8]
        BSP_LCD_DrawPixel(xPos, yPos, LCD_COLOR_RED);
 8001ba6:	8939      	ldrh	r1, [r7, #8]
 8001ba8:	897b      	ldrh	r3, [r7, #10]
 8001baa:	4a15      	ldr	r2, [pc, #84]	; (8001c00 <drawArc_with_Lines+0x10c>)
 8001bac:	4618      	mov	r0, r3
 8001bae:	f002 faff 	bl	80041b0 <BSP_LCD_DrawPixel>
    for (float angle = startAngle; angle <= endAngle; angle += angleStep)
 8001bb2:	ed97 7a05 	vldr	s14, [r7, #20]
 8001bb6:	edd7 7a04 	vldr	s15, [r7, #16]
 8001bba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bbe:	edc7 7a05 	vstr	s15, [r7, #20]
 8001bc2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001bc4:	ee07 3a90 	vmov	s15, r3
 8001bc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bcc:	ed97 7a05 	vldr	s14, [r7, #20]
 8001bd0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bd8:	d9a7      	bls.n	8001b2a <drawArc_with_Lines+0x36>
        // Use HAL function or direct register manipulation to set the pixel at (xPos, yPos)
        // Example: BSP_LCD_DrawPixel(xPos, yPos, LCD_COLOR_RED);
        // Draw a tick mark at this angle

    }
    drawTicks(x,y,radius);
 8001bda:	887a      	ldrh	r2, [r7, #2]
 8001bdc:	88b9      	ldrh	r1, [r7, #4]
 8001bde:	88fb      	ldrh	r3, [r7, #6]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff fbad 	bl	8001340 <drawTicks>
//    drawNeedle(x, y, radius);

}
 8001be6:	bf00      	nop
 8001be8:	371c      	adds	r7, #28
 8001bea:	46bd      	mov	sp, r7
 8001bec:	ecbd 8b02 	vpop	{d8}
 8001bf0:	bd90      	pop	{r4, r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	3dcccccd 	.word	0x3dcccccd
 8001bf8:	40490fdb 	.word	0x40490fdb
 8001bfc:	43340000 	.word	0x43340000
 8001c00:	ffff0000 	.word	0xffff0000

08001c04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c0a:	f002 fdb3 	bl	8004774 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c0e:	f000 f84f 	bl	8001cb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c12:	f000 f985 	bl	8001f20 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001c16:	f000 f959 	bl	8001ecc <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001c1a:	f000 f8bb 	bl	8001d94 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001c1e:	f000 f907 	bl	8001e30 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  DWT_Delay_Init();
 8001c22:	f7ff f97f 	bl	8000f24 <DWT_Delay_Init>
  HAL_FLASH_Unlock(); // flash kilidi açıldı
 8001c26:	f003 f9d7 	bl	8004fd8 <HAL_FLASH_Unlock>
  static uint32_t SectorError = 0;
  FLASH_EraseInitTypeDef eraseInitStruct;
  eraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS; // Erase a sector
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	607b      	str	r3, [r7, #4]
  eraseInitStruct.Sector = FLASH_SECTOR_7; // Erase Sector 7 (you can change this to the desired sector)
 8001c2e:	2307      	movs	r3, #7
 8001c30:	60fb      	str	r3, [r7, #12]
  eraseInitStruct.NbSectors = 1; // Erase only one sector
 8001c32:	2301      	movs	r3, #1
 8001c34:	613b      	str	r3, [r7, #16]
  eraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3; // Voltage range 2.7V to 3.6V
 8001c36:	2302      	movs	r3, #2
 8001c38:	617b      	str	r3, [r7, #20]



//  HAL_FLASHEx_Erase(&eraseInitStruct,&SectorError);

HAL_FLASH_Lock(); // flash kilidi açıldı
 8001c3a:	f003 f9ef 	bl	800501c <HAL_FLASH_Lock>



  //write text

  myTask02SemaphoreHandle = osSemaphoreNew(1, 0, NULL);
 8001c3e:	2200      	movs	r2, #0
 8001c40:	2100      	movs	r1, #0
 8001c42:	2001      	movs	r0, #1
 8001c44:	f006 ff7d 	bl	8008b42 <osSemaphoreNew>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	4a0f      	ldr	r2, [pc, #60]	; (8001c88 <main+0x84>)
 8001c4c:	6013      	str	r3, [r2, #0]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001c4e:	f006 fe81 	bl	8008954 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001c52:	4a0e      	ldr	r2, [pc, #56]	; (8001c8c <main+0x88>)
 8001c54:	2100      	movs	r1, #0
 8001c56:	480e      	ldr	r0, [pc, #56]	; (8001c90 <main+0x8c>)
 8001c58:	f006 fec6 	bl	80089e8 <osThreadNew>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	4a0d      	ldr	r2, [pc, #52]	; (8001c94 <main+0x90>)
 8001c60:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8001c62:	4a0d      	ldr	r2, [pc, #52]	; (8001c98 <main+0x94>)
 8001c64:	2100      	movs	r1, #0
 8001c66:	480d      	ldr	r0, [pc, #52]	; (8001c9c <main+0x98>)
 8001c68:	f006 febe 	bl	80089e8 <osThreadNew>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	4a0c      	ldr	r2, [pc, #48]	; (8001ca0 <main+0x9c>)
 8001c70:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 8001c72:	4a0c      	ldr	r2, [pc, #48]	; (8001ca4 <main+0xa0>)
 8001c74:	2100      	movs	r1, #0
 8001c76:	480c      	ldr	r0, [pc, #48]	; (8001ca8 <main+0xa4>)
 8001c78:	f006 feb6 	bl	80089e8 <osThreadNew>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	4a0b      	ldr	r2, [pc, #44]	; (8001cac <main+0xa8>)
 8001c80:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001c82:	f006 fe8b 	bl	800899c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001c86:	e7fe      	b.n	8001c86 <main+0x82>
 8001c88:	20004ccc 	.word	0x20004ccc
 8001c8c:	0800cddc 	.word	0x0800cddc
 8001c90:	080021b5 	.word	0x080021b5
 8001c94:	20004c7c 	.word	0x20004c7c
 8001c98:	0800ce00 	.word	0x0800ce00
 8001c9c:	08002231 	.word	0x08002231
 8001ca0:	20004d14 	.word	0x20004d14
 8001ca4:	0800ce24 	.word	0x0800ce24
 8001ca8:	0800223d 	.word	0x0800223d
 8001cac:	20004d1c 	.word	0x20004d1c

08001cb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b094      	sub	sp, #80	; 0x50
 8001cb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cb6:	f107 0320 	add.w	r3, r7, #32
 8001cba:	2230      	movs	r2, #48	; 0x30
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f009 fda0 	bl	800b804 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cc4:	f107 030c 	add.w	r3, r7, #12
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	605a      	str	r2, [r3, #4]
 8001cce:	609a      	str	r2, [r3, #8]
 8001cd0:	60da      	str	r2, [r3, #12]
 8001cd2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	60bb      	str	r3, [r7, #8]
 8001cd8:	4b2c      	ldr	r3, [pc, #176]	; (8001d8c <SystemClock_Config+0xdc>)
 8001cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cdc:	4a2b      	ldr	r2, [pc, #172]	; (8001d8c <SystemClock_Config+0xdc>)
 8001cde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ce2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ce4:	4b29      	ldr	r3, [pc, #164]	; (8001d8c <SystemClock_Config+0xdc>)
 8001ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cec:	60bb      	str	r3, [r7, #8]
 8001cee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	607b      	str	r3, [r7, #4]
 8001cf4:	4b26      	ldr	r3, [pc, #152]	; (8001d90 <SystemClock_Config+0xe0>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a25      	ldr	r2, [pc, #148]	; (8001d90 <SystemClock_Config+0xe0>)
 8001cfa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001cfe:	6013      	str	r3, [r2, #0]
 8001d00:	4b23      	ldr	r3, [pc, #140]	; (8001d90 <SystemClock_Config+0xe0>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d08:	607b      	str	r3, [r7, #4]
 8001d0a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d14:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d16:	2302      	movs	r3, #2
 8001d18:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d1a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001d20:	2308      	movs	r3, #8
 8001d22:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 360;
 8001d24:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001d28:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001d2e:	2304      	movs	r3, #4
 8001d30:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d32:	f107 0320 	add.w	r3, r7, #32
 8001d36:	4618      	mov	r0, r3
 8001d38:	f003 ffe0 	bl	8005cfc <HAL_RCC_OscConfig>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001d42:	f000 fc9f 	bl	8002684 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001d46:	f003 ff89 	bl	8005c5c <HAL_PWREx_EnableOverDrive>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001d50:	f000 fc98 	bl	8002684 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d54:	230f      	movs	r3, #15
 8001d56:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d60:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001d64:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d6a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001d6c:	f107 030c 	add.w	r3, r7, #12
 8001d70:	2105      	movs	r1, #5
 8001d72:	4618      	mov	r0, r3
 8001d74:	f004 fa3a 	bl	80061ec <HAL_RCC_ClockConfig>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001d7e:	f000 fc81 	bl	8002684 <Error_Handler>
  }
}
 8001d82:	bf00      	nop
 8001d84:	3750      	adds	r7, #80	; 0x50
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40023800 	.word	0x40023800
 8001d90:	40007000 	.word	0x40007000

08001d94 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d9a:	f107 0308 	add.w	r3, r7, #8
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]
 8001da2:	605a      	str	r2, [r3, #4]
 8001da4:	609a      	str	r2, [r3, #8]
 8001da6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001da8:	463b      	mov	r3, r7
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001db0:	4b1e      	ldr	r3, [pc, #120]	; (8001e2c <MX_TIM2_Init+0x98>)
 8001db2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001db6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 65535;
 8001db8:	4b1c      	ldr	r3, [pc, #112]	; (8001e2c <MX_TIM2_Init+0x98>)
 8001dba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dbe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dc0:	4b1a      	ldr	r3, [pc, #104]	; (8001e2c <MX_TIM2_Init+0x98>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001dc6:	4b19      	ldr	r3, [pc, #100]	; (8001e2c <MX_TIM2_Init+0x98>)
 8001dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dcc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dce:	4b17      	ldr	r3, [pc, #92]	; (8001e2c <MX_TIM2_Init+0x98>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dd4:	4b15      	ldr	r3, [pc, #84]	; (8001e2c <MX_TIM2_Init+0x98>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001dda:	4814      	ldr	r0, [pc, #80]	; (8001e2c <MX_TIM2_Init+0x98>)
 8001ddc:	f005 fc6e 	bl	80076bc <HAL_TIM_Base_Init>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001de6:	f000 fc4d 	bl	8002684 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001df0:	f107 0308 	add.w	r3, r7, #8
 8001df4:	4619      	mov	r1, r3
 8001df6:	480d      	ldr	r0, [pc, #52]	; (8001e2c <MX_TIM2_Init+0x98>)
 8001df8:	f005 fe57 	bl	8007aaa <HAL_TIM_ConfigClockSource>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001e02:	f000 fc3f 	bl	8002684 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e06:	2300      	movs	r3, #0
 8001e08:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e0e:	463b      	mov	r3, r7
 8001e10:	4619      	mov	r1, r3
 8001e12:	4806      	ldr	r0, [pc, #24]	; (8001e2c <MX_TIM2_Init+0x98>)
 8001e14:	f006 f872 	bl	8007efc <HAL_TIMEx_MasterConfigSynchronization>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001e1e:	f000 fc31 	bl	8002684 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e22:	bf00      	nop
 8001e24:	3718      	adds	r7, #24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	20004d20 	.word	0x20004d20

08001e30 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e36:	f107 0308 	add.w	r3, r7, #8
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	605a      	str	r2, [r3, #4]
 8001e40:	609a      	str	r2, [r3, #8]
 8001e42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e44:	463b      	mov	r3, r7
 8001e46:	2200      	movs	r2, #0
 8001e48:	601a      	str	r2, [r3, #0]
 8001e4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e4c:	4b1d      	ldr	r3, [pc, #116]	; (8001ec4 <MX_TIM3_Init+0x94>)
 8001e4e:	4a1e      	ldr	r2, [pc, #120]	; (8001ec8 <MX_TIM3_Init+0x98>)
 8001e50:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 18000-1;
 8001e52:	4b1c      	ldr	r3, [pc, #112]	; (8001ec4 <MX_TIM3_Init+0x94>)
 8001e54:	f244 624f 	movw	r2, #17999	; 0x464f
 8001e58:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e5a:	4b1a      	ldr	r3, [pc, #104]	; (8001ec4 <MX_TIM3_Init+0x94>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000;
 8001e60:	4b18      	ldr	r3, [pc, #96]	; (8001ec4 <MX_TIM3_Init+0x94>)
 8001e62:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001e66:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e68:	4b16      	ldr	r3, [pc, #88]	; (8001ec4 <MX_TIM3_Init+0x94>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e6e:	4b15      	ldr	r3, [pc, #84]	; (8001ec4 <MX_TIM3_Init+0x94>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001e74:	4813      	ldr	r0, [pc, #76]	; (8001ec4 <MX_TIM3_Init+0x94>)
 8001e76:	f005 fc21 	bl	80076bc <HAL_TIM_Base_Init>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001e80:	f000 fc00 	bl	8002684 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001e8a:	f107 0308 	add.w	r3, r7, #8
 8001e8e:	4619      	mov	r1, r3
 8001e90:	480c      	ldr	r0, [pc, #48]	; (8001ec4 <MX_TIM3_Init+0x94>)
 8001e92:	f005 fe0a 	bl	8007aaa <HAL_TIM_ConfigClockSource>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001e9c:	f000 fbf2 	bl	8002684 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ea8:	463b      	mov	r3, r7
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4805      	ldr	r0, [pc, #20]	; (8001ec4 <MX_TIM3_Init+0x94>)
 8001eae:	f006 f825 	bl	8007efc <HAL_TIMEx_MasterConfigSynchronization>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001eb8:	f000 fbe4 	bl	8002684 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001ebc:	bf00      	nop
 8001ebe:	3718      	adds	r7, #24
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	20004c84 	.word	0x20004c84
 8001ec8:	40000400 	.word	0x40000400

08001ecc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ed0:	4b11      	ldr	r3, [pc, #68]	; (8001f18 <MX_USART1_UART_Init+0x4c>)
 8001ed2:	4a12      	ldr	r2, [pc, #72]	; (8001f1c <MX_USART1_UART_Init+0x50>)
 8001ed4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ed6:	4b10      	ldr	r3, [pc, #64]	; (8001f18 <MX_USART1_UART_Init+0x4c>)
 8001ed8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001edc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ede:	4b0e      	ldr	r3, [pc, #56]	; (8001f18 <MX_USART1_UART_Init+0x4c>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ee4:	4b0c      	ldr	r3, [pc, #48]	; (8001f18 <MX_USART1_UART_Init+0x4c>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001eea:	4b0b      	ldr	r3, [pc, #44]	; (8001f18 <MX_USART1_UART_Init+0x4c>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ef0:	4b09      	ldr	r3, [pc, #36]	; (8001f18 <MX_USART1_UART_Init+0x4c>)
 8001ef2:	220c      	movs	r2, #12
 8001ef4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ef6:	4b08      	ldr	r3, [pc, #32]	; (8001f18 <MX_USART1_UART_Init+0x4c>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001efc:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <MX_USART1_UART_Init+0x4c>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f02:	4805      	ldr	r0, [pc, #20]	; (8001f18 <MX_USART1_UART_Init+0x4c>)
 8001f04:	f006 f88a 	bl	800801c <HAL_UART_Init>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001f0e:	f000 fbb9 	bl	8002684 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	20004cd0 	.word	0x20004cd0
 8001f1c:	40011000 	.word	0x40011000

08001f20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b08c      	sub	sp, #48	; 0x30
 8001f24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f26:	f107 031c 	add.w	r3, r7, #28
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	601a      	str	r2, [r3, #0]
 8001f2e:	605a      	str	r2, [r3, #4]
 8001f30:	609a      	str	r2, [r3, #8]
 8001f32:	60da      	str	r2, [r3, #12]
 8001f34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	61bb      	str	r3, [r7, #24]
 8001f3a:	4b97      	ldr	r3, [pc, #604]	; (8002198 <MX_GPIO_Init+0x278>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	4a96      	ldr	r2, [pc, #600]	; (8002198 <MX_GPIO_Init+0x278>)
 8001f40:	f043 0310 	orr.w	r3, r3, #16
 8001f44:	6313      	str	r3, [r2, #48]	; 0x30
 8001f46:	4b94      	ldr	r3, [pc, #592]	; (8002198 <MX_GPIO_Init+0x278>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	f003 0310 	and.w	r3, r3, #16
 8001f4e:	61bb      	str	r3, [r7, #24]
 8001f50:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	617b      	str	r3, [r7, #20]
 8001f56:	4b90      	ldr	r3, [pc, #576]	; (8002198 <MX_GPIO_Init+0x278>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	4a8f      	ldr	r2, [pc, #572]	; (8002198 <MX_GPIO_Init+0x278>)
 8001f5c:	f043 0320 	orr.w	r3, r3, #32
 8001f60:	6313      	str	r3, [r2, #48]	; 0x30
 8001f62:	4b8d      	ldr	r3, [pc, #564]	; (8002198 <MX_GPIO_Init+0x278>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f66:	f003 0320 	and.w	r3, r3, #32
 8001f6a:	617b      	str	r3, [r7, #20]
 8001f6c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f6e:	2300      	movs	r3, #0
 8001f70:	613b      	str	r3, [r7, #16]
 8001f72:	4b89      	ldr	r3, [pc, #548]	; (8002198 <MX_GPIO_Init+0x278>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	4a88      	ldr	r2, [pc, #544]	; (8002198 <MX_GPIO_Init+0x278>)
 8001f78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f7e:	4b86      	ldr	r3, [pc, #536]	; (8002198 <MX_GPIO_Init+0x278>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f86:	613b      	str	r3, [r7, #16]
 8001f88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	60fb      	str	r3, [r7, #12]
 8001f8e:	4b82      	ldr	r3, [pc, #520]	; (8002198 <MX_GPIO_Init+0x278>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f92:	4a81      	ldr	r2, [pc, #516]	; (8002198 <MX_GPIO_Init+0x278>)
 8001f94:	f043 0301 	orr.w	r3, r3, #1
 8001f98:	6313      	str	r3, [r2, #48]	; 0x30
 8001f9a:	4b7f      	ldr	r3, [pc, #508]	; (8002198 <MX_GPIO_Init+0x278>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	60bb      	str	r3, [r7, #8]
 8001faa:	4b7b      	ldr	r3, [pc, #492]	; (8002198 <MX_GPIO_Init+0x278>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	4a7a      	ldr	r2, [pc, #488]	; (8002198 <MX_GPIO_Init+0x278>)
 8001fb0:	f043 0302 	orr.w	r3, r3, #2
 8001fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb6:	4b78      	ldr	r3, [pc, #480]	; (8002198 <MX_GPIO_Init+0x278>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	60bb      	str	r3, [r7, #8]
 8001fc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	607b      	str	r3, [r7, #4]
 8001fc6:	4b74      	ldr	r3, [pc, #464]	; (8002198 <MX_GPIO_Init+0x278>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	4a73      	ldr	r2, [pc, #460]	; (8002198 <MX_GPIO_Init+0x278>)
 8001fcc:	f043 0304 	orr.w	r3, r3, #4
 8001fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd2:	4b71      	ldr	r3, [pc, #452]	; (8002198 <MX_GPIO_Init+0x278>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	f003 0304 	and.w	r3, r3, #4
 8001fda:	607b      	str	r3, [r7, #4]
 8001fdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	603b      	str	r3, [r7, #0]
 8001fe2:	4b6d      	ldr	r3, [pc, #436]	; (8002198 <MX_GPIO_Init+0x278>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	4a6c      	ldr	r2, [pc, #432]	; (8002198 <MX_GPIO_Init+0x278>)
 8001fe8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fec:	6313      	str	r3, [r2, #48]	; 0x30
 8001fee:	4b6a      	ldr	r3, [pc, #424]	; (8002198 <MX_GPIO_Init+0x278>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ff6:	603b      	str	r3, [r7, #0]
 8001ff8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_12, GPIO_PIN_RESET);
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f241 4124 	movw	r1, #5156	; 0x1424
 8002000:	4866      	ldr	r0, [pc, #408]	; (800219c <MX_GPIO_Init+0x27c>)
 8002002:	f003 fb1f 	bl	8005644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 8002006:	2200      	movs	r2, #0
 8002008:	2101      	movs	r1, #1
 800200a:	4865      	ldr	r0, [pc, #404]	; (80021a0 <MX_GPIO_Init+0x280>)
 800200c:	f003 fb1a 	bl	8005644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5, GPIO_PIN_RESET);
 8002010:	2200      	movs	r2, #0
 8002012:	212a      	movs	r1, #42	; 0x2a
 8002014:	4863      	ldr	r0, [pc, #396]	; (80021a4 <MX_GPIO_Init+0x284>)
 8002016:	f003 fb15 	bl	8005644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800201a:	2200      	movs	r2, #0
 800201c:	2101      	movs	r1, #1
 800201e:	4862      	ldr	r0, [pc, #392]	; (80021a8 <MX_GPIO_Init+0x288>)
 8002020:	f003 fb10 	bl	8005644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 8002024:	2200      	movs	r2, #0
 8002026:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800202a:	4860      	ldr	r0, [pc, #384]	; (80021ac <MX_GPIO_Init+0x28c>)
 800202c:	f003 fb0a 	bl	8005644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8002030:	2200      	movs	r2, #0
 8002032:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8002036:	485e      	ldr	r0, [pc, #376]	; (80021b0 <MX_GPIO_Init+0x290>)
 8002038:	f003 fb04 	bl	8005644 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE5 PE10 PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_12;
 800203c:	f241 4324 	movw	r3, #5156	; 0x1424
 8002040:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002042:	2301      	movs	r3, #1
 8002044:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002046:	2300      	movs	r3, #0
 8002048:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204a:	2300      	movs	r3, #0
 800204c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800204e:	f107 031c 	add.w	r3, r7, #28
 8002052:	4619      	mov	r1, r3
 8002054:	4851      	ldr	r0, [pc, #324]	; (800219c <MX_GPIO_Init+0x27c>)
 8002056:	f003 f931 	bl	80052bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PE3 PE6 PE11 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_11|GPIO_PIN_13;
 800205a:	f642 0348 	movw	r3, #10312	; 0x2848
 800205e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002060:	2300      	movs	r3, #0
 8002062:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002064:	2300      	movs	r3, #0
 8002066:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002068:	f107 031c 	add.w	r3, r7, #28
 800206c:	4619      	mov	r1, r3
 800206e:	484b      	ldr	r0, [pc, #300]	; (800219c <MX_GPIO_Init+0x27c>)
 8002070:	f003 f924 	bl	80052bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PF0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002074:	2301      	movs	r3, #1
 8002076:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002078:	2301      	movs	r3, #1
 800207a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207c:	2300      	movs	r3, #0
 800207e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002080:	2300      	movs	r3, #0
 8002082:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002084:	f107 031c 	add.w	r3, r7, #28
 8002088:	4619      	mov	r1, r3
 800208a:	4845      	ldr	r0, [pc, #276]	; (80021a0 <MX_GPIO_Init+0x280>)
 800208c:	f003 f916 	bl	80052bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002090:	2302      	movs	r3, #2
 8002092:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002094:	2300      	movs	r3, #0
 8002096:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002098:	2300      	movs	r3, #0
 800209a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800209c:	f107 031c 	add.w	r3, r7, #28
 80020a0:	4619      	mov	r1, r3
 80020a2:	483f      	ldr	r0, [pc, #252]	; (80021a0 <MX_GPIO_Init+0x280>)
 80020a4:	f003 f90a 	bl	80052bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80020a8:	2301      	movs	r3, #1
 80020aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020ac:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80020b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b2:	2300      	movs	r3, #0
 80020b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020b6:	f107 031c 	add.w	r3, r7, #28
 80020ba:	4619      	mov	r1, r3
 80020bc:	4839      	ldr	r0, [pc, #228]	; (80021a4 <MX_GPIO_Init+0x284>)
 80020be:	f003 f8fd 	bl	80052bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5;
 80020c2:	232a      	movs	r3, #42	; 0x2a
 80020c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020c6:	2301      	movs	r3, #1
 80020c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ca:	2300      	movs	r3, #0
 80020cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ce:	2300      	movs	r3, #0
 80020d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020d2:	f107 031c 	add.w	r3, r7, #28
 80020d6:	4619      	mov	r1, r3
 80020d8:	4832      	ldr	r0, [pc, #200]	; (80021a4 <MX_GPIO_Init+0x284>)
 80020da:	f003 f8ef 	bl	80052bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA4 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6;
 80020de:	2354      	movs	r3, #84	; 0x54
 80020e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020e2:	2300      	movs	r3, #0
 80020e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e6:	2300      	movs	r3, #0
 80020e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ea:	f107 031c 	add.w	r3, r7, #28
 80020ee:	4619      	mov	r1, r3
 80020f0:	482c      	ldr	r0, [pc, #176]	; (80021a4 <MX_GPIO_Init+0x284>)
 80020f2:	f003 f8e3 	bl	80052bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80020f6:	2301      	movs	r3, #1
 80020f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020fa:	2301      	movs	r3, #1
 80020fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fe:	2300      	movs	r3, #0
 8002100:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002102:	2300      	movs	r3, #0
 8002104:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002106:	f107 031c 	add.w	r3, r7, #28
 800210a:	4619      	mov	r1, r3
 800210c:	4826      	ldr	r0, [pc, #152]	; (80021a8 <MX_GPIO_Init+0x288>)
 800210e:	f003 f8d5 	bl	80052bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002112:	2302      	movs	r3, #2
 8002114:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002116:	2300      	movs	r3, #0
 8002118:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211a:	2300      	movs	r3, #0
 800211c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800211e:	f107 031c 	add.w	r3, r7, #28
 8002122:	4619      	mov	r1, r3
 8002124:	4820      	ldr	r0, [pc, #128]	; (80021a8 <MX_GPIO_Init+0x288>)
 8002126:	f003 f8c9 	bl	80052bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 800212a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800212e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002130:	2301      	movs	r3, #1
 8002132:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002134:	2300      	movs	r3, #0
 8002136:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002138:	2300      	movs	r3, #0
 800213a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800213c:	f107 031c 	add.w	r3, r7, #28
 8002140:	4619      	mov	r1, r3
 8002142:	481a      	ldr	r0, [pc, #104]	; (80021ac <MX_GPIO_Init+0x28c>)
 8002144:	f003 f8ba 	bl	80052bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8002148:	f44f 7320 	mov.w	r3, #640	; 0x280
 800214c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800214e:	2300      	movs	r3, #0
 8002150:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002152:	2300      	movs	r3, #0
 8002154:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002156:	f107 031c 	add.w	r3, r7, #28
 800215a:	4619      	mov	r1, r3
 800215c:	4813      	ldr	r0, [pc, #76]	; (80021ac <MX_GPIO_Init+0x28c>)
 800215e:	f003 f8ad 	bl	80052bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002162:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002166:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002168:	2301      	movs	r3, #1
 800216a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216c:	2300      	movs	r3, #0
 800216e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002170:	2300      	movs	r3, #0
 8002172:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002174:	f107 031c 	add.w	r3, r7, #28
 8002178:	4619      	mov	r1, r3
 800217a:	480d      	ldr	r0, [pc, #52]	; (80021b0 <MX_GPIO_Init+0x290>)
 800217c:	f003 f89e 	bl	80052bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8002180:	2200      	movs	r2, #0
 8002182:	2105      	movs	r1, #5
 8002184:	2006      	movs	r0, #6
 8002186:	f002 fc13 	bl	80049b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800218a:	2006      	movs	r0, #6
 800218c:	f002 fc2c 	bl	80049e8 <HAL_NVIC_EnableIRQ>

}
 8002190:	bf00      	nop
 8002192:	3730      	adds	r7, #48	; 0x30
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40023800 	.word	0x40023800
 800219c:	40021000 	.word	0x40021000
 80021a0:	40021400 	.word	0x40021400
 80021a4:	40020000 	.word	0x40020000
 80021a8:	40020400 	.word	0x40020400
 80021ac:	40020800 	.word	0x40020800
 80021b0:	40021800 	.word	0x40021800

080021b4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
	 for(;;)
	     {

	   	  time = Read_HCSR04();			// get the high time
 80021bc:	f7fe ff28 	bl	8001010 <Read_HCSR04>
 80021c0:	4603      	mov	r3, r0
 80021c2:	4a16      	ldr	r2, [pc, #88]	; (800221c <StartDefaultTask+0x68>)
 80021c4:	6013      	str	r3, [r2, #0]
	   	  distance =  (time / 58);	// user the formula to get the distance
 80021c6:	4b15      	ldr	r3, [pc, #84]	; (800221c <StartDefaultTask+0x68>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a15      	ldr	r2, [pc, #84]	; (8002220 <StartDefaultTask+0x6c>)
 80021cc:	fba2 2303 	umull	r2, r3, r2, r3
 80021d0:	095b      	lsrs	r3, r3, #5
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	4b13      	ldr	r3, [pc, #76]	; (8002224 <StartDefaultTask+0x70>)
 80021d6:	801a      	strh	r2, [r3, #0]
	   	  uint16_t* ptr = &distance;
 80021d8:	4b12      	ldr	r3, [pc, #72]	; (8002224 <StartDefaultTask+0x70>)
 80021da:	60fb      	str	r3, [r7, #12]
	   	  printMessage(" Distance: %d \n", distance);
 80021dc:	4b11      	ldr	r3, [pc, #68]	; (8002224 <StartDefaultTask+0x70>)
 80021de:	881b      	ldrh	r3, [r3, #0]
 80021e0:	4619      	mov	r1, r3
 80021e2:	4811      	ldr	r0, [pc, #68]	; (8002228 <StartDefaultTask+0x74>)
 80021e4:	f7fe fef2 	bl	8000fcc <printMessage>
	   	 printMessage(" Distance: %d \n", ptr);
 80021e8:	68f9      	ldr	r1, [r7, #12]
 80021ea:	480f      	ldr	r0, [pc, #60]	; (8002228 <StartDefaultTask+0x74>)
 80021ec:	f7fe feee 	bl	8000fcc <printMessage>

	   	 	 	  if(distance >= 20)
 80021f0:	4b0c      	ldr	r3, [pc, #48]	; (8002224 <StartDefaultTask+0x70>)
 80021f2:	881b      	ldrh	r3, [r3, #0]
 80021f4:	2b13      	cmp	r3, #19
 80021f6:	d906      	bls.n	8002206 <StartDefaultTask+0x52>
	   	 	 	  {
	   	 	 		  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_13,1);
 80021f8:	2201      	movs	r2, #1
 80021fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021fe:	480b      	ldr	r0, [pc, #44]	; (800222c <StartDefaultTask+0x78>)
 8002200:	f003 fa20 	bl	8005644 <HAL_GPIO_WritePin>
 8002204:	e005      	b.n	8002212 <StartDefaultTask+0x5e>
	   	 	 	  } else
	   	 	 		  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_13,0);
 8002206:	2200      	movs	r2, #0
 8002208:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800220c:	4807      	ldr	r0, [pc, #28]	; (800222c <StartDefaultTask+0x78>)
 800220e:	f003 fa19 	bl	8005644 <HAL_GPIO_WritePin>
	     osDelay(100);
 8002212:	2064      	movs	r0, #100	; 0x64
 8002214:	f006 fc7a 	bl	8008b0c <osDelay>
	     {
 8002218:	e7d0      	b.n	80021bc <StartDefaultTask+0x8>
 800221a:	bf00      	nop
 800221c:	20004d18 	.word	0x20004d18
 8002220:	8d3dcb09 	.word	0x8d3dcb09
 8002224:	20004c80 	.word	0x20004c80
 8002228:	0800cdb0 	.word	0x0800cdb0
 800222c:	40021800 	.word	0x40021800

08002230 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
 	for(;;)
 8002238:	e7fe      	b.n	8002238 <StartTask02+0x8>
	...

0800223c <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 800223c:	b590      	push	{r4, r7, lr}
 800223e:	b09f      	sub	sp, #124	; 0x7c
 8002240:	af02      	add	r7, sp, #8
 8002242:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */

	  BSP_LCD_Init();
 8002244:	f001 f8fc 	bl	8003440 <BSP_LCD_Init>
		    BSP_LCD_LayerDefaultInit(1, SDRAM_DEVICE_ADDR);
 8002248:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 800224c:	2001      	movs	r0, #1
 800224e:	f001 f979 	bl	8003544 <BSP_LCD_LayerDefaultInit>
		    BSP_LCD_SelectLayer(1);  // select on which layer we write
 8002252:	2001      	movs	r0, #1
 8002254:	f001 f9da 	bl	800360c <BSP_LCD_SelectLayer>
		    BSP_LCD_DisplayOn();     // turn on LCD
 8002258:	f001 fec4 	bl	8003fe4 <BSP_LCD_DisplayOn>
		    BSP_LCD_Clear(LCD_COLOR_BLUE);         // clear the LCD on blue color
 800225c:	48cc      	ldr	r0, [pc, #816]	; (8002590 <StartTask03+0x354>)
 800225e:	f001 fa47 	bl	80036f0 <BSP_LCD_Clear>
		    BSP_LCD_SetBackColor(LCD_COLOR_BLUE);  // set text background color
 8002262:	48cb      	ldr	r0, [pc, #812]	; (8002590 <StartTask03+0x354>)
 8002264:	f001 f9fa 	bl	800365c <BSP_LCD_SetBackColor>
		    BSP_LCD_SetTextColor(LCD_COLOR_WHITE); // set text color
 8002268:	f04f 30ff 	mov.w	r0, #4294967295
 800226c:	f001 f9de 	bl	800362c <BSP_LCD_SetTextColor>

		    drawArc_with_Lines(115, 120, 100, 180, 360);
 8002270:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8002274:	9300      	str	r3, [sp, #0]
 8002276:	23b4      	movs	r3, #180	; 0xb4
 8002278:	2264      	movs	r2, #100	; 0x64
 800227a:	2178      	movs	r1, #120	; 0x78
 800227c:	2073      	movs	r0, #115	; 0x73
 800227e:	f7ff fc39 	bl	8001af4 <drawArc_with_Lines>
		    drawArc(115, 119, 100, 180, 360);
 8002282:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8002286:	9300      	str	r3, [sp, #0]
 8002288:	23b4      	movs	r3, #180	; 0xb4
 800228a:	2264      	movs	r2, #100	; 0x64
 800228c:	2177      	movs	r1, #119	; 0x77
 800228e:	2073      	movs	r0, #115	; 0x73
 8002290:	f7ff f992 	bl	80015b8 <drawArc>
		    drawArc(115, 118, 100, 180, 360);
 8002294:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8002298:	9300      	str	r3, [sp, #0]
 800229a:	23b4      	movs	r3, #180	; 0xb4
 800229c:	2264      	movs	r2, #100	; 0x64
 800229e:	2176      	movs	r1, #118	; 0x76
 80022a0:	2073      	movs	r0, #115	; 0x73
 80022a2:	f7ff f989 	bl	80015b8 <drawArc>
		    drawArc(115, 117, 100, 180, 360);
 80022a6:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80022aa:	9300      	str	r3, [sp, #0]
 80022ac:	23b4      	movs	r3, #180	; 0xb4
 80022ae:	2264      	movs	r2, #100	; 0x64
 80022b0:	2175      	movs	r1, #117	; 0x75
 80022b2:	2073      	movs	r0, #115	; 0x73
 80022b4:	f7ff f980 	bl	80015b8 <drawArc>
		    drawArc(115, 116, 100, 180, 360);
 80022b8:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80022bc:	9300      	str	r3, [sp, #0]
 80022be:	23b4      	movs	r3, #180	; 0xb4
 80022c0:	2264      	movs	r2, #100	; 0x64
 80022c2:	2174      	movs	r1, #116	; 0x74
 80022c4:	2073      	movs	r0, #115	; 0x73
 80022c6:	f7ff f977 	bl	80015b8 <drawArc>
		    drawArc(115, 115, 100, 180, 360);
 80022ca:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80022ce:	9300      	str	r3, [sp, #0]
 80022d0:	23b4      	movs	r3, #180	; 0xb4
 80022d2:	2264      	movs	r2, #100	; 0x64
 80022d4:	2173      	movs	r1, #115	; 0x73
 80022d6:	2073      	movs	r0, #115	; 0x73
 80022d8:	f7ff f96e 	bl	80015b8 <drawArc>
		    drawArc(115, 114, 100, 180, 360);
 80022dc:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80022e0:	9300      	str	r3, [sp, #0]
 80022e2:	23b4      	movs	r3, #180	; 0xb4
 80022e4:	2264      	movs	r2, #100	; 0x64
 80022e6:	2172      	movs	r1, #114	; 0x72
 80022e8:	2073      	movs	r0, #115	; 0x73
 80022ea:	f7ff f965 	bl	80015b8 <drawArc>
		    drawArc(115, 113, 100, 180, 360);
 80022ee:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80022f2:	9300      	str	r3, [sp, #0]
 80022f4:	23b4      	movs	r3, #180	; 0xb4
 80022f6:	2264      	movs	r2, #100	; 0x64
 80022f8:	2171      	movs	r1, #113	; 0x71
 80022fa:	2073      	movs	r0, #115	; 0x73
 80022fc:	f7ff f95c 	bl	80015b8 <drawArc>
		    drawArc(115, 112, 100, 180, 360);
 8002300:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8002304:	9300      	str	r3, [sp, #0]
 8002306:	23b4      	movs	r3, #180	; 0xb4
 8002308:	2264      	movs	r2, #100	; 0x64
 800230a:	2170      	movs	r1, #112	; 0x70
 800230c:	2073      	movs	r0, #115	; 0x73
 800230e:	f7ff f953 	bl	80015b8 <drawArc>





		    int textHeight = BSP_LCD_GetFont()->Height;  // Get the height of the font
 8002312:	f001 f9d7 	bl	80036c4 <BSP_LCD_GetFont>
 8002316:	4603      	mov	r3, r0
 8002318:	88db      	ldrh	r3, [r3, #6]
 800231a:	66fb      	str	r3, [r7, #108]	; 0x6c
		    int lineNumber = (BSP_LCD_GetYSize() - textHeight) / textHeight;
 800231c:	f001 f906 	bl	800352c <BSP_LCD_GetYSize>
 8002320:	4602      	mov	r2, r0
 8002322:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002324:	1ad2      	subs	r2, r2, r3
 8002326:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002328:	fbb2 f3f3 	udiv	r3, r2, r3
 800232c:	66bb      	str	r3, [r7, #104]	; 0x68

		    /* Infinite loop */
		    for (;;)
		    {
		    	  char err_time [30] = "Error Time: ";
 800232e:	4b99      	ldr	r3, [pc, #612]	; (8002594 <StartTask03+0x358>)
 8002330:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8002334:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002336:	c407      	stmia	r4!, {r0, r1, r2}
 8002338:	7023      	strb	r3, [r4, #0]
 800233a:	f107 0355 	add.w	r3, r7, #85	; 0x55
 800233e:	2200      	movs	r2, #0
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	605a      	str	r2, [r3, #4]
 8002344:	609a      	str	r2, [r3, #8]
 8002346:	60da      	str	r2, [r3, #12]
 8002348:	741a      	strb	r2, [r3, #16]
		    	  char err_time1 [30] = "Error Time: ";
 800234a:	4b92      	ldr	r3, [pc, #584]	; (8002594 <StartTask03+0x358>)
 800234c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002350:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002352:	c407      	stmia	r4!, {r0, r1, r2}
 8002354:	7023      	strb	r3, [r4, #0]
 8002356:	f107 0335 	add.w	r3, r7, #53	; 0x35
 800235a:	2200      	movs	r2, #0
 800235c:	601a      	str	r2, [r3, #0]
 800235e:	605a      	str	r2, [r3, #4]
 8002360:	609a      	str	r2, [r3, #8]
 8002362:	60da      	str	r2, [r3, #12]
 8002364:	741a      	strb	r2, [r3, #16]
		    	  char err_time2 [30] = "Error Time: ";
 8002366:	4b8b      	ldr	r3, [pc, #556]	; (8002594 <StartTask03+0x358>)
 8002368:	f107 0408 	add.w	r4, r7, #8
 800236c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800236e:	c407      	stmia	r4!, {r0, r1, r2}
 8002370:	7023      	strb	r3, [r4, #0]
 8002372:	f107 0315 	add.w	r3, r7, #21
 8002376:	2200      	movs	r2, #0
 8002378:	601a      	str	r2, [r3, #0]
 800237a:	605a      	str	r2, [r3, #4]
 800237c:	609a      	str	r2, [r3, #8]
 800237e:	60da      	str	r2, [r3, #12]
 8002380:	741a      	strb	r2, [r3, #16]
		        lineNumber = (BSP_LCD_GetYSize() - textHeight) / textHeight;  // Calculate the line number
 8002382:	f001 f8d3 	bl	800352c <BSP_LCD_GetYSize>
 8002386:	4602      	mov	r2, r0
 8002388:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800238a:	1ad2      	subs	r2, r2, r3
 800238c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800238e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002392:	66bb      	str	r3, [r7, #104]	; 0x68

		        BSP_LCD_ClearStringLine(14); // Clear the line where the distance value is displayed
 8002394:	200e      	movs	r0, #14
 8002396:	f001 f9d3 	bl	8003740 <BSP_LCD_ClearStringLine>
		        BSP_LCD_ClearStringLine(15); // Clear the line where the distance value is displayed
 800239a:	200f      	movs	r0, #15
 800239c:	f001 f9d0 	bl	8003740 <BSP_LCD_ClearStringLine>
		        BSP_LCD_ClearStringLine(13); // Clear the line where the distance value is displayed
 80023a0:	200d      	movs	r0, #13
 80023a2:	f001 f9cd 	bl	8003740 <BSP_LCD_ClearStringLine>
		        BSP_LCD_ClearStringLine(12); // Clear the line where the distance value is displayed
 80023a6:	200c      	movs	r0, #12
 80023a8:	f001 f9ca 	bl	8003740 <BSP_LCD_ClearStringLine>
		        BSP_LCD_ClearStringLine(16); // Clear the line where the distance value is displayed
 80023ac:	2010      	movs	r0, #16
 80023ae:	f001 f9c7 	bl	8003740 <BSP_LCD_ClearStringLine>
		        BSP_LCD_ClearStringLine(17); // Clear the line where the distance value is displayed
 80023b2:	2011      	movs	r0, #17
 80023b4:	f001 f9c4 	bl	8003740 <BSP_LCD_ClearStringLine>
		        BSP_LCD_ClearStringLine(11.5); // Clear the line where the distance value is displayed
 80023b8:	200b      	movs	r0, #11
 80023ba:	f001 f9c1 	bl	8003740 <BSP_LCD_ClearStringLine>
		        BSP_LCD_SetFont(&Font12);
 80023be:	4876      	ldr	r0, [pc, #472]	; (8002598 <StartTask03+0x35c>)
 80023c0:	f001 f966 	bl	8003690 <BSP_LCD_SetFont>
		        BSP_LCD_DisplayStringAt(87, 124, (uint8_t *)"320", CENTER_MODE);
 80023c4:	2301      	movs	r3, #1
 80023c6:	4a75      	ldr	r2, [pc, #468]	; (800259c <StartTask03+0x360>)
 80023c8:	217c      	movs	r1, #124	; 0x7c
 80023ca:	2057      	movs	r0, #87	; 0x57
 80023cc:	f001 fa60 	bl	8003890 <BSP_LCD_DisplayStringAt>
		        BSP_LCD_SetFont(&Font16);
 80023d0:	4873      	ldr	r0, [pc, #460]	; (80025a0 <StartTask03+0x364>)
 80023d2:	f001 f95d 	bl	8003690 <BSP_LCD_SetFont>

		        // BSP_LCD_Clear(LCD_COLOR_WHITE);
		        itoa(distance, str, 10);
 80023d6:	4b73      	ldr	r3, [pc, #460]	; (80025a4 <StartTask03+0x368>)
 80023d8:	881b      	ldrh	r3, [r3, #0]
 80023da:	220a      	movs	r2, #10
 80023dc:	4972      	ldr	r1, [pc, #456]	; (80025a8 <StartTask03+0x36c>)
 80023de:	4618      	mov	r0, r3
 80023e0:	f009 f9ee 	bl	800b7c0 <itoa>


		        if (distance>320) {
 80023e4:	4b6f      	ldr	r3, [pc, #444]	; (80025a4 <StartTask03+0x368>)
 80023e6:	881b      	ldrh	r3, [r3, #0]
 80023e8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80023ec:	d953      	bls.n	8002496 <StartTask03+0x25a>
		        	BSP_LCD_Clear(LCD_COLOR_BLUE);
 80023ee:	4868      	ldr	r0, [pc, #416]	; (8002590 <StartTask03+0x354>)
 80023f0:	f001 f97e 	bl	80036f0 <BSP_LCD_Clear>
		        	   drawArc_with_Lines(115, 120, 100, 180, 360);
 80023f4:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80023f8:	9300      	str	r3, [sp, #0]
 80023fa:	23b4      	movs	r3, #180	; 0xb4
 80023fc:	2264      	movs	r2, #100	; 0x64
 80023fe:	2178      	movs	r1, #120	; 0x78
 8002400:	2073      	movs	r0, #115	; 0x73
 8002402:	f7ff fb77 	bl	8001af4 <drawArc_with_Lines>
		        	   drawArc(115, 119, 100, 180, 360);
 8002406:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800240a:	9300      	str	r3, [sp, #0]
 800240c:	23b4      	movs	r3, #180	; 0xb4
 800240e:	2264      	movs	r2, #100	; 0x64
 8002410:	2177      	movs	r1, #119	; 0x77
 8002412:	2073      	movs	r0, #115	; 0x73
 8002414:	f7ff f8d0 	bl	80015b8 <drawArc>
		        	   drawArc(115, 118, 100, 180, 360);
 8002418:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800241c:	9300      	str	r3, [sp, #0]
 800241e:	23b4      	movs	r3, #180	; 0xb4
 8002420:	2264      	movs	r2, #100	; 0x64
 8002422:	2176      	movs	r1, #118	; 0x76
 8002424:	2073      	movs	r0, #115	; 0x73
 8002426:	f7ff f8c7 	bl	80015b8 <drawArc>
		        	   drawArc(115, 117, 100, 180, 360);
 800242a:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800242e:	9300      	str	r3, [sp, #0]
 8002430:	23b4      	movs	r3, #180	; 0xb4
 8002432:	2264      	movs	r2, #100	; 0x64
 8002434:	2175      	movs	r1, #117	; 0x75
 8002436:	2073      	movs	r0, #115	; 0x73
 8002438:	f7ff f8be 	bl	80015b8 <drawArc>
		        	   drawArc(115, 116, 100, 180, 360);
 800243c:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8002440:	9300      	str	r3, [sp, #0]
 8002442:	23b4      	movs	r3, #180	; 0xb4
 8002444:	2264      	movs	r2, #100	; 0x64
 8002446:	2174      	movs	r1, #116	; 0x74
 8002448:	2073      	movs	r0, #115	; 0x73
 800244a:	f7ff f8b5 	bl	80015b8 <drawArc>
		        	   drawArc(115, 115, 100, 180, 360);
 800244e:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8002452:	9300      	str	r3, [sp, #0]
 8002454:	23b4      	movs	r3, #180	; 0xb4
 8002456:	2264      	movs	r2, #100	; 0x64
 8002458:	2173      	movs	r1, #115	; 0x73
 800245a:	2073      	movs	r0, #115	; 0x73
 800245c:	f7ff f8ac 	bl	80015b8 <drawArc>
		        	   drawArc(115, 114, 100, 180, 360);
 8002460:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	23b4      	movs	r3, #180	; 0xb4
 8002468:	2264      	movs	r2, #100	; 0x64
 800246a:	2172      	movs	r1, #114	; 0x72
 800246c:	2073      	movs	r0, #115	; 0x73
 800246e:	f7ff f8a3 	bl	80015b8 <drawArc>
		        	   drawArc(115, 113, 100, 180, 360);
 8002472:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8002476:	9300      	str	r3, [sp, #0]
 8002478:	23b4      	movs	r3, #180	; 0xb4
 800247a:	2264      	movs	r2, #100	; 0x64
 800247c:	2171      	movs	r1, #113	; 0x71
 800247e:	2073      	movs	r0, #115	; 0x73
 8002480:	f7ff f89a 	bl	80015b8 <drawArc>
		        	   drawArc(115, 112, 100, 180, 360);
 8002484:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8002488:	9300      	str	r3, [sp, #0]
 800248a:	23b4      	movs	r3, #180	; 0xb4
 800248c:	2264      	movs	r2, #100	; 0x64
 800248e:	2170      	movs	r1, #112	; 0x70
 8002490:	2073      	movs	r0, #115	; 0x73
 8002492:	f7ff f891 	bl	80015b8 <drawArc>
		        }
		        BSP_LCD_SetFont(&Font16);
 8002496:	4842      	ldr	r0, [pc, #264]	; (80025a0 <StartTask03+0x364>)
 8002498:	f001 f8fa 	bl	8003690 <BSP_LCD_SetFont>
		        BSP_LCD_DisplayStringAt(245, 190, (uint8_t *)str, CENTER_MODE);
 800249c:	2301      	movs	r3, #1
 800249e:	4a42      	ldr	r2, [pc, #264]	; (80025a8 <StartTask03+0x36c>)
 80024a0:	21be      	movs	r1, #190	; 0xbe
 80024a2:	20f5      	movs	r0, #245	; 0xf5
 80024a4:	f001 f9f4 	bl	8003890 <BSP_LCD_DisplayStringAt>

		        // Calculate the angle for the needle based on the distance
		        uint16_t needleAngle = 180 + (distance * 1.8f); // Assuming distance range is 0-100 and needle range is 180-360 degrees
 80024a8:	4b3e      	ldr	r3, [pc, #248]	; (80025a4 <StartTask03+0x368>)
 80024aa:	881b      	ldrh	r3, [r3, #0]
 80024ac:	ee07 3a90 	vmov	s15, r3
 80024b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024b4:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80025ac <StartTask03+0x370>
 80024b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024bc:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80025b0 <StartTask03+0x374>
 80024c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80024c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024c8:	ee17 3a90 	vmov	r3, s15
 80024cc:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

		        // Draw the needle with the updated angle
		        drawNeedle(115, 120, 63, needleAngle);
 80024d0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80024d4:	223f      	movs	r2, #63	; 0x3f
 80024d6:	2178      	movs	r1, #120	; 0x78
 80024d8:	2073      	movs	r0, #115	; 0x73
 80024da:	f7ff fa4f 	bl	800197c <drawNeedle>

		        if (count == 1) {
 80024de:	4b35      	ldr	r3, [pc, #212]	; (80025b4 <StartTask03+0x378>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d119      	bne.n	800251a <StartTask03+0x2de>
		        	itoa(*(uint32_t*)(flash_address-sizeof(uint32_t)), strtime, 10);
 80024e6:	4b34      	ldr	r3, [pc, #208]	; (80025b8 <StartTask03+0x37c>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	3b04      	subs	r3, #4
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	220a      	movs	r2, #10
 80024f0:	4932      	ldr	r1, [pc, #200]	; (80025bc <StartTask03+0x380>)
 80024f2:	4618      	mov	r0, r3
 80024f4:	f009 f964 	bl	800b7c0 <itoa>
		        	strcat(err_time,strtime);
 80024f8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80024fc:	492f      	ldr	r1, [pc, #188]	; (80025bc <StartTask03+0x380>)
 80024fe:	4618      	mov	r0, r3
 8002500:	f009 faac 	bl	800ba5c <strcat>
		        	BSP_LCD_ClearStringLine(20); // Clear the line where the distance value is displayed
 8002504:	2014      	movs	r0, #20
 8002506:	f001 f91b 	bl	8003740 <BSP_LCD_ClearStringLine>
		        	BSP_LCD_DisplayStringAt(245, 235, (uint8_t *)err_time, CENTER_MODE);
 800250a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800250e:	2301      	movs	r3, #1
 8002510:	21eb      	movs	r1, #235	; 0xeb
 8002512:	20f5      	movs	r0, #245	; 0xf5
 8002514:	f001 f9bc 	bl	8003890 <BSP_LCD_DisplayStringAt>
 8002518:	e0a9      	b.n	800266e <StartTask03+0x432>

		        			}
		       else if (count == 2) {
 800251a:	4b26      	ldr	r3, [pc, #152]	; (80025b4 <StartTask03+0x378>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2b02      	cmp	r3, #2
 8002520:	d14e      	bne.n	80025c0 <StartTask03+0x384>
		        itoa(*(uint32_t*)(flash_address-2*sizeof(uint32_t)), strtime, 10);
 8002522:	4b25      	ldr	r3, [pc, #148]	; (80025b8 <StartTask03+0x37c>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	3b08      	subs	r3, #8
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	220a      	movs	r2, #10
 800252c:	4923      	ldr	r1, [pc, #140]	; (80025bc <StartTask03+0x380>)
 800252e:	4618      	mov	r0, r3
 8002530:	f009 f946 	bl	800b7c0 <itoa>
		       strcat(err_time,strtime);
 8002534:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002538:	4920      	ldr	r1, [pc, #128]	; (80025bc <StartTask03+0x380>)
 800253a:	4618      	mov	r0, r3
 800253c:	f009 fa8e 	bl	800ba5c <strcat>
		        BSP_LCD_ClearStringLine(20); // Clear the line where the distance value is displayed
 8002540:	2014      	movs	r0, #20
 8002542:	f001 f8fd 	bl	8003740 <BSP_LCD_ClearStringLine>
		        	BSP_LCD_DisplayStringAt(245, 235, (uint8_t *)err_time, CENTER_MODE);
 8002546:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800254a:	2301      	movs	r3, #1
 800254c:	21eb      	movs	r1, #235	; 0xeb
 800254e:	20f5      	movs	r0, #245	; 0xf5
 8002550:	f001 f99e 	bl	8003890 <BSP_LCD_DisplayStringAt>

		        	itoa(*(uint32_t*)(flash_address-sizeof(uint32_t)), strtime, 10);
 8002554:	4b18      	ldr	r3, [pc, #96]	; (80025b8 <StartTask03+0x37c>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	3b04      	subs	r3, #4
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	220a      	movs	r2, #10
 800255e:	4917      	ldr	r1, [pc, #92]	; (80025bc <StartTask03+0x380>)
 8002560:	4618      	mov	r0, r3
 8002562:	f009 f92d 	bl	800b7c0 <itoa>
		        	strcat(err_time1,strtime);
 8002566:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800256a:	4914      	ldr	r1, [pc, #80]	; (80025bc <StartTask03+0x380>)
 800256c:	4618      	mov	r0, r3
 800256e:	f009 fa75 	bl	800ba5c <strcat>
		        	BSP_LCD_ClearStringLine(22); // Clear the line where the distance value is displayed
 8002572:	2016      	movs	r0, #22
 8002574:	f001 f8e4 	bl	8003740 <BSP_LCD_ClearStringLine>
		        	BSP_LCD_ClearStringLine(21); // Clear the line where the distance value is displayed
 8002578:	2015      	movs	r0, #21
 800257a:	f001 f8e1 	bl	8003740 <BSP_LCD_ClearStringLine>
		        	BSP_LCD_DisplayStringAt(245, 260, (uint8_t *)err_time1, CENTER_MODE);
 800257e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002582:	2301      	movs	r3, #1
 8002584:	f44f 7182 	mov.w	r1, #260	; 0x104
 8002588:	20f5      	movs	r0, #245	; 0xf5
 800258a:	f001 f981 	bl	8003890 <BSP_LCD_DisplayStringAt>
 800258e:	e06e      	b.n	800266e <StartTask03+0x432>
 8002590:	ff0000ff 	.word	0xff0000ff
 8002594:	0800cd90 	.word	0x0800cd90
 8002598:	20000058 	.word	0x20000058
 800259c:	0800cdc0 	.word	0x0800cdc0
 80025a0:	20000050 	.word	0x20000050
 80025a4:	20004c80 	.word	0x20004c80
 80025a8:	20004d68 	.word	0x20004d68
 80025ac:	3fe66666 	.word	0x3fe66666
 80025b0:	43340000 	.word	0x43340000
 80025b4:	200000f4 	.word	0x200000f4
 80025b8:	20000004 	.word	0x20000004
 80025bc:	20004d78 	.word	0x20004d78

		        			}

		       else if (count == 3) {
 80025c0:	4b2d      	ldr	r3, [pc, #180]	; (8002678 <StartTask03+0x43c>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2b03      	cmp	r3, #3
 80025c6:	d152      	bne.n	800266e <StartTask03+0x432>
		        	itoa(*(uint32_t*)(flash_address-3*sizeof(uint32_t)), strtime, 10);
 80025c8:	4b2c      	ldr	r3, [pc, #176]	; (800267c <StartTask03+0x440>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	3b0c      	subs	r3, #12
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	220a      	movs	r2, #10
 80025d2:	492b      	ldr	r1, [pc, #172]	; (8002680 <StartTask03+0x444>)
 80025d4:	4618      	mov	r0, r3
 80025d6:	f009 f8f3 	bl	800b7c0 <itoa>
		        	strcat(err_time,strtime);
 80025da:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80025de:	4928      	ldr	r1, [pc, #160]	; (8002680 <StartTask03+0x444>)
 80025e0:	4618      	mov	r0, r3
 80025e2:	f009 fa3b 	bl	800ba5c <strcat>
		        	BSP_LCD_ClearStringLine(20); // Clear the line where the distance value is displayed
 80025e6:	2014      	movs	r0, #20
 80025e8:	f001 f8aa 	bl	8003740 <BSP_LCD_ClearStringLine>
		      	BSP_LCD_DisplayStringAt(245, 235, (uint8_t *)err_time, CENTER_MODE);
 80025ec:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80025f0:	2301      	movs	r3, #1
 80025f2:	21eb      	movs	r1, #235	; 0xeb
 80025f4:	20f5      	movs	r0, #245	; 0xf5
 80025f6:	f001 f94b 	bl	8003890 <BSP_LCD_DisplayStringAt>

		      itoa(*(uint32_t*)(flash_address-2*sizeof(uint32_t)), strtime, 10);
 80025fa:	4b20      	ldr	r3, [pc, #128]	; (800267c <StartTask03+0x440>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	3b08      	subs	r3, #8
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	220a      	movs	r2, #10
 8002604:	491e      	ldr	r1, [pc, #120]	; (8002680 <StartTask03+0x444>)
 8002606:	4618      	mov	r0, r3
 8002608:	f009 f8da 	bl	800b7c0 <itoa>
		      strcat(err_time1,strtime);
 800260c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002610:	491b      	ldr	r1, [pc, #108]	; (8002680 <StartTask03+0x444>)
 8002612:	4618      	mov	r0, r3
 8002614:	f009 fa22 	bl	800ba5c <strcat>
		     BSP_LCD_ClearStringLine(22); // Clear the line where the distance value is displayed
 8002618:	2016      	movs	r0, #22
 800261a:	f001 f891 	bl	8003740 <BSP_LCD_ClearStringLine>
		        		 BSP_LCD_ClearStringLine(21); // Clear the line where the distance value is displayed
 800261e:	2015      	movs	r0, #21
 8002620:	f001 f88e 	bl	8003740 <BSP_LCD_ClearStringLine>
		           BSP_LCD_DisplayStringAt(245, 260, (uint8_t *)err_time1, CENTER_MODE);
 8002624:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002628:	2301      	movs	r3, #1
 800262a:	f44f 7182 	mov.w	r1, #260	; 0x104
 800262e:	20f5      	movs	r0, #245	; 0xf5
 8002630:	f001 f92e 	bl	8003890 <BSP_LCD_DisplayStringAt>
		     itoa(*(uint32_t*)(flash_address-sizeof(uint32_t)), strtime, 10);
 8002634:	4b11      	ldr	r3, [pc, #68]	; (800267c <StartTask03+0x440>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	3b04      	subs	r3, #4
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	220a      	movs	r2, #10
 800263e:	4910      	ldr	r1, [pc, #64]	; (8002680 <StartTask03+0x444>)
 8002640:	4618      	mov	r0, r3
 8002642:	f009 f8bd 	bl	800b7c0 <itoa>
		     strcat(err_time2,strtime);
 8002646:	f107 0308 	add.w	r3, r7, #8
 800264a:	490d      	ldr	r1, [pc, #52]	; (8002680 <StartTask03+0x444>)
 800264c:	4618      	mov	r0, r3
 800264e:	f009 fa05 	bl	800ba5c <strcat>
		        BSP_LCD_ClearStringLine(20); // Clear the line where the distance value is displayed
 8002652:	2014      	movs	r0, #20
 8002654:	f001 f874 	bl	8003740 <BSP_LCD_ClearStringLine>
		        BSP_LCD_DisplayStringAt(245, 285, (uint8_t *)err_time2, CENTER_MODE);
 8002658:	f107 0208 	add.w	r2, r7, #8
 800265c:	2301      	movs	r3, #1
 800265e:	f240 111d 	movw	r1, #285	; 0x11d
 8002662:	20f5      	movs	r0, #245	; 0xf5
 8002664:	f001 f914 	bl	8003890 <BSP_LCD_DisplayStringAt>
		        count= 0;
 8002668:	4b03      	ldr	r3, [pc, #12]	; (8002678 <StartTask03+0x43c>)
 800266a:	2200      	movs	r2, #0
 800266c:	601a      	str	r2, [r3, #0]
		        											}


		        osDelay(100);
 800266e:	2064      	movs	r0, #100	; 0x64
 8002670:	f006 fa4c 	bl	8008b0c <osDelay>
		    {
 8002674:	e65b      	b.n	800232e <StartTask03+0xf2>
 8002676:	bf00      	nop
 8002678:	200000f4 	.word	0x200000f4
 800267c:	20000004 	.word	0x20000004
 8002680:	20004d78 	.word	0x20004d78

08002684 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002688:	b672      	cpsid	i
}
 800268a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800268c:	e7fe      	b.n	800268c <Error_Handler+0x8>
	...

08002690 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002698:	2300      	movs	r3, #0
 800269a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800269c:	f002 f8a0 	bl	80047e0 <HAL_GetTick>
 80026a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d101      	bne.n	80026ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e099      	b.n	80027e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2202      	movs	r2, #2
 80026b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f022 0201 	bic.w	r2, r2, #1
 80026ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026cc:	e00f      	b.n	80026ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026ce:	f002 f887 	bl	80047e0 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b05      	cmp	r3, #5
 80026da:	d908      	bls.n	80026ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2220      	movs	r2, #32
 80026e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2203      	movs	r2, #3
 80026e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e078      	b.n	80027e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0301 	and.w	r3, r3, #1
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d1e8      	bne.n	80026ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002704:	697a      	ldr	r2, [r7, #20]
 8002706:	4b38      	ldr	r3, [pc, #224]	; (80027e8 <HAL_DMA_Init+0x158>)
 8002708:	4013      	ands	r3, r2
 800270a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685a      	ldr	r2, [r3, #4]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800271a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002726:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002732:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a1b      	ldr	r3, [r3, #32]
 8002738:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800273a:	697a      	ldr	r2, [r7, #20]
 800273c:	4313      	orrs	r3, r2
 800273e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002744:	2b04      	cmp	r3, #4
 8002746:	d107      	bne.n	8002758 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002750:	4313      	orrs	r3, r2
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	4313      	orrs	r3, r2
 8002756:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	697a      	ldr	r2, [r7, #20]
 800275e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	f023 0307 	bic.w	r3, r3, #7
 800276e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002774:	697a      	ldr	r2, [r7, #20]
 8002776:	4313      	orrs	r3, r2
 8002778:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277e:	2b04      	cmp	r3, #4
 8002780:	d117      	bne.n	80027b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002786:	697a      	ldr	r2, [r7, #20]
 8002788:	4313      	orrs	r3, r2
 800278a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002790:	2b00      	cmp	r3, #0
 8002792:	d00e      	beq.n	80027b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f000 f8bd 	bl	8002914 <DMA_CheckFifoParam>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d008      	beq.n	80027b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2240      	movs	r2, #64	; 0x40
 80027a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2201      	movs	r2, #1
 80027aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80027ae:	2301      	movs	r3, #1
 80027b0:	e016      	b.n	80027e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	697a      	ldr	r2, [r7, #20]
 80027b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f000 f874 	bl	80028a8 <DMA_CalcBaseAndBitshift>
 80027c0:	4603      	mov	r3, r0
 80027c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c8:	223f      	movs	r2, #63	; 0x3f
 80027ca:	409a      	lsls	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2201      	movs	r2, #1
 80027da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3718      	adds	r7, #24
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	f010803f 	.word	0xf010803f

080027ec <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e050      	b.n	80028a0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d101      	bne.n	800280e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800280a:	2302      	movs	r3, #2
 800280c:	e048      	b.n	80028a0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f022 0201 	bic.w	r2, r2, #1
 800281c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2200      	movs	r2, #0
 8002824:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2200      	movs	r2, #0
 800282c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2200      	movs	r2, #0
 8002834:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2200      	movs	r2, #0
 800283c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2200      	movs	r2, #0
 8002844:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2221      	movs	r2, #33	; 0x21
 800284c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f000 f82a 	bl	80028a8 <DMA_CalcBaseAndBitshift>
 8002854:	4603      	mov	r3, r0
 8002856:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002880:	223f      	movs	r2, #63	; 0x3f
 8002882:	409a      	lsls	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800289e:	2300      	movs	r3, #0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3710      	adds	r7, #16
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	3b10      	subs	r3, #16
 80028b8:	4a14      	ldr	r2, [pc, #80]	; (800290c <DMA_CalcBaseAndBitshift+0x64>)
 80028ba:	fba2 2303 	umull	r2, r3, r2, r3
 80028be:	091b      	lsrs	r3, r3, #4
 80028c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80028c2:	4a13      	ldr	r2, [pc, #76]	; (8002910 <DMA_CalcBaseAndBitshift+0x68>)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	4413      	add	r3, r2
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	461a      	mov	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2b03      	cmp	r3, #3
 80028d4:	d909      	bls.n	80028ea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80028de:	f023 0303 	bic.w	r3, r3, #3
 80028e2:	1d1a      	adds	r2, r3, #4
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	659a      	str	r2, [r3, #88]	; 0x58
 80028e8:	e007      	b.n	80028fa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80028f2:	f023 0303 	bic.w	r3, r3, #3
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3714      	adds	r7, #20
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	aaaaaaab 	.word	0xaaaaaaab
 8002910:	0800ce48 	.word	0x0800ce48

08002914 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800291c:	2300      	movs	r3, #0
 800291e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002924:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	699b      	ldr	r3, [r3, #24]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d11f      	bne.n	800296e <DMA_CheckFifoParam+0x5a>
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	2b03      	cmp	r3, #3
 8002932:	d856      	bhi.n	80029e2 <DMA_CheckFifoParam+0xce>
 8002934:	a201      	add	r2, pc, #4	; (adr r2, 800293c <DMA_CheckFifoParam+0x28>)
 8002936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800293a:	bf00      	nop
 800293c:	0800294d 	.word	0x0800294d
 8002940:	0800295f 	.word	0x0800295f
 8002944:	0800294d 	.word	0x0800294d
 8002948:	080029e3 	.word	0x080029e3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002950:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d046      	beq.n	80029e6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800295c:	e043      	b.n	80029e6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002962:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002966:	d140      	bne.n	80029ea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800296c:	e03d      	b.n	80029ea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002976:	d121      	bne.n	80029bc <DMA_CheckFifoParam+0xa8>
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	2b03      	cmp	r3, #3
 800297c:	d837      	bhi.n	80029ee <DMA_CheckFifoParam+0xda>
 800297e:	a201      	add	r2, pc, #4	; (adr r2, 8002984 <DMA_CheckFifoParam+0x70>)
 8002980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002984:	08002995 	.word	0x08002995
 8002988:	0800299b 	.word	0x0800299b
 800298c:	08002995 	.word	0x08002995
 8002990:	080029ad 	.word	0x080029ad
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	73fb      	strb	r3, [r7, #15]
      break;
 8002998:	e030      	b.n	80029fc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d025      	beq.n	80029f2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029aa:	e022      	b.n	80029f2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029b4:	d11f      	bne.n	80029f6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80029ba:	e01c      	b.n	80029f6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d903      	bls.n	80029ca <DMA_CheckFifoParam+0xb6>
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	2b03      	cmp	r3, #3
 80029c6:	d003      	beq.n	80029d0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80029c8:	e018      	b.n	80029fc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	73fb      	strb	r3, [r7, #15]
      break;
 80029ce:	e015      	b.n	80029fc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d00e      	beq.n	80029fa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	73fb      	strb	r3, [r7, #15]
      break;
 80029e0:	e00b      	b.n	80029fa <DMA_CheckFifoParam+0xe6>
      break;
 80029e2:	bf00      	nop
 80029e4:	e00a      	b.n	80029fc <DMA_CheckFifoParam+0xe8>
      break;
 80029e6:	bf00      	nop
 80029e8:	e008      	b.n	80029fc <DMA_CheckFifoParam+0xe8>
      break;
 80029ea:	bf00      	nop
 80029ec:	e006      	b.n	80029fc <DMA_CheckFifoParam+0xe8>
      break;
 80029ee:	bf00      	nop
 80029f0:	e004      	b.n	80029fc <DMA_CheckFifoParam+0xe8>
      break;
 80029f2:	bf00      	nop
 80029f4:	e002      	b.n	80029fc <DMA_CheckFifoParam+0xe8>
      break;   
 80029f6:	bf00      	nop
 80029f8:	e000      	b.n	80029fc <DMA_CheckFifoParam+0xe8>
      break;
 80029fa:	bf00      	nop
    }
  } 
  
  return status; 
 80029fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3714      	adds	r7, #20
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop

08002a0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a12:	2300      	movs	r3, #0
 8002a14:	607b      	str	r3, [r7, #4]
 8002a16:	4b12      	ldr	r3, [pc, #72]	; (8002a60 <HAL_MspInit+0x54>)
 8002a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1a:	4a11      	ldr	r2, [pc, #68]	; (8002a60 <HAL_MspInit+0x54>)
 8002a1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a20:	6453      	str	r3, [r2, #68]	; 0x44
 8002a22:	4b0f      	ldr	r3, [pc, #60]	; (8002a60 <HAL_MspInit+0x54>)
 8002a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a2a:	607b      	str	r3, [r7, #4]
 8002a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a2e:	2300      	movs	r3, #0
 8002a30:	603b      	str	r3, [r7, #0]
 8002a32:	4b0b      	ldr	r3, [pc, #44]	; (8002a60 <HAL_MspInit+0x54>)
 8002a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a36:	4a0a      	ldr	r2, [pc, #40]	; (8002a60 <HAL_MspInit+0x54>)
 8002a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a3e:	4b08      	ldr	r3, [pc, #32]	; (8002a60 <HAL_MspInit+0x54>)
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a46:	603b      	str	r3, [r7, #0]
 8002a48:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	210f      	movs	r1, #15
 8002a4e:	f06f 0001 	mvn.w	r0, #1
 8002a52:	f001 ffad 	bl	80049b0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a56:	bf00      	nop
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	40023800 	.word	0x40023800

08002a64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a74:	d116      	bne.n	8002aa4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a76:	2300      	movs	r3, #0
 8002a78:	60fb      	str	r3, [r7, #12]
 8002a7a:	4b1a      	ldr	r3, [pc, #104]	; (8002ae4 <HAL_TIM_Base_MspInit+0x80>)
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7e:	4a19      	ldr	r2, [pc, #100]	; (8002ae4 <HAL_TIM_Base_MspInit+0x80>)
 8002a80:	f043 0301 	orr.w	r3, r3, #1
 8002a84:	6413      	str	r3, [r2, #64]	; 0x40
 8002a86:	4b17      	ldr	r3, [pc, #92]	; (8002ae4 <HAL_TIM_Base_MspInit+0x80>)
 8002a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	60fb      	str	r3, [r7, #12]
 8002a90:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002a92:	2200      	movs	r2, #0
 8002a94:	2105      	movs	r1, #5
 8002a96:	201c      	movs	r0, #28
 8002a98:	f001 ff8a 	bl	80049b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002a9c:	201c      	movs	r0, #28
 8002a9e:	f001 ffa3 	bl	80049e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002aa2:	e01a      	b.n	8002ada <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a0f      	ldr	r2, [pc, #60]	; (8002ae8 <HAL_TIM_Base_MspInit+0x84>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d115      	bne.n	8002ada <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002aae:	2300      	movs	r3, #0
 8002ab0:	60bb      	str	r3, [r7, #8]
 8002ab2:	4b0c      	ldr	r3, [pc, #48]	; (8002ae4 <HAL_TIM_Base_MspInit+0x80>)
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	4a0b      	ldr	r2, [pc, #44]	; (8002ae4 <HAL_TIM_Base_MspInit+0x80>)
 8002ab8:	f043 0302 	orr.w	r3, r3, #2
 8002abc:	6413      	str	r3, [r2, #64]	; 0x40
 8002abe:	4b09      	ldr	r3, [pc, #36]	; (8002ae4 <HAL_TIM_Base_MspInit+0x80>)
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	60bb      	str	r3, [r7, #8]
 8002ac8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002aca:	2200      	movs	r2, #0
 8002acc:	2105      	movs	r1, #5
 8002ace:	201d      	movs	r0, #29
 8002ad0:	f001 ff6e 	bl	80049b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002ad4:	201d      	movs	r0, #29
 8002ad6:	f001 ff87 	bl	80049e8 <HAL_NVIC_EnableIRQ>
}
 8002ada:	bf00      	nop
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	40023800 	.word	0x40023800
 8002ae8:	40000400 	.word	0x40000400

08002aec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b08a      	sub	sp, #40	; 0x28
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002af4:	f107 0314 	add.w	r3, r7, #20
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	605a      	str	r2, [r3, #4]
 8002afe:	609a      	str	r2, [r3, #8]
 8002b00:	60da      	str	r2, [r3, #12]
 8002b02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a19      	ldr	r2, [pc, #100]	; (8002b70 <HAL_UART_MspInit+0x84>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d12c      	bne.n	8002b68 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b0e:	2300      	movs	r3, #0
 8002b10:	613b      	str	r3, [r7, #16]
 8002b12:	4b18      	ldr	r3, [pc, #96]	; (8002b74 <HAL_UART_MspInit+0x88>)
 8002b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b16:	4a17      	ldr	r2, [pc, #92]	; (8002b74 <HAL_UART_MspInit+0x88>)
 8002b18:	f043 0310 	orr.w	r3, r3, #16
 8002b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b1e:	4b15      	ldr	r3, [pc, #84]	; (8002b74 <HAL_UART_MspInit+0x88>)
 8002b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b22:	f003 0310 	and.w	r3, r3, #16
 8002b26:	613b      	str	r3, [r7, #16]
 8002b28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	60fb      	str	r3, [r7, #12]
 8002b2e:	4b11      	ldr	r3, [pc, #68]	; (8002b74 <HAL_UART_MspInit+0x88>)
 8002b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b32:	4a10      	ldr	r2, [pc, #64]	; (8002b74 <HAL_UART_MspInit+0x88>)
 8002b34:	f043 0301 	orr.w	r3, r3, #1
 8002b38:	6313      	str	r3, [r2, #48]	; 0x30
 8002b3a:	4b0e      	ldr	r3, [pc, #56]	; (8002b74 <HAL_UART_MspInit+0x88>)
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	60fb      	str	r3, [r7, #12]
 8002b44:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002b46:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002b4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b50:	2300      	movs	r3, #0
 8002b52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b54:	2303      	movs	r3, #3
 8002b56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b58:	2307      	movs	r3, #7
 8002b5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b5c:	f107 0314 	add.w	r3, r7, #20
 8002b60:	4619      	mov	r1, r3
 8002b62:	4805      	ldr	r0, [pc, #20]	; (8002b78 <HAL_UART_MspInit+0x8c>)
 8002b64:	f002 fbaa 	bl	80052bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002b68:	bf00      	nop
 8002b6a:	3728      	adds	r7, #40	; 0x28
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	40011000 	.word	0x40011000
 8002b74:	40023800 	.word	0x40023800
 8002b78:	40020000 	.word	0x40020000

08002b7c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b08c      	sub	sp, #48	; 0x30
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002b84:	2300      	movs	r3, #0
 8002b86:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	6879      	ldr	r1, [r7, #4]
 8002b90:	2036      	movs	r0, #54	; 0x36
 8002b92:	f001 ff0d 	bl	80049b0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002b96:	2036      	movs	r0, #54	; 0x36
 8002b98:	f001 ff26 	bl	80049e8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	60fb      	str	r3, [r7, #12]
 8002ba0:	4b1f      	ldr	r3, [pc, #124]	; (8002c20 <HAL_InitTick+0xa4>)
 8002ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba4:	4a1e      	ldr	r2, [pc, #120]	; (8002c20 <HAL_InitTick+0xa4>)
 8002ba6:	f043 0310 	orr.w	r3, r3, #16
 8002baa:	6413      	str	r3, [r2, #64]	; 0x40
 8002bac:	4b1c      	ldr	r3, [pc, #112]	; (8002c20 <HAL_InitTick+0xa4>)
 8002bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb0:	f003 0310 	and.w	r3, r3, #16
 8002bb4:	60fb      	str	r3, [r7, #12]
 8002bb6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002bb8:	f107 0210 	add.w	r2, r7, #16
 8002bbc:	f107 0314 	add.w	r3, r7, #20
 8002bc0:	4611      	mov	r1, r2
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f003 fd0e 	bl	80065e4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002bc8:	f003 fce4 	bl	8006594 <HAL_RCC_GetPCLK1Freq>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd4:	4a13      	ldr	r2, [pc, #76]	; (8002c24 <HAL_InitTick+0xa8>)
 8002bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bda:	0c9b      	lsrs	r3, r3, #18
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002be0:	4b11      	ldr	r3, [pc, #68]	; (8002c28 <HAL_InitTick+0xac>)
 8002be2:	4a12      	ldr	r2, [pc, #72]	; (8002c2c <HAL_InitTick+0xb0>)
 8002be4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002be6:	4b10      	ldr	r3, [pc, #64]	; (8002c28 <HAL_InitTick+0xac>)
 8002be8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002bec:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002bee:	4a0e      	ldr	r2, [pc, #56]	; (8002c28 <HAL_InitTick+0xac>)
 8002bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002bf4:	4b0c      	ldr	r3, [pc, #48]	; (8002c28 <HAL_InitTick+0xac>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bfa:	4b0b      	ldr	r3, [pc, #44]	; (8002c28 <HAL_InitTick+0xac>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002c00:	4809      	ldr	r0, [pc, #36]	; (8002c28 <HAL_InitTick+0xac>)
 8002c02:	f004 fd5b 	bl	80076bc <HAL_TIM_Base_Init>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d104      	bne.n	8002c16 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002c0c:	4806      	ldr	r0, [pc, #24]	; (8002c28 <HAL_InitTick+0xac>)
 8002c0e:	f004 fda5 	bl	800775c <HAL_TIM_Base_Start_IT>
 8002c12:	4603      	mov	r3, r0
 8002c14:	e000      	b.n	8002c18 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3730      	adds	r7, #48	; 0x30
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	40023800 	.word	0x40023800
 8002c24:	431bde83 	.word	0x431bde83
 8002c28:	20004d90 	.word	0x20004d90
 8002c2c:	40001000 	.word	0x40001000

08002c30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c34:	e7fe      	b.n	8002c34 <NMI_Handler+0x4>

08002c36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c36:	b480      	push	{r7}
 8002c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c3a:	e7fe      	b.n	8002c3a <HardFault_Handler+0x4>

08002c3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c40:	e7fe      	b.n	8002c40 <MemManage_Handler+0x4>

08002c42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c42:	b480      	push	{r7}
 8002c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c46:	e7fe      	b.n	8002c46 <BusFault_Handler+0x4>

08002c48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c4c:	e7fe      	b.n	8002c4c <UsageFault_Handler+0x4>

08002c4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c4e:	b480      	push	{r7}
 8002c50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c52:	bf00      	nop
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002c60:	2001      	movs	r0, #1
 8002c62:	f002 fd09 	bl	8005678 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002c66:	bf00      	nop
 8002c68:	bd80      	pop	{r7, pc}
	...

08002c6c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002c70:	4802      	ldr	r0, [pc, #8]	; (8002c7c <TIM2_IRQHandler+0x10>)
 8002c72:	f004 fe12 	bl	800789a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002c76:	bf00      	nop
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	20004d20 	.word	0x20004d20

08002c80 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002c84:	4802      	ldr	r0, [pc, #8]	; (8002c90 <TIM3_IRQHandler+0x10>)
 8002c86:	f004 fe08 	bl	800789a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002c8a:	bf00      	nop
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	20004c84 	.word	0x20004c84

08002c94 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002c98:	4802      	ldr	r0, [pc, #8]	; (8002ca4 <TIM6_DAC_IRQHandler+0x10>)
 8002c9a:	f004 fdfe 	bl	800789a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002c9e:	bf00      	nop
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	20004d90 	.word	0x20004d90

08002ca8 <_sbrk>:
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	4a14      	ldr	r2, [pc, #80]	; (8002d04 <_sbrk+0x5c>)
 8002cb2:	4b15      	ldr	r3, [pc, #84]	; (8002d08 <_sbrk+0x60>)
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	617b      	str	r3, [r7, #20]
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	613b      	str	r3, [r7, #16]
 8002cbc:	4b13      	ldr	r3, [pc, #76]	; (8002d0c <_sbrk+0x64>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d102      	bne.n	8002cca <_sbrk+0x22>
 8002cc4:	4b11      	ldr	r3, [pc, #68]	; (8002d0c <_sbrk+0x64>)
 8002cc6:	4a12      	ldr	r2, [pc, #72]	; (8002d10 <_sbrk+0x68>)
 8002cc8:	601a      	str	r2, [r3, #0]
 8002cca:	4b10      	ldr	r3, [pc, #64]	; (8002d0c <_sbrk+0x64>)
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d207      	bcs.n	8002ce8 <_sbrk+0x40>
 8002cd8:	f008 fd30 	bl	800b73c <__errno>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	220c      	movs	r2, #12
 8002ce0:	601a      	str	r2, [r3, #0]
 8002ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ce6:	e009      	b.n	8002cfc <_sbrk+0x54>
 8002ce8:	4b08      	ldr	r3, [pc, #32]	; (8002d0c <_sbrk+0x64>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	60fb      	str	r3, [r7, #12]
 8002cee:	4b07      	ldr	r3, [pc, #28]	; (8002d0c <_sbrk+0x64>)
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	4a05      	ldr	r2, [pc, #20]	; (8002d0c <_sbrk+0x64>)
 8002cf8:	6013      	str	r3, [r2, #0]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3718      	adds	r7, #24
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	20030000 	.word	0x20030000
 8002d08:	00000400 	.word	0x00000400
 8002d0c:	200000f8 	.word	0x200000f8
 8002d10:	20004ef8 	.word	0x20004ef8

08002d14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d18:	4b06      	ldr	r3, [pc, #24]	; (8002d34 <SystemInit+0x20>)
 8002d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d1e:	4a05      	ldr	r2, [pc, #20]	; (8002d34 <SystemInit+0x20>)
 8002d20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */

}
 8002d28:	bf00      	nop
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	e000ed00 	.word	0xe000ed00

08002d38 <Reset_Handler>:
 8002d38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d70 <LoopFillZerobss+0x12>
 8002d3c:	480d      	ldr	r0, [pc, #52]	; (8002d74 <LoopFillZerobss+0x16>)
 8002d3e:	490e      	ldr	r1, [pc, #56]	; (8002d78 <LoopFillZerobss+0x1a>)
 8002d40:	4a0e      	ldr	r2, [pc, #56]	; (8002d7c <LoopFillZerobss+0x1e>)
 8002d42:	2300      	movs	r3, #0
 8002d44:	e002      	b.n	8002d4c <LoopCopyDataInit>

08002d46 <CopyDataInit>:
 8002d46:	58d4      	ldr	r4, [r2, r3]
 8002d48:	50c4      	str	r4, [r0, r3]
 8002d4a:	3304      	adds	r3, #4

08002d4c <LoopCopyDataInit>:
 8002d4c:	18c4      	adds	r4, r0, r3
 8002d4e:	428c      	cmp	r4, r1
 8002d50:	d3f9      	bcc.n	8002d46 <CopyDataInit>
 8002d52:	4a0b      	ldr	r2, [pc, #44]	; (8002d80 <LoopFillZerobss+0x22>)
 8002d54:	4c0b      	ldr	r4, [pc, #44]	; (8002d84 <LoopFillZerobss+0x26>)
 8002d56:	2300      	movs	r3, #0
 8002d58:	e001      	b.n	8002d5e <LoopFillZerobss>

08002d5a <FillZerobss>:
 8002d5a:	6013      	str	r3, [r2, #0]
 8002d5c:	3204      	adds	r2, #4

08002d5e <LoopFillZerobss>:
 8002d5e:	42a2      	cmp	r2, r4
 8002d60:	d3fb      	bcc.n	8002d5a <FillZerobss>
 8002d62:	f7ff ffd7 	bl	8002d14 <SystemInit>
 8002d66:	f008 fcef 	bl	800b748 <__libc_init_array>
 8002d6a:	f7fe ff4b 	bl	8001c04 <main>
 8002d6e:	4770      	bx	lr
 8002d70:	20030000 	.word	0x20030000
 8002d74:	20000000 	.word	0x20000000
 8002d78:	200000d4 	.word	0x200000d4
 8002d7c:	0800fe0c 	.word	0x0800fe0c
 8002d80:	200000d4 	.word	0x200000d4
 8002d84:	20004ef8 	.word	0x20004ef8

08002d88 <ADC_IRQHandler>:
 8002d88:	e7fe      	b.n	8002d88 <ADC_IRQHandler>

08002d8a <ili9341_Init>:
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	f000 fa5d 	bl	800324c <LCD_IO_Init>
 8002d92:	20ca      	movs	r0, #202	; 0xca
 8002d94:	f000 f95d 	bl	8003052 <ili9341_WriteReg>
 8002d98:	20c3      	movs	r0, #195	; 0xc3
 8002d9a:	f000 f967 	bl	800306c <ili9341_WriteData>
 8002d9e:	2008      	movs	r0, #8
 8002da0:	f000 f964 	bl	800306c <ili9341_WriteData>
 8002da4:	2050      	movs	r0, #80	; 0x50
 8002da6:	f000 f961 	bl	800306c <ili9341_WriteData>
 8002daa:	20cf      	movs	r0, #207	; 0xcf
 8002dac:	f000 f951 	bl	8003052 <ili9341_WriteReg>
 8002db0:	2000      	movs	r0, #0
 8002db2:	f000 f95b 	bl	800306c <ili9341_WriteData>
 8002db6:	20c1      	movs	r0, #193	; 0xc1
 8002db8:	f000 f958 	bl	800306c <ili9341_WriteData>
 8002dbc:	2030      	movs	r0, #48	; 0x30
 8002dbe:	f000 f955 	bl	800306c <ili9341_WriteData>
 8002dc2:	20ed      	movs	r0, #237	; 0xed
 8002dc4:	f000 f945 	bl	8003052 <ili9341_WriteReg>
 8002dc8:	2064      	movs	r0, #100	; 0x64
 8002dca:	f000 f94f 	bl	800306c <ili9341_WriteData>
 8002dce:	2003      	movs	r0, #3
 8002dd0:	f000 f94c 	bl	800306c <ili9341_WriteData>
 8002dd4:	2012      	movs	r0, #18
 8002dd6:	f000 f949 	bl	800306c <ili9341_WriteData>
 8002dda:	2081      	movs	r0, #129	; 0x81
 8002ddc:	f000 f946 	bl	800306c <ili9341_WriteData>
 8002de0:	20e8      	movs	r0, #232	; 0xe8
 8002de2:	f000 f936 	bl	8003052 <ili9341_WriteReg>
 8002de6:	2085      	movs	r0, #133	; 0x85
 8002de8:	f000 f940 	bl	800306c <ili9341_WriteData>
 8002dec:	2000      	movs	r0, #0
 8002dee:	f000 f93d 	bl	800306c <ili9341_WriteData>
 8002df2:	2078      	movs	r0, #120	; 0x78
 8002df4:	f000 f93a 	bl	800306c <ili9341_WriteData>
 8002df8:	20cb      	movs	r0, #203	; 0xcb
 8002dfa:	f000 f92a 	bl	8003052 <ili9341_WriteReg>
 8002dfe:	2039      	movs	r0, #57	; 0x39
 8002e00:	f000 f934 	bl	800306c <ili9341_WriteData>
 8002e04:	202c      	movs	r0, #44	; 0x2c
 8002e06:	f000 f931 	bl	800306c <ili9341_WriteData>
 8002e0a:	2000      	movs	r0, #0
 8002e0c:	f000 f92e 	bl	800306c <ili9341_WriteData>
 8002e10:	2034      	movs	r0, #52	; 0x34
 8002e12:	f000 f92b 	bl	800306c <ili9341_WriteData>
 8002e16:	2002      	movs	r0, #2
 8002e18:	f000 f928 	bl	800306c <ili9341_WriteData>
 8002e1c:	20f7      	movs	r0, #247	; 0xf7
 8002e1e:	f000 f918 	bl	8003052 <ili9341_WriteReg>
 8002e22:	2020      	movs	r0, #32
 8002e24:	f000 f922 	bl	800306c <ili9341_WriteData>
 8002e28:	20ea      	movs	r0, #234	; 0xea
 8002e2a:	f000 f912 	bl	8003052 <ili9341_WriteReg>
 8002e2e:	2000      	movs	r0, #0
 8002e30:	f000 f91c 	bl	800306c <ili9341_WriteData>
 8002e34:	2000      	movs	r0, #0
 8002e36:	f000 f919 	bl	800306c <ili9341_WriteData>
 8002e3a:	20b1      	movs	r0, #177	; 0xb1
 8002e3c:	f000 f909 	bl	8003052 <ili9341_WriteReg>
 8002e40:	2000      	movs	r0, #0
 8002e42:	f000 f913 	bl	800306c <ili9341_WriteData>
 8002e46:	201b      	movs	r0, #27
 8002e48:	f000 f910 	bl	800306c <ili9341_WriteData>
 8002e4c:	20b6      	movs	r0, #182	; 0xb6
 8002e4e:	f000 f900 	bl	8003052 <ili9341_WriteReg>
 8002e52:	200a      	movs	r0, #10
 8002e54:	f000 f90a 	bl	800306c <ili9341_WriteData>
 8002e58:	20a2      	movs	r0, #162	; 0xa2
 8002e5a:	f000 f907 	bl	800306c <ili9341_WriteData>
 8002e5e:	20c0      	movs	r0, #192	; 0xc0
 8002e60:	f000 f8f7 	bl	8003052 <ili9341_WriteReg>
 8002e64:	2010      	movs	r0, #16
 8002e66:	f000 f901 	bl	800306c <ili9341_WriteData>
 8002e6a:	20c1      	movs	r0, #193	; 0xc1
 8002e6c:	f000 f8f1 	bl	8003052 <ili9341_WriteReg>
 8002e70:	2010      	movs	r0, #16
 8002e72:	f000 f8fb 	bl	800306c <ili9341_WriteData>
 8002e76:	20c5      	movs	r0, #197	; 0xc5
 8002e78:	f000 f8eb 	bl	8003052 <ili9341_WriteReg>
 8002e7c:	2045      	movs	r0, #69	; 0x45
 8002e7e:	f000 f8f5 	bl	800306c <ili9341_WriteData>
 8002e82:	2015      	movs	r0, #21
 8002e84:	f000 f8f2 	bl	800306c <ili9341_WriteData>
 8002e88:	20c7      	movs	r0, #199	; 0xc7
 8002e8a:	f000 f8e2 	bl	8003052 <ili9341_WriteReg>
 8002e8e:	2090      	movs	r0, #144	; 0x90
 8002e90:	f000 f8ec 	bl	800306c <ili9341_WriteData>
 8002e94:	2036      	movs	r0, #54	; 0x36
 8002e96:	f000 f8dc 	bl	8003052 <ili9341_WriteReg>
 8002e9a:	20c8      	movs	r0, #200	; 0xc8
 8002e9c:	f000 f8e6 	bl	800306c <ili9341_WriteData>
 8002ea0:	20f2      	movs	r0, #242	; 0xf2
 8002ea2:	f000 f8d6 	bl	8003052 <ili9341_WriteReg>
 8002ea6:	2000      	movs	r0, #0
 8002ea8:	f000 f8e0 	bl	800306c <ili9341_WriteData>
 8002eac:	20b0      	movs	r0, #176	; 0xb0
 8002eae:	f000 f8d0 	bl	8003052 <ili9341_WriteReg>
 8002eb2:	20c2      	movs	r0, #194	; 0xc2
 8002eb4:	f000 f8da 	bl	800306c <ili9341_WriteData>
 8002eb8:	20b6      	movs	r0, #182	; 0xb6
 8002eba:	f000 f8ca 	bl	8003052 <ili9341_WriteReg>
 8002ebe:	200a      	movs	r0, #10
 8002ec0:	f000 f8d4 	bl	800306c <ili9341_WriteData>
 8002ec4:	20a7      	movs	r0, #167	; 0xa7
 8002ec6:	f000 f8d1 	bl	800306c <ili9341_WriteData>
 8002eca:	2027      	movs	r0, #39	; 0x27
 8002ecc:	f000 f8ce 	bl	800306c <ili9341_WriteData>
 8002ed0:	2004      	movs	r0, #4
 8002ed2:	f000 f8cb 	bl	800306c <ili9341_WriteData>
 8002ed6:	202a      	movs	r0, #42	; 0x2a
 8002ed8:	f000 f8bb 	bl	8003052 <ili9341_WriteReg>
 8002edc:	2000      	movs	r0, #0
 8002ede:	f000 f8c5 	bl	800306c <ili9341_WriteData>
 8002ee2:	2000      	movs	r0, #0
 8002ee4:	f000 f8c2 	bl	800306c <ili9341_WriteData>
 8002ee8:	2000      	movs	r0, #0
 8002eea:	f000 f8bf 	bl	800306c <ili9341_WriteData>
 8002eee:	20ef      	movs	r0, #239	; 0xef
 8002ef0:	f000 f8bc 	bl	800306c <ili9341_WriteData>
 8002ef4:	202b      	movs	r0, #43	; 0x2b
 8002ef6:	f000 f8ac 	bl	8003052 <ili9341_WriteReg>
 8002efa:	2000      	movs	r0, #0
 8002efc:	f000 f8b6 	bl	800306c <ili9341_WriteData>
 8002f00:	2000      	movs	r0, #0
 8002f02:	f000 f8b3 	bl	800306c <ili9341_WriteData>
 8002f06:	2001      	movs	r0, #1
 8002f08:	f000 f8b0 	bl	800306c <ili9341_WriteData>
 8002f0c:	203f      	movs	r0, #63	; 0x3f
 8002f0e:	f000 f8ad 	bl	800306c <ili9341_WriteData>
 8002f12:	20f6      	movs	r0, #246	; 0xf6
 8002f14:	f000 f89d 	bl	8003052 <ili9341_WriteReg>
 8002f18:	2001      	movs	r0, #1
 8002f1a:	f000 f8a7 	bl	800306c <ili9341_WriteData>
 8002f1e:	2000      	movs	r0, #0
 8002f20:	f000 f8a4 	bl	800306c <ili9341_WriteData>
 8002f24:	2006      	movs	r0, #6
 8002f26:	f000 f8a1 	bl	800306c <ili9341_WriteData>
 8002f2a:	202c      	movs	r0, #44	; 0x2c
 8002f2c:	f000 f891 	bl	8003052 <ili9341_WriteReg>
 8002f30:	20c8      	movs	r0, #200	; 0xc8
 8002f32:	f000 fa79 	bl	8003428 <LCD_Delay>
 8002f36:	2026      	movs	r0, #38	; 0x26
 8002f38:	f000 f88b 	bl	8003052 <ili9341_WriteReg>
 8002f3c:	2001      	movs	r0, #1
 8002f3e:	f000 f895 	bl	800306c <ili9341_WriteData>
 8002f42:	20e0      	movs	r0, #224	; 0xe0
 8002f44:	f000 f885 	bl	8003052 <ili9341_WriteReg>
 8002f48:	200f      	movs	r0, #15
 8002f4a:	f000 f88f 	bl	800306c <ili9341_WriteData>
 8002f4e:	2029      	movs	r0, #41	; 0x29
 8002f50:	f000 f88c 	bl	800306c <ili9341_WriteData>
 8002f54:	2024      	movs	r0, #36	; 0x24
 8002f56:	f000 f889 	bl	800306c <ili9341_WriteData>
 8002f5a:	200c      	movs	r0, #12
 8002f5c:	f000 f886 	bl	800306c <ili9341_WriteData>
 8002f60:	200e      	movs	r0, #14
 8002f62:	f000 f883 	bl	800306c <ili9341_WriteData>
 8002f66:	2009      	movs	r0, #9
 8002f68:	f000 f880 	bl	800306c <ili9341_WriteData>
 8002f6c:	204e      	movs	r0, #78	; 0x4e
 8002f6e:	f000 f87d 	bl	800306c <ili9341_WriteData>
 8002f72:	2078      	movs	r0, #120	; 0x78
 8002f74:	f000 f87a 	bl	800306c <ili9341_WriteData>
 8002f78:	203c      	movs	r0, #60	; 0x3c
 8002f7a:	f000 f877 	bl	800306c <ili9341_WriteData>
 8002f7e:	2009      	movs	r0, #9
 8002f80:	f000 f874 	bl	800306c <ili9341_WriteData>
 8002f84:	2013      	movs	r0, #19
 8002f86:	f000 f871 	bl	800306c <ili9341_WriteData>
 8002f8a:	2005      	movs	r0, #5
 8002f8c:	f000 f86e 	bl	800306c <ili9341_WriteData>
 8002f90:	2017      	movs	r0, #23
 8002f92:	f000 f86b 	bl	800306c <ili9341_WriteData>
 8002f96:	2011      	movs	r0, #17
 8002f98:	f000 f868 	bl	800306c <ili9341_WriteData>
 8002f9c:	2000      	movs	r0, #0
 8002f9e:	f000 f865 	bl	800306c <ili9341_WriteData>
 8002fa2:	20e1      	movs	r0, #225	; 0xe1
 8002fa4:	f000 f855 	bl	8003052 <ili9341_WriteReg>
 8002fa8:	2000      	movs	r0, #0
 8002faa:	f000 f85f 	bl	800306c <ili9341_WriteData>
 8002fae:	2016      	movs	r0, #22
 8002fb0:	f000 f85c 	bl	800306c <ili9341_WriteData>
 8002fb4:	201b      	movs	r0, #27
 8002fb6:	f000 f859 	bl	800306c <ili9341_WriteData>
 8002fba:	2004      	movs	r0, #4
 8002fbc:	f000 f856 	bl	800306c <ili9341_WriteData>
 8002fc0:	2011      	movs	r0, #17
 8002fc2:	f000 f853 	bl	800306c <ili9341_WriteData>
 8002fc6:	2007      	movs	r0, #7
 8002fc8:	f000 f850 	bl	800306c <ili9341_WriteData>
 8002fcc:	2031      	movs	r0, #49	; 0x31
 8002fce:	f000 f84d 	bl	800306c <ili9341_WriteData>
 8002fd2:	2033      	movs	r0, #51	; 0x33
 8002fd4:	f000 f84a 	bl	800306c <ili9341_WriteData>
 8002fd8:	2042      	movs	r0, #66	; 0x42
 8002fda:	f000 f847 	bl	800306c <ili9341_WriteData>
 8002fde:	2005      	movs	r0, #5
 8002fe0:	f000 f844 	bl	800306c <ili9341_WriteData>
 8002fe4:	200c      	movs	r0, #12
 8002fe6:	f000 f841 	bl	800306c <ili9341_WriteData>
 8002fea:	200a      	movs	r0, #10
 8002fec:	f000 f83e 	bl	800306c <ili9341_WriteData>
 8002ff0:	2028      	movs	r0, #40	; 0x28
 8002ff2:	f000 f83b 	bl	800306c <ili9341_WriteData>
 8002ff6:	202f      	movs	r0, #47	; 0x2f
 8002ff8:	f000 f838 	bl	800306c <ili9341_WriteData>
 8002ffc:	200f      	movs	r0, #15
 8002ffe:	f000 f835 	bl	800306c <ili9341_WriteData>
 8003002:	2011      	movs	r0, #17
 8003004:	f000 f825 	bl	8003052 <ili9341_WriteReg>
 8003008:	20c8      	movs	r0, #200	; 0xc8
 800300a:	f000 fa0d 	bl	8003428 <LCD_Delay>
 800300e:	2029      	movs	r0, #41	; 0x29
 8003010:	f000 f81f 	bl	8003052 <ili9341_WriteReg>
 8003014:	202c      	movs	r0, #44	; 0x2c
 8003016:	f000 f81c 	bl	8003052 <ili9341_WriteReg>
 800301a:	bf00      	nop
 800301c:	bd80      	pop	{r7, pc}

0800301e <ili9341_ReadID>:
 800301e:	b580      	push	{r7, lr}
 8003020:	af00      	add	r7, sp, #0
 8003022:	f000 f913 	bl	800324c <LCD_IO_Init>
 8003026:	2103      	movs	r1, #3
 8003028:	20d3      	movs	r0, #211	; 0xd3
 800302a:	f000 f82c 	bl	8003086 <ili9341_ReadData>
 800302e:	4603      	mov	r3, r0
 8003030:	b29b      	uxth	r3, r3
 8003032:	4618      	mov	r0, r3
 8003034:	bd80      	pop	{r7, pc}

08003036 <ili9341_DisplayOn>:
 8003036:	b580      	push	{r7, lr}
 8003038:	af00      	add	r7, sp, #0
 800303a:	2029      	movs	r0, #41	; 0x29
 800303c:	f000 f809 	bl	8003052 <ili9341_WriteReg>
 8003040:	bf00      	nop
 8003042:	bd80      	pop	{r7, pc}

08003044 <ili9341_DisplayOff>:
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
 8003048:	2028      	movs	r0, #40	; 0x28
 800304a:	f000 f802 	bl	8003052 <ili9341_WriteReg>
 800304e:	bf00      	nop
 8003050:	bd80      	pop	{r7, pc}

08003052 <ili9341_WriteReg>:
 8003052:	b580      	push	{r7, lr}
 8003054:	b082      	sub	sp, #8
 8003056:	af00      	add	r7, sp, #0
 8003058:	4603      	mov	r3, r0
 800305a:	71fb      	strb	r3, [r7, #7]
 800305c:	79fb      	ldrb	r3, [r7, #7]
 800305e:	4618      	mov	r0, r3
 8003060:	f000 f98e 	bl	8003380 <LCD_IO_WriteReg>
 8003064:	bf00      	nop
 8003066:	3708      	adds	r7, #8
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <ili9341_WriteData>:
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	4603      	mov	r3, r0
 8003074:	80fb      	strh	r3, [r7, #6]
 8003076:	88fb      	ldrh	r3, [r7, #6]
 8003078:	4618      	mov	r0, r3
 800307a:	f000 f95f 	bl	800333c <LCD_IO_WriteData>
 800307e:	bf00      	nop
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <ili9341_ReadData>:
 8003086:	b580      	push	{r7, lr}
 8003088:	b082      	sub	sp, #8
 800308a:	af00      	add	r7, sp, #0
 800308c:	4603      	mov	r3, r0
 800308e:	460a      	mov	r2, r1
 8003090:	80fb      	strh	r3, [r7, #6]
 8003092:	4613      	mov	r3, r2
 8003094:	717b      	strb	r3, [r7, #5]
 8003096:	797a      	ldrb	r2, [r7, #5]
 8003098:	88fb      	ldrh	r3, [r7, #6]
 800309a:	4611      	mov	r1, r2
 800309c:	4618      	mov	r0, r3
 800309e:	f000 f991 	bl	80033c4 <LCD_IO_ReadData>
 80030a2:	4603      	mov	r3, r0
 80030a4:	4618      	mov	r0, r3
 80030a6:	3708      	adds	r7, #8
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <ili9341_GetLcdPixelWidth>:
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	23f0      	movs	r3, #240	; 0xf0
 80030b2:	4618      	mov	r0, r3
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <ili9341_GetLcdPixelHeight>:
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
 80030c0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80030c4:	4618      	mov	r0, r3
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
	...

080030d0 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80030d4:	4819      	ldr	r0, [pc, #100]	; (800313c <SPIx_Init+0x6c>)
 80030d6:	f004 f9b2 	bl	800743e <HAL_SPI_GetState>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d12b      	bne.n	8003138 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 80030e0:	4b16      	ldr	r3, [pc, #88]	; (800313c <SPIx_Init+0x6c>)
 80030e2:	4a17      	ldr	r2, [pc, #92]	; (8003140 <SPIx_Init+0x70>)
 80030e4:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80030e6:	4b15      	ldr	r3, [pc, #84]	; (800313c <SPIx_Init+0x6c>)
 80030e8:	2218      	movs	r2, #24
 80030ea:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80030ec:	4b13      	ldr	r3, [pc, #76]	; (800313c <SPIx_Init+0x6c>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80030f2:	4b12      	ldr	r3, [pc, #72]	; (800313c <SPIx_Init+0x6c>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80030f8:	4b10      	ldr	r3, [pc, #64]	; (800313c <SPIx_Init+0x6c>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80030fe:	4b0f      	ldr	r3, [pc, #60]	; (800313c <SPIx_Init+0x6c>)
 8003100:	2200      	movs	r2, #0
 8003102:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8003104:	4b0d      	ldr	r3, [pc, #52]	; (800313c <SPIx_Init+0x6c>)
 8003106:	2207      	movs	r2, #7
 8003108:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 800310a:	4b0c      	ldr	r3, [pc, #48]	; (800313c <SPIx_Init+0x6c>)
 800310c:	2200      	movs	r2, #0
 800310e:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8003110:	4b0a      	ldr	r3, [pc, #40]	; (800313c <SPIx_Init+0x6c>)
 8003112:	2200      	movs	r2, #0
 8003114:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8003116:	4b09      	ldr	r3, [pc, #36]	; (800313c <SPIx_Init+0x6c>)
 8003118:	f44f 7200 	mov.w	r2, #512	; 0x200
 800311c:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800311e:	4b07      	ldr	r3, [pc, #28]	; (800313c <SPIx_Init+0x6c>)
 8003120:	2200      	movs	r2, #0
 8003122:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8003124:	4b05      	ldr	r3, [pc, #20]	; (800313c <SPIx_Init+0x6c>)
 8003126:	f44f 7282 	mov.w	r2, #260	; 0x104
 800312a:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 800312c:	4803      	ldr	r0, [pc, #12]	; (800313c <SPIx_Init+0x6c>)
 800312e:	f000 f853 	bl	80031d8 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8003132:	4802      	ldr	r0, [pc, #8]	; (800313c <SPIx_Init+0x6c>)
 8003134:	f003 fccf 	bl	8006ad6 <HAL_SPI_Init>
  } 
}
 8003138:	bf00      	nop
 800313a:	bd80      	pop	{r7, pc}
 800313c:	200000fc 	.word	0x200000fc
 8003140:	40015000 	.word	0x40015000

08003144 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	4603      	mov	r3, r0
 800314c:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800314e:	2300      	movs	r3, #0
 8003150:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8003152:	79fb      	ldrb	r3, [r7, #7]
 8003154:	b29a      	uxth	r2, r3
 8003156:	4b09      	ldr	r3, [pc, #36]	; (800317c <SPIx_Read+0x38>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f107 0108 	add.w	r1, r7, #8
 800315e:	4808      	ldr	r0, [pc, #32]	; (8003180 <SPIx_Read+0x3c>)
 8003160:	f003 feba 	bl	8006ed8 <HAL_SPI_Receive>
 8003164:	4603      	mov	r3, r0
 8003166:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003168:	7bfb      	ldrb	r3, [r7, #15]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 800316e:	f000 f827 	bl	80031c0 <SPIx_Error>
  }
  
  return readvalue;
 8003172:	68bb      	ldr	r3, [r7, #8]
}
 8003174:	4618      	mov	r0, r3
 8003176:	3710      	adds	r7, #16
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	20000044 	.word	0x20000044
 8003180:	200000fc 	.word	0x200000fc

08003184 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	4603      	mov	r3, r0
 800318c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800318e:	2300      	movs	r3, #0
 8003190:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8003192:	4b09      	ldr	r3, [pc, #36]	; (80031b8 <SPIx_Write+0x34>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	1db9      	adds	r1, r7, #6
 8003198:	2201      	movs	r2, #1
 800319a:	4808      	ldr	r0, [pc, #32]	; (80031bc <SPIx_Write+0x38>)
 800319c:	f003 fd60 	bl	8006c60 <HAL_SPI_Transmit>
 80031a0:	4603      	mov	r3, r0
 80031a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80031a4:	7bfb      	ldrb	r3, [r7, #15]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d001      	beq.n	80031ae <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80031aa:	f000 f809 	bl	80031c0 <SPIx_Error>
  }
}
 80031ae:	bf00      	nop
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	20000044 	.word	0x20000044
 80031bc:	200000fc 	.word	0x200000fc

080031c0 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80031c4:	4803      	ldr	r0, [pc, #12]	; (80031d4 <SPIx_Error+0x14>)
 80031c6:	f003 fd0f 	bl	8006be8 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 80031ca:	f7ff ff81 	bl	80030d0 <SPIx_Init>
}
 80031ce:	bf00      	nop
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	200000fc 	.word	0x200000fc

080031d8 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b08a      	sub	sp, #40	; 0x28
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 80031e0:	2300      	movs	r3, #0
 80031e2:	613b      	str	r3, [r7, #16]
 80031e4:	4b17      	ldr	r3, [pc, #92]	; (8003244 <SPIx_MspInit+0x6c>)
 80031e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e8:	4a16      	ldr	r2, [pc, #88]	; (8003244 <SPIx_MspInit+0x6c>)
 80031ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031ee:	6453      	str	r3, [r2, #68]	; 0x44
 80031f0:	4b14      	ldr	r3, [pc, #80]	; (8003244 <SPIx_MspInit+0x6c>)
 80031f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031f8:	613b      	str	r3, [r7, #16]
 80031fa:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80031fc:	2300      	movs	r3, #0
 80031fe:	60fb      	str	r3, [r7, #12]
 8003200:	4b10      	ldr	r3, [pc, #64]	; (8003244 <SPIx_MspInit+0x6c>)
 8003202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003204:	4a0f      	ldr	r2, [pc, #60]	; (8003244 <SPIx_MspInit+0x6c>)
 8003206:	f043 0320 	orr.w	r3, r3, #32
 800320a:	6313      	str	r3, [r2, #48]	; 0x30
 800320c:	4b0d      	ldr	r3, [pc, #52]	; (8003244 <SPIx_MspInit+0x6c>)
 800320e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003210:	f003 0320 	and.w	r3, r3, #32
 8003214:	60fb      	str	r3, [r7, #12]
 8003216:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8003218:	f44f 7360 	mov.w	r3, #896	; 0x380
 800321c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800321e:	2302      	movs	r3, #2
 8003220:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8003222:	2302      	movs	r3, #2
 8003224:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8003226:	2301      	movs	r3, #1
 8003228:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800322a:	2305      	movs	r3, #5
 800322c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800322e:	f107 0314 	add.w	r3, r7, #20
 8003232:	4619      	mov	r1, r3
 8003234:	4804      	ldr	r0, [pc, #16]	; (8003248 <SPIx_MspInit+0x70>)
 8003236:	f002 f841 	bl	80052bc <HAL_GPIO_Init>
}
 800323a:	bf00      	nop
 800323c:	3728      	adds	r7, #40	; 0x28
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	40023800 	.word	0x40023800
 8003248:	40021400 	.word	0x40021400

0800324c <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b088      	sub	sp, #32
 8003250:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8003252:	4b36      	ldr	r3, [pc, #216]	; (800332c <LCD_IO_Init+0xe0>)
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d164      	bne.n	8003324 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 800325a:	4b34      	ldr	r3, [pc, #208]	; (800332c <LCD_IO_Init+0xe0>)
 800325c:	2201      	movs	r2, #1
 800325e:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8003260:	2300      	movs	r3, #0
 8003262:	60bb      	str	r3, [r7, #8]
 8003264:	4b32      	ldr	r3, [pc, #200]	; (8003330 <LCD_IO_Init+0xe4>)
 8003266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003268:	4a31      	ldr	r2, [pc, #196]	; (8003330 <LCD_IO_Init+0xe4>)
 800326a:	f043 0308 	orr.w	r3, r3, #8
 800326e:	6313      	str	r3, [r2, #48]	; 0x30
 8003270:	4b2f      	ldr	r3, [pc, #188]	; (8003330 <LCD_IO_Init+0xe4>)
 8003272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003274:	f003 0308 	and.w	r3, r3, #8
 8003278:	60bb      	str	r3, [r7, #8]
 800327a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 800327c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003280:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003282:	2301      	movs	r3, #1
 8003284:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003286:	2300      	movs	r3, #0
 8003288:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800328a:	2302      	movs	r3, #2
 800328c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800328e:	f107 030c 	add.w	r3, r7, #12
 8003292:	4619      	mov	r1, r3
 8003294:	4827      	ldr	r0, [pc, #156]	; (8003334 <LCD_IO_Init+0xe8>)
 8003296:	f002 f811 	bl	80052bc <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 800329a:	2300      	movs	r3, #0
 800329c:	607b      	str	r3, [r7, #4]
 800329e:	4b24      	ldr	r3, [pc, #144]	; (8003330 <LCD_IO_Init+0xe4>)
 80032a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a2:	4a23      	ldr	r2, [pc, #140]	; (8003330 <LCD_IO_Init+0xe4>)
 80032a4:	f043 0308 	orr.w	r3, r3, #8
 80032a8:	6313      	str	r3, [r2, #48]	; 0x30
 80032aa:	4b21      	ldr	r3, [pc, #132]	; (8003330 <LCD_IO_Init+0xe4>)
 80032ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ae:	f003 0308 	and.w	r3, r3, #8
 80032b2:	607b      	str	r3, [r7, #4]
 80032b4:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80032b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032ba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80032bc:	2301      	movs	r3, #1
 80032be:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80032c0:	2300      	movs	r3, #0
 80032c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80032c4:	2302      	movs	r3, #2
 80032c6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80032c8:	f107 030c 	add.w	r3, r7, #12
 80032cc:	4619      	mov	r1, r3
 80032ce:	4819      	ldr	r0, [pc, #100]	; (8003334 <LCD_IO_Init+0xe8>)
 80032d0:	f001 fff4 	bl	80052bc <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80032d4:	2300      	movs	r3, #0
 80032d6:	603b      	str	r3, [r7, #0]
 80032d8:	4b15      	ldr	r3, [pc, #84]	; (8003330 <LCD_IO_Init+0xe4>)
 80032da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032dc:	4a14      	ldr	r2, [pc, #80]	; (8003330 <LCD_IO_Init+0xe4>)
 80032de:	f043 0304 	orr.w	r3, r3, #4
 80032e2:	6313      	str	r3, [r2, #48]	; 0x30
 80032e4:	4b12      	ldr	r3, [pc, #72]	; (8003330 <LCD_IO_Init+0xe4>)
 80032e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e8:	f003 0304 	and.w	r3, r3, #4
 80032ec:	603b      	str	r3, [r7, #0]
 80032ee:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80032f0:	2304      	movs	r3, #4
 80032f2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80032f4:	2301      	movs	r3, #1
 80032f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80032f8:	2300      	movs	r3, #0
 80032fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80032fc:	2302      	movs	r3, #2
 80032fe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8003300:	f107 030c 	add.w	r3, r7, #12
 8003304:	4619      	mov	r1, r3
 8003306:	480c      	ldr	r0, [pc, #48]	; (8003338 <LCD_IO_Init+0xec>)
 8003308:	f001 ffd8 	bl	80052bc <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 800330c:	2200      	movs	r2, #0
 800330e:	2104      	movs	r1, #4
 8003310:	4809      	ldr	r0, [pc, #36]	; (8003338 <LCD_IO_Init+0xec>)
 8003312:	f002 f997 	bl	8005644 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8003316:	2201      	movs	r2, #1
 8003318:	2104      	movs	r1, #4
 800331a:	4807      	ldr	r0, [pc, #28]	; (8003338 <LCD_IO_Init+0xec>)
 800331c:	f002 f992 	bl	8005644 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8003320:	f7ff fed6 	bl	80030d0 <SPIx_Init>
  }
}
 8003324:	bf00      	nop
 8003326:	3720      	adds	r7, #32
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	20000154 	.word	0x20000154
 8003330:	40023800 	.word	0x40023800
 8003334:	40020c00 	.word	0x40020c00
 8003338:	40020800 	.word	0x40020800

0800333c <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	4603      	mov	r3, r0
 8003344:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8003346:	2201      	movs	r2, #1
 8003348:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800334c:	480a      	ldr	r0, [pc, #40]	; (8003378 <LCD_IO_WriteData+0x3c>)
 800334e:	f002 f979 	bl	8005644 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8003352:	2200      	movs	r2, #0
 8003354:	2104      	movs	r1, #4
 8003356:	4809      	ldr	r0, [pc, #36]	; (800337c <LCD_IO_WriteData+0x40>)
 8003358:	f002 f974 	bl	8005644 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 800335c:	88fb      	ldrh	r3, [r7, #6]
 800335e:	4618      	mov	r0, r3
 8003360:	f7ff ff10 	bl	8003184 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003364:	2201      	movs	r2, #1
 8003366:	2104      	movs	r1, #4
 8003368:	4804      	ldr	r0, [pc, #16]	; (800337c <LCD_IO_WriteData+0x40>)
 800336a:	f002 f96b 	bl	8005644 <HAL_GPIO_WritePin>
}
 800336e:	bf00      	nop
 8003370:	3708      	adds	r7, #8
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	40020c00 	.word	0x40020c00
 800337c:	40020800 	.word	0x40020800

08003380 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	4603      	mov	r3, r0
 8003388:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800338a:	2200      	movs	r2, #0
 800338c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003390:	480a      	ldr	r0, [pc, #40]	; (80033bc <LCD_IO_WriteReg+0x3c>)
 8003392:	f002 f957 	bl	8005644 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8003396:	2200      	movs	r2, #0
 8003398:	2104      	movs	r1, #4
 800339a:	4809      	ldr	r0, [pc, #36]	; (80033c0 <LCD_IO_WriteReg+0x40>)
 800339c:	f002 f952 	bl	8005644 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 80033a0:	79fb      	ldrb	r3, [r7, #7]
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7ff feed 	bl	8003184 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80033aa:	2201      	movs	r2, #1
 80033ac:	2104      	movs	r1, #4
 80033ae:	4804      	ldr	r0, [pc, #16]	; (80033c0 <LCD_IO_WriteReg+0x40>)
 80033b0:	f002 f948 	bl	8005644 <HAL_GPIO_WritePin>
}
 80033b4:	bf00      	nop
 80033b6:	3708      	adds	r7, #8
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	40020c00 	.word	0x40020c00
 80033c0:	40020800 	.word	0x40020800

080033c4 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	4603      	mov	r3, r0
 80033cc:	460a      	mov	r2, r1
 80033ce:	80fb      	strh	r3, [r7, #6]
 80033d0:	4613      	mov	r3, r2
 80033d2:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 80033d4:	2300      	movs	r3, #0
 80033d6:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 80033d8:	2200      	movs	r2, #0
 80033da:	2104      	movs	r1, #4
 80033dc:	4810      	ldr	r0, [pc, #64]	; (8003420 <LCD_IO_ReadData+0x5c>)
 80033de:	f002 f931 	bl	8005644 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80033e2:	2200      	movs	r2, #0
 80033e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80033e8:	480e      	ldr	r0, [pc, #56]	; (8003424 <LCD_IO_ReadData+0x60>)
 80033ea:	f002 f92b 	bl	8005644 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 80033ee:	88fb      	ldrh	r3, [r7, #6]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7ff fec7 	bl	8003184 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 80033f6:	797b      	ldrb	r3, [r7, #5]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7ff fea3 	bl	8003144 <SPIx_Read>
 80033fe:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8003400:	2201      	movs	r2, #1
 8003402:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003406:	4807      	ldr	r0, [pc, #28]	; (8003424 <LCD_IO_ReadData+0x60>)
 8003408:	f002 f91c 	bl	8005644 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800340c:	2201      	movs	r2, #1
 800340e:	2104      	movs	r1, #4
 8003410:	4803      	ldr	r0, [pc, #12]	; (8003420 <LCD_IO_ReadData+0x5c>)
 8003412:	f002 f917 	bl	8005644 <HAL_GPIO_WritePin>
  
  return readvalue;
 8003416:	68fb      	ldr	r3, [r7, #12]
}
 8003418:	4618      	mov	r0, r3
 800341a:	3710      	adds	r7, #16
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	40020800 	.word	0x40020800
 8003424:	40020c00 	.word	0x40020c00

08003428 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f001 f9e1 	bl	80047f8 <HAL_Delay>
}
 8003436:	bf00      	nop
 8003438:	3708      	adds	r7, #8
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
	...

08003440 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8003444:	4b2d      	ldr	r3, [pc, #180]	; (80034fc <BSP_LCD_Init+0xbc>)
 8003446:	4a2e      	ldr	r2, [pc, #184]	; (8003500 <BSP_LCD_Init+0xc0>)
 8003448:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 800344a:	4b2c      	ldr	r3, [pc, #176]	; (80034fc <BSP_LCD_Init+0xbc>)
 800344c:	2209      	movs	r2, #9
 800344e:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8003450:	4b2a      	ldr	r3, [pc, #168]	; (80034fc <BSP_LCD_Init+0xbc>)
 8003452:	2201      	movs	r2, #1
 8003454:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8003456:	4b29      	ldr	r3, [pc, #164]	; (80034fc <BSP_LCD_Init+0xbc>)
 8003458:	221d      	movs	r2, #29
 800345a:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 800345c:	4b27      	ldr	r3, [pc, #156]	; (80034fc <BSP_LCD_Init+0xbc>)
 800345e:	2203      	movs	r2, #3
 8003460:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8003462:	4b26      	ldr	r3, [pc, #152]	; (80034fc <BSP_LCD_Init+0xbc>)
 8003464:	f240 120d 	movw	r2, #269	; 0x10d
 8003468:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 800346a:	4b24      	ldr	r3, [pc, #144]	; (80034fc <BSP_LCD_Init+0xbc>)
 800346c:	f240 1243 	movw	r2, #323	; 0x143
 8003470:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8003472:	4b22      	ldr	r3, [pc, #136]	; (80034fc <BSP_LCD_Init+0xbc>)
 8003474:	f240 1217 	movw	r2, #279	; 0x117
 8003478:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 800347a:	4b20      	ldr	r3, [pc, #128]	; (80034fc <BSP_LCD_Init+0xbc>)
 800347c:	f240 1247 	movw	r2, #327	; 0x147
 8003480:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8003482:	4b1e      	ldr	r3, [pc, #120]	; (80034fc <BSP_LCD_Init+0xbc>)
 8003484:	2200      	movs	r2, #0
 8003486:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 800348a:	4b1c      	ldr	r3, [pc, #112]	; (80034fc <BSP_LCD_Init+0xbc>)
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8003492:	4b1a      	ldr	r3, [pc, #104]	; (80034fc <BSP_LCD_Init+0xbc>)
 8003494:	2200      	movs	r2, #0
 8003496:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800349a:	4b1a      	ldr	r3, [pc, #104]	; (8003504 <BSP_LCD_Init+0xc4>)
 800349c:	2208      	movs	r2, #8
 800349e:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80034a0:	4b18      	ldr	r3, [pc, #96]	; (8003504 <BSP_LCD_Init+0xc4>)
 80034a2:	22c0      	movs	r2, #192	; 0xc0
 80034a4:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80034a6:	4b17      	ldr	r3, [pc, #92]	; (8003504 <BSP_LCD_Init+0xc4>)
 80034a8:	2204      	movs	r2, #4
 80034aa:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80034ac:	4b15      	ldr	r3, [pc, #84]	; (8003504 <BSP_LCD_Init+0xc4>)
 80034ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80034b2:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 80034b4:	4813      	ldr	r0, [pc, #76]	; (8003504 <BSP_LCD_Init+0xc4>)
 80034b6:	f003 f8c7 	bl	8006648 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80034ba:	4b10      	ldr	r3, [pc, #64]	; (80034fc <BSP_LCD_Init+0xbc>)
 80034bc:	2200      	movs	r2, #0
 80034be:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80034c0:	4b0e      	ldr	r3, [pc, #56]	; (80034fc <BSP_LCD_Init+0xbc>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80034c6:	4b0d      	ldr	r3, [pc, #52]	; (80034fc <BSP_LCD_Init+0xbc>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80034cc:	4b0b      	ldr	r3, [pc, #44]	; (80034fc <BSP_LCD_Init+0xbc>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 80034d2:	f000 fd97 	bl	8004004 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 80034d6:	4809      	ldr	r0, [pc, #36]	; (80034fc <BSP_LCD_Init+0xbc>)
 80034d8:	f002 f8e6 	bl	80056a8 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 80034dc:	4b0a      	ldr	r3, [pc, #40]	; (8003508 <BSP_LCD_Init+0xc8>)
 80034de:	4a0b      	ldr	r2, [pc, #44]	; (800350c <BSP_LCD_Init+0xcc>)
 80034e0:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 80034e2:	4b09      	ldr	r3, [pc, #36]	; (8003508 <BSP_LCD_Init+0xc8>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 80034ea:	f000 ff79 	bl	80043e0 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80034ee:	4808      	ldr	r0, [pc, #32]	; (8003510 <BSP_LCD_Init+0xd0>)
 80034f0:	f000 f8ce 	bl	8003690 <BSP_LCD_SetFont>

  return LCD_OK;
 80034f4:	2300      	movs	r3, #0
}  
 80034f6:	4618      	mov	r0, r3
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	20004dd8 	.word	0x20004dd8
 8003500:	40016800 	.word	0x40016800
 8003504:	20000198 	.word	0x20000198
 8003508:	20004e80 	.word	0x20004e80
 800350c:	2000000c 	.word	0x2000000c
 8003510:	20000048 	.word	0x20000048

08003514 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8003518:	4b03      	ldr	r3, [pc, #12]	; (8003528 <BSP_LCD_GetXSize+0x14>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800351e:	4798      	blx	r3
 8003520:	4603      	mov	r3, r0
}
 8003522:	4618      	mov	r0, r3
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	20004e80 	.word	0x20004e80

0800352c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8003530:	4b03      	ldr	r3, [pc, #12]	; (8003540 <BSP_LCD_GetYSize+0x14>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003536:	4798      	blx	r3
 8003538:	4603      	mov	r3, r0
}
 800353a:	4618      	mov	r0, r3
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	20004e80 	.word	0x20004e80

08003544 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8003544:	b580      	push	{r7, lr}
 8003546:	b090      	sub	sp, #64	; 0x40
 8003548:	af00      	add	r7, sp, #0
 800354a:	4603      	mov	r3, r0
 800354c:	6039      	str	r1, [r7, #0]
 800354e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8003550:	2300      	movs	r3, #0
 8003552:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8003554:	f7ff ffde 	bl	8003514 <BSP_LCD_GetXSize>
 8003558:	4603      	mov	r3, r0
 800355a:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 800355c:	2300      	movs	r3, #0
 800355e:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8003560:	f7ff ffe4 	bl	800352c <BSP_LCD_GetYSize>
 8003564:	4603      	mov	r3, r0
 8003566:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003568:	2300      	movs	r3, #0
 800356a:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8003570:	23ff      	movs	r3, #255	; 0xff
 8003572:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8003574:	2300      	movs	r3, #0
 8003576:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8003578:	2300      	movs	r3, #0
 800357a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 800357e:	2300      	movs	r3, #0
 8003580:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8003584:	2300      	movs	r3, #0
 8003586:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800358a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800358e:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8003590:	2307      	movs	r3, #7
 8003592:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8003594:	f7ff ffbe 	bl	8003514 <BSP_LCD_GetXSize>
 8003598:	4603      	mov	r3, r0
 800359a:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 800359c:	f7ff ffc6 	bl	800352c <BSP_LCD_GetYSize>
 80035a0:	4603      	mov	r3, r0
 80035a2:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 80035a4:	88fa      	ldrh	r2, [r7, #6]
 80035a6:	f107 030c 	add.w	r3, r7, #12
 80035aa:	4619      	mov	r1, r3
 80035ac:	4814      	ldr	r0, [pc, #80]	; (8003600 <BSP_LCD_LayerDefaultInit+0xbc>)
 80035ae:	f002 f955 	bl	800585c <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80035b2:	88fa      	ldrh	r2, [r7, #6]
 80035b4:	4913      	ldr	r1, [pc, #76]	; (8003604 <BSP_LCD_LayerDefaultInit+0xc0>)
 80035b6:	4613      	mov	r3, r2
 80035b8:	005b      	lsls	r3, r3, #1
 80035ba:	4413      	add	r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	440b      	add	r3, r1
 80035c0:	3304      	adds	r3, #4
 80035c2:	f04f 32ff 	mov.w	r2, #4294967295
 80035c6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80035c8:	88fa      	ldrh	r2, [r7, #6]
 80035ca:	490e      	ldr	r1, [pc, #56]	; (8003604 <BSP_LCD_LayerDefaultInit+0xc0>)
 80035cc:	4613      	mov	r3, r2
 80035ce:	005b      	lsls	r3, r3, #1
 80035d0:	4413      	add	r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	440b      	add	r3, r1
 80035d6:	3308      	adds	r3, #8
 80035d8:	4a0b      	ldr	r2, [pc, #44]	; (8003608 <BSP_LCD_LayerDefaultInit+0xc4>)
 80035da:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80035dc:	88fa      	ldrh	r2, [r7, #6]
 80035de:	4909      	ldr	r1, [pc, #36]	; (8003604 <BSP_LCD_LayerDefaultInit+0xc0>)
 80035e0:	4613      	mov	r3, r2
 80035e2:	005b      	lsls	r3, r3, #1
 80035e4:	4413      	add	r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	440b      	add	r3, r1
 80035ea:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80035ee:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 80035f0:	4803      	ldr	r0, [pc, #12]	; (8003600 <BSP_LCD_LayerDefaultInit+0xbc>)
 80035f2:	f002 f971 	bl	80058d8 <HAL_LTDC_EnableDither>
}
 80035f6:	bf00      	nop
 80035f8:	3740      	adds	r7, #64	; 0x40
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	20004dd8 	.word	0x20004dd8
 8003604:	200001cc 	.word	0x200001cc
 8003608:	20000048 	.word	0x20000048

0800360c <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8003614:	4a04      	ldr	r2, [pc, #16]	; (8003628 <BSP_LCD_SelectLayer+0x1c>)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6013      	str	r3, [r2, #0]
}
 800361a:	bf00      	nop
 800361c:	370c      	adds	r7, #12
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	200001c8 	.word	0x200001c8

0800362c <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8003634:	4b07      	ldr	r3, [pc, #28]	; (8003654 <BSP_LCD_SetTextColor+0x28>)
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	4907      	ldr	r1, [pc, #28]	; (8003658 <BSP_LCD_SetTextColor+0x2c>)
 800363a:	4613      	mov	r3, r2
 800363c:	005b      	lsls	r3, r3, #1
 800363e:	4413      	add	r3, r2
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	440b      	add	r3, r1
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	601a      	str	r2, [r3, #0]
}
 8003648:	bf00      	nop
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr
 8003654:	200001c8 	.word	0x200001c8
 8003658:	200001cc 	.word	0x200001cc

0800365c <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8003664:	4b08      	ldr	r3, [pc, #32]	; (8003688 <BSP_LCD_SetBackColor+0x2c>)
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	4908      	ldr	r1, [pc, #32]	; (800368c <BSP_LCD_SetBackColor+0x30>)
 800366a:	4613      	mov	r3, r2
 800366c:	005b      	lsls	r3, r3, #1
 800366e:	4413      	add	r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	440b      	add	r3, r1
 8003674:	3304      	adds	r3, #4
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	601a      	str	r2, [r3, #0]
}
 800367a:	bf00      	nop
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	200001c8 	.word	0x200001c8
 800368c:	200001cc 	.word	0x200001cc

08003690 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8003698:	4b08      	ldr	r3, [pc, #32]	; (80036bc <BSP_LCD_SetFont+0x2c>)
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	4908      	ldr	r1, [pc, #32]	; (80036c0 <BSP_LCD_SetFont+0x30>)
 800369e:	4613      	mov	r3, r2
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	4413      	add	r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	440b      	add	r3, r1
 80036a8:	3308      	adds	r3, #8
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	601a      	str	r2, [r3, #0]
}
 80036ae:	bf00      	nop
 80036b0:	370c      	adds	r7, #12
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	200001c8 	.word	0x200001c8
 80036c0:	200001cc 	.word	0x200001cc

080036c4 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the Text Font.
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 80036c4:	b480      	push	{r7}
 80036c6:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 80036c8:	4b07      	ldr	r3, [pc, #28]	; (80036e8 <BSP_LCD_GetFont+0x24>)
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	4907      	ldr	r1, [pc, #28]	; (80036ec <BSP_LCD_GetFont+0x28>)
 80036ce:	4613      	mov	r3, r2
 80036d0:	005b      	lsls	r3, r3, #1
 80036d2:	4413      	add	r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	440b      	add	r3, r1
 80036d8:	3308      	adds	r3, #8
 80036da:	681b      	ldr	r3, [r3, #0]
}
 80036dc:	4618      	mov	r0, r3
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	200001c8 	.word	0x200001c8
 80036ec:	200001cc 	.word	0x200001cc

080036f0 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80036f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af02      	add	r7, sp, #8
 80036f6:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80036f8:	4b0f      	ldr	r3, [pc, #60]	; (8003738 <BSP_LCD_Clear+0x48>)
 80036fa:	681c      	ldr	r4, [r3, #0]
 80036fc:	4b0e      	ldr	r3, [pc, #56]	; (8003738 <BSP_LCD_Clear+0x48>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a0e      	ldr	r2, [pc, #56]	; (800373c <BSP_LCD_Clear+0x4c>)
 8003702:	2134      	movs	r1, #52	; 0x34
 8003704:	fb01 f303 	mul.w	r3, r1, r3
 8003708:	4413      	add	r3, r2
 800370a:	335c      	adds	r3, #92	; 0x5c
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	461e      	mov	r6, r3
 8003710:	f7ff ff00 	bl	8003514 <BSP_LCD_GetXSize>
 8003714:	4605      	mov	r5, r0
 8003716:	f7ff ff09 	bl	800352c <BSP_LCD_GetYSize>
 800371a:	4602      	mov	r2, r0
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	9301      	str	r3, [sp, #4]
 8003720:	2300      	movs	r3, #0
 8003722:	9300      	str	r3, [sp, #0]
 8003724:	4613      	mov	r3, r2
 8003726:	462a      	mov	r2, r5
 8003728:	4631      	mov	r1, r6
 800372a:	4620      	mov	r0, r4
 800372c:	f000 fe20 	bl	8004370 <FillBuffer>
}
 8003730:	bf00      	nop
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003738:	200001c8 	.word	0x200001c8
 800373c:	20004dd8 	.word	0x20004dd8

08003740 <BSP_LCD_ClearStringLine>:
/**
  * @brief  Clears the selected line.
  * @param  Line: the line to be cleared
  */
void BSP_LCD_ClearStringLine(uint32_t Line)
{
 8003740:	b590      	push	{r4, r7, lr}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  uint32_t colorbackup = DrawProp[ActiveLayer].TextColor;
 8003748:	4b2d      	ldr	r3, [pc, #180]	; (8003800 <BSP_LCD_ClearStringLine+0xc0>)
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	492d      	ldr	r1, [pc, #180]	; (8003804 <BSP_LCD_ClearStringLine+0xc4>)
 800374e:	4613      	mov	r3, r2
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	4413      	add	r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	440b      	add	r3, r1
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	60fb      	str	r3, [r7, #12]
  DrawProp[ActiveLayer].TextColor = DrawProp[ActiveLayer].BackColor;
 800375c:	4b28      	ldr	r3, [pc, #160]	; (8003800 <BSP_LCD_ClearStringLine+0xc0>)
 800375e:	6819      	ldr	r1, [r3, #0]
 8003760:	4b27      	ldr	r3, [pc, #156]	; (8003800 <BSP_LCD_ClearStringLine+0xc0>)
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	4827      	ldr	r0, [pc, #156]	; (8003804 <BSP_LCD_ClearStringLine+0xc4>)
 8003766:	460b      	mov	r3, r1
 8003768:	005b      	lsls	r3, r3, #1
 800376a:	440b      	add	r3, r1
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	4403      	add	r3, r0
 8003770:	3304      	adds	r3, #4
 8003772:	6819      	ldr	r1, [r3, #0]
 8003774:	4823      	ldr	r0, [pc, #140]	; (8003804 <BSP_LCD_ClearStringLine+0xc4>)
 8003776:	4613      	mov	r3, r2
 8003778:	005b      	lsls	r3, r3, #1
 800377a:	4413      	add	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	4403      	add	r3, r0
 8003780:	6019      	str	r1, [r3, #0]

  /* Draw rectangle with background color */
  BSP_LCD_FillRect(0, (Line * DrawProp[ActiveLayer].pFont->Height), BSP_LCD_GetXSize(), DrawProp[ActiveLayer].pFont->Height);
 8003782:	4b1f      	ldr	r3, [pc, #124]	; (8003800 <BSP_LCD_ClearStringLine+0xc0>)
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	491f      	ldr	r1, [pc, #124]	; (8003804 <BSP_LCD_ClearStringLine+0xc4>)
 8003788:	4613      	mov	r3, r2
 800378a:	005b      	lsls	r3, r3, #1
 800378c:	4413      	add	r3, r2
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	440b      	add	r3, r1
 8003792:	3308      	adds	r3, #8
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	88da      	ldrh	r2, [r3, #6]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	b29b      	uxth	r3, r3
 800379c:	fb12 f303 	smulbb	r3, r2, r3
 80037a0:	b29c      	uxth	r4, r3
 80037a2:	f7ff feb7 	bl	8003514 <BSP_LCD_GetXSize>
 80037a6:	4603      	mov	r3, r0
 80037a8:	b299      	uxth	r1, r3
 80037aa:	4b15      	ldr	r3, [pc, #84]	; (8003800 <BSP_LCD_ClearStringLine+0xc0>)
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	4815      	ldr	r0, [pc, #84]	; (8003804 <BSP_LCD_ClearStringLine+0xc4>)
 80037b0:	4613      	mov	r3, r2
 80037b2:	005b      	lsls	r3, r3, #1
 80037b4:	4413      	add	r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	4403      	add	r3, r0
 80037ba:	3308      	adds	r3, #8
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	88db      	ldrh	r3, [r3, #6]
 80037c0:	460a      	mov	r2, r1
 80037c2:	4621      	mov	r1, r4
 80037c4:	2000      	movs	r0, #0
 80037c6:	f000 fb13 	bl	8003df0 <BSP_LCD_FillRect>
  
  DrawProp[ActiveLayer].TextColor = colorbackup;
 80037ca:	4b0d      	ldr	r3, [pc, #52]	; (8003800 <BSP_LCD_ClearStringLine+0xc0>)
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	490d      	ldr	r1, [pc, #52]	; (8003804 <BSP_LCD_ClearStringLine+0xc4>)
 80037d0:	4613      	mov	r3, r2
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	4413      	add	r3, r2
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	440b      	add	r3, r1
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	601a      	str	r2, [r3, #0]
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);  
 80037de:	4b08      	ldr	r3, [pc, #32]	; (8003800 <BSP_LCD_ClearStringLine+0xc0>)
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	4908      	ldr	r1, [pc, #32]	; (8003804 <BSP_LCD_ClearStringLine+0xc4>)
 80037e4:	4613      	mov	r3, r2
 80037e6:	005b      	lsls	r3, r3, #1
 80037e8:	4413      	add	r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	440b      	add	r3, r1
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7ff ff1b 	bl	800362c <BSP_LCD_SetTextColor>
}
 80037f6:	bf00      	nop
 80037f8:	3714      	adds	r7, #20
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd90      	pop	{r4, r7, pc}
 80037fe:	bf00      	nop
 8003800:	200001c8 	.word	0x200001c8
 8003804:	200001cc 	.word	0x200001cc

08003808 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8003808:	b590      	push	{r4, r7, lr}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	4603      	mov	r3, r0
 8003810:	80fb      	strh	r3, [r7, #6]
 8003812:	460b      	mov	r3, r1
 8003814:	80bb      	strh	r3, [r7, #4]
 8003816:	4613      	mov	r3, r2
 8003818:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800381a:	4b1b      	ldr	r3, [pc, #108]	; (8003888 <BSP_LCD_DisplayChar+0x80>)
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	491b      	ldr	r1, [pc, #108]	; (800388c <BSP_LCD_DisplayChar+0x84>)
 8003820:	4613      	mov	r3, r2
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	4413      	add	r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	440b      	add	r3, r1
 800382a:	3308      	adds	r3, #8
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	6819      	ldr	r1, [r3, #0]
 8003830:	78fb      	ldrb	r3, [r7, #3]
 8003832:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003836:	4b14      	ldr	r3, [pc, #80]	; (8003888 <BSP_LCD_DisplayChar+0x80>)
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	4c14      	ldr	r4, [pc, #80]	; (800388c <BSP_LCD_DisplayChar+0x84>)
 800383c:	4613      	mov	r3, r2
 800383e:	005b      	lsls	r3, r3, #1
 8003840:	4413      	add	r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	4423      	add	r3, r4
 8003846:	3308      	adds	r3, #8
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800384c:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003850:	4b0d      	ldr	r3, [pc, #52]	; (8003888 <BSP_LCD_DisplayChar+0x80>)
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	4c0d      	ldr	r4, [pc, #52]	; (800388c <BSP_LCD_DisplayChar+0x84>)
 8003856:	4613      	mov	r3, r2
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	4413      	add	r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	4423      	add	r3, r4
 8003860:	3308      	adds	r3, #8
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	889b      	ldrh	r3, [r3, #4]
 8003866:	3307      	adds	r3, #7
 8003868:	2b00      	cmp	r3, #0
 800386a:	da00      	bge.n	800386e <BSP_LCD_DisplayChar+0x66>
 800386c:	3307      	adds	r3, #7
 800386e:	10db      	asrs	r3, r3, #3
 8003870:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003874:	18ca      	adds	r2, r1, r3
 8003876:	88b9      	ldrh	r1, [r7, #4]
 8003878:	88fb      	ldrh	r3, [r7, #6]
 800387a:	4618      	mov	r0, r3
 800387c:	f000 fcbe 	bl	80041fc <DrawChar>
}
 8003880:	bf00      	nop
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	bd90      	pop	{r4, r7, pc}
 8003888:	200001c8 	.word	0x200001c8
 800388c:	200001cc 	.word	0x200001cc

08003890 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8003890:	b5b0      	push	{r4, r5, r7, lr}
 8003892:	b088      	sub	sp, #32
 8003894:	af00      	add	r7, sp, #0
 8003896:	60ba      	str	r2, [r7, #8]
 8003898:	461a      	mov	r2, r3
 800389a:	4603      	mov	r3, r0
 800389c:	81fb      	strh	r3, [r7, #14]
 800389e:	460b      	mov	r3, r1
 80038a0:	81bb      	strh	r3, [r7, #12]
 80038a2:	4613      	mov	r3, r2
 80038a4:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 80038a6:	2301      	movs	r3, #1
 80038a8:	83fb      	strh	r3, [r7, #30]
 80038aa:	2300      	movs	r3, #0
 80038ac:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80038ae:	2300      	movs	r3, #0
 80038b0:	61bb      	str	r3, [r7, #24]
 80038b2:	2300      	movs	r3, #0
 80038b4:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80038ba:	e002      	b.n	80038c2 <BSP_LCD_DisplayStringAt+0x32>
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	3301      	adds	r3, #1
 80038c0:	61bb      	str	r3, [r7, #24]
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	1c5a      	adds	r2, r3, #1
 80038c6:	617a      	str	r2, [r7, #20]
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1f6      	bne.n	80038bc <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80038ce:	f7ff fe21 	bl	8003514 <BSP_LCD_GetXSize>
 80038d2:	4601      	mov	r1, r0
 80038d4:	4b4b      	ldr	r3, [pc, #300]	; (8003a04 <BSP_LCD_DisplayStringAt+0x174>)
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	484b      	ldr	r0, [pc, #300]	; (8003a08 <BSP_LCD_DisplayStringAt+0x178>)
 80038da:	4613      	mov	r3, r2
 80038dc:	005b      	lsls	r3, r3, #1
 80038de:	4413      	add	r3, r2
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	4403      	add	r3, r0
 80038e4:	3308      	adds	r3, #8
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	889b      	ldrh	r3, [r3, #4]
 80038ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80038ee:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 80038f0:	79fb      	ldrb	r3, [r7, #7]
 80038f2:	2b03      	cmp	r3, #3
 80038f4:	d01c      	beq.n	8003930 <BSP_LCD_DisplayStringAt+0xa0>
 80038f6:	2b03      	cmp	r3, #3
 80038f8:	dc33      	bgt.n	8003962 <BSP_LCD_DisplayStringAt+0xd2>
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d002      	beq.n	8003904 <BSP_LCD_DisplayStringAt+0x74>
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d019      	beq.n	8003936 <BSP_LCD_DisplayStringAt+0xa6>
 8003902:	e02e      	b.n	8003962 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	1ad1      	subs	r1, r2, r3
 800390a:	4b3e      	ldr	r3, [pc, #248]	; (8003a04 <BSP_LCD_DisplayStringAt+0x174>)
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	483e      	ldr	r0, [pc, #248]	; (8003a08 <BSP_LCD_DisplayStringAt+0x178>)
 8003910:	4613      	mov	r3, r2
 8003912:	005b      	lsls	r3, r3, #1
 8003914:	4413      	add	r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	4403      	add	r3, r0
 800391a:	3308      	adds	r3, #8
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	889b      	ldrh	r3, [r3, #4]
 8003920:	fb03 f301 	mul.w	r3, r3, r1
 8003924:	085b      	lsrs	r3, r3, #1
 8003926:	b29a      	uxth	r2, r3
 8003928:	89fb      	ldrh	r3, [r7, #14]
 800392a:	4413      	add	r3, r2
 800392c:	83fb      	strh	r3, [r7, #30]
      break;
 800392e:	e01b      	b.n	8003968 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8003930:	89fb      	ldrh	r3, [r7, #14]
 8003932:	83fb      	strh	r3, [r7, #30]
      break;
 8003934:	e018      	b.n	8003968 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8003936:	693a      	ldr	r2, [r7, #16]
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	b299      	uxth	r1, r3
 800393e:	4b31      	ldr	r3, [pc, #196]	; (8003a04 <BSP_LCD_DisplayStringAt+0x174>)
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	4831      	ldr	r0, [pc, #196]	; (8003a08 <BSP_LCD_DisplayStringAt+0x178>)
 8003944:	4613      	mov	r3, r2
 8003946:	005b      	lsls	r3, r3, #1
 8003948:	4413      	add	r3, r2
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	4403      	add	r3, r0
 800394e:	3308      	adds	r3, #8
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	889b      	ldrh	r3, [r3, #4]
 8003954:	fb11 f303 	smulbb	r3, r1, r3
 8003958:	b29a      	uxth	r2, r3
 800395a:	89fb      	ldrh	r3, [r7, #14]
 800395c:	4413      	add	r3, r2
 800395e:	83fb      	strh	r3, [r7, #30]
      break;
 8003960:	e002      	b.n	8003968 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 8003962:	89fb      	ldrh	r3, [r7, #14]
 8003964:	83fb      	strh	r3, [r7, #30]
      break;
 8003966:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003968:	e01a      	b.n	80039a0 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	781a      	ldrb	r2, [r3, #0]
 800396e:	89b9      	ldrh	r1, [r7, #12]
 8003970:	8bfb      	ldrh	r3, [r7, #30]
 8003972:	4618      	mov	r0, r3
 8003974:	f7ff ff48 	bl	8003808 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8003978:	4b22      	ldr	r3, [pc, #136]	; (8003a04 <BSP_LCD_DisplayStringAt+0x174>)
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	4922      	ldr	r1, [pc, #136]	; (8003a08 <BSP_LCD_DisplayStringAt+0x178>)
 800397e:	4613      	mov	r3, r2
 8003980:	005b      	lsls	r3, r3, #1
 8003982:	4413      	add	r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	440b      	add	r3, r1
 8003988:	3308      	adds	r3, #8
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	889a      	ldrh	r2, [r3, #4]
 800398e:	8bfb      	ldrh	r3, [r7, #30]
 8003990:	4413      	add	r3, r2
 8003992:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	3301      	adds	r3, #1
 8003998:	60bb      	str	r3, [r7, #8]
    i++;
 800399a:	8bbb      	ldrh	r3, [r7, #28]
 800399c:	3301      	adds	r3, #1
 800399e:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	bf14      	ite	ne
 80039a8:	2301      	movne	r3, #1
 80039aa:	2300      	moveq	r3, #0
 80039ac:	b2dc      	uxtb	r4, r3
 80039ae:	f7ff fdb1 	bl	8003514 <BSP_LCD_GetXSize>
 80039b2:	8bb9      	ldrh	r1, [r7, #28]
 80039b4:	4b13      	ldr	r3, [pc, #76]	; (8003a04 <BSP_LCD_DisplayStringAt+0x174>)
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	4d13      	ldr	r5, [pc, #76]	; (8003a08 <BSP_LCD_DisplayStringAt+0x178>)
 80039ba:	4613      	mov	r3, r2
 80039bc:	005b      	lsls	r3, r3, #1
 80039be:	4413      	add	r3, r2
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	442b      	add	r3, r5
 80039c4:	3308      	adds	r3, #8
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	889b      	ldrh	r3, [r3, #4]
 80039ca:	fb03 f301 	mul.w	r3, r3, r1
 80039ce:	1ac3      	subs	r3, r0, r3
 80039d0:	b299      	uxth	r1, r3
 80039d2:	4b0c      	ldr	r3, [pc, #48]	; (8003a04 <BSP_LCD_DisplayStringAt+0x174>)
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	480c      	ldr	r0, [pc, #48]	; (8003a08 <BSP_LCD_DisplayStringAt+0x178>)
 80039d8:	4613      	mov	r3, r2
 80039da:	005b      	lsls	r3, r3, #1
 80039dc:	4413      	add	r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	4403      	add	r3, r0
 80039e2:	3308      	adds	r3, #8
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	889b      	ldrh	r3, [r3, #4]
 80039e8:	4299      	cmp	r1, r3
 80039ea:	bf2c      	ite	cs
 80039ec:	2301      	movcs	r3, #1
 80039ee:	2300      	movcc	r3, #0
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	4023      	ands	r3, r4
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1b7      	bne.n	800396a <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 80039fa:	bf00      	nop
 80039fc:	bf00      	nop
 80039fe:	3720      	adds	r7, #32
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bdb0      	pop	{r4, r5, r7, pc}
 8003a04:	200001c8 	.word	0x200001c8
 8003a08:	200001cc 	.word	0x200001cc

08003a0c <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8003a0c:	b5b0      	push	{r4, r5, r7, lr}
 8003a0e:	b086      	sub	sp, #24
 8003a10:	af02      	add	r7, sp, #8
 8003a12:	4603      	mov	r3, r0
 8003a14:	80fb      	strh	r3, [r7, #6]
 8003a16:	460b      	mov	r3, r1
 8003a18:	80bb      	strh	r3, [r7, #4]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003a22:	4b16      	ldr	r3, [pc, #88]	; (8003a7c <BSP_LCD_DrawHLine+0x70>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a16      	ldr	r2, [pc, #88]	; (8003a80 <BSP_LCD_DrawHLine+0x74>)
 8003a28:	2134      	movs	r1, #52	; 0x34
 8003a2a:	fb01 f303 	mul.w	r3, r1, r3
 8003a2e:	4413      	add	r3, r2
 8003a30:	335c      	adds	r3, #92	; 0x5c
 8003a32:	681c      	ldr	r4, [r3, #0]
 8003a34:	f7ff fd6e 	bl	8003514 <BSP_LCD_GetXSize>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	88bb      	ldrh	r3, [r7, #4]
 8003a3c:	fb03 f202 	mul.w	r2, r3, r2
 8003a40:	88fb      	ldrh	r3, [r7, #6]
 8003a42:	4413      	add	r3, r2
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	4423      	add	r3, r4
 8003a48:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8003a4a:	4b0c      	ldr	r3, [pc, #48]	; (8003a7c <BSP_LCD_DrawHLine+0x70>)
 8003a4c:	6818      	ldr	r0, [r3, #0]
 8003a4e:	68f9      	ldr	r1, [r7, #12]
 8003a50:	887c      	ldrh	r4, [r7, #2]
 8003a52:	4b0a      	ldr	r3, [pc, #40]	; (8003a7c <BSP_LCD_DrawHLine+0x70>)
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	4d0b      	ldr	r5, [pc, #44]	; (8003a84 <BSP_LCD_DrawHLine+0x78>)
 8003a58:	4613      	mov	r3, r2
 8003a5a:	005b      	lsls	r3, r3, #1
 8003a5c:	4413      	add	r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	442b      	add	r3, r5
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	9301      	str	r3, [sp, #4]
 8003a66:	2300      	movs	r3, #0
 8003a68:	9300      	str	r3, [sp, #0]
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	4622      	mov	r2, r4
 8003a6e:	f000 fc7f 	bl	8004370 <FillBuffer>
}
 8003a72:	bf00      	nop
 8003a74:	3710      	adds	r7, #16
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bdb0      	pop	{r4, r5, r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	200001c8 	.word	0x200001c8
 8003a80:	20004dd8 	.word	0x20004dd8
 8003a84:	200001cc 	.word	0x200001cc

08003a88 <BSP_LCD_DrawLine>:
  * @param  Y1: the point 1 Y position
  * @param  X2: the point 2 X position
  * @param  Y2: the point 2 Y position
  */
void BSP_LCD_DrawLine(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8003a88:	b590      	push	{r4, r7, lr}
 8003a8a:	b08b      	sub	sp, #44	; 0x2c
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	4604      	mov	r4, r0
 8003a90:	4608      	mov	r0, r1
 8003a92:	4611      	mov	r1, r2
 8003a94:	461a      	mov	r2, r3
 8003a96:	4623      	mov	r3, r4
 8003a98:	80fb      	strh	r3, [r7, #6]
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	80bb      	strh	r3, [r7, #4]
 8003a9e:	460b      	mov	r3, r1
 8003aa0:	807b      	strh	r3, [r7, #2]
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	823b      	strh	r3, [r7, #16]
 8003aaa:	2300      	movs	r3, #0
 8003aac:	81fb      	strh	r3, [r7, #14]
 8003aae:	2300      	movs	r3, #0
 8003ab0:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	847b      	strh	r3, [r7, #34]	; 0x22
 8003aba:	2300      	movs	r3, #0
 8003abc:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 8003abe:	2300      	movs	r3, #0
 8003ac0:	83fb      	strh	r3, [r7, #30]
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	83bb      	strh	r3, [r7, #28]
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	837b      	strh	r3, [r7, #26]
 8003aca:	2300      	movs	r3, #0
 8003acc:	833b      	strh	r3, [r7, #24]
 8003ace:	2300      	movs	r3, #0
 8003ad0:	82fb      	strh	r3, [r7, #22]
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(X2 - X1);        /* The difference between the x's */
 8003ada:	887a      	ldrh	r2, [r7, #2]
 8003adc:	88fb      	ldrh	r3, [r7, #6]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	bfb8      	it	lt
 8003ae4:	425b      	neglt	r3, r3
 8003ae6:	823b      	strh	r3, [r7, #16]
  deltay = ABS(Y2 - Y1);        /* The difference between the y's */
 8003ae8:	883a      	ldrh	r2, [r7, #0]
 8003aea:	88bb      	ldrh	r3, [r7, #4]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	bfb8      	it	lt
 8003af2:	425b      	neglt	r3, r3
 8003af4:	81fb      	strh	r3, [r7, #14]
  x = X1;                       /* Start x off at the first pixel */
 8003af6:	88fb      	ldrh	r3, [r7, #6]
 8003af8:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = Y1;                       /* Start y off at the first pixel */
 8003afa:	88bb      	ldrh	r3, [r7, #4]
 8003afc:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (X2 >= X1)                 /* The x-values are increasing */
 8003afe:	887a      	ldrh	r2, [r7, #2]
 8003b00:	88fb      	ldrh	r3, [r7, #6]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d304      	bcc.n	8003b10 <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 8003b06:	2301      	movs	r3, #1
 8003b08:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	843b      	strh	r3, [r7, #32]
 8003b0e:	e005      	b.n	8003b1c <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8003b10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b14:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8003b16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b1a:	843b      	strh	r3, [r7, #32]
  }
  
  if (Y2 >= Y1)                 /* The y-values are increasing */
 8003b1c:	883a      	ldrh	r2, [r7, #0]
 8003b1e:	88bb      	ldrh	r3, [r7, #4]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d304      	bcc.n	8003b2e <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 8003b24:	2301      	movs	r3, #1
 8003b26:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	83bb      	strh	r3, [r7, #28]
 8003b2c:	e005      	b.n	8003b3a <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8003b2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b32:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8003b34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b38:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8003b3a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003b3e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	db10      	blt.n	8003b68 <BSP_LCD_DrawLine+0xe0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8003b46:	2300      	movs	r3, #0
 8003b48:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8003b4e:	8a3b      	ldrh	r3, [r7, #16]
 8003b50:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8003b52:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003b56:	0fda      	lsrs	r2, r3, #31
 8003b58:	4413      	add	r3, r2
 8003b5a:	105b      	asrs	r3, r3, #1
 8003b5c:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 8003b5e:	89fb      	ldrh	r3, [r7, #14]
 8003b60:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 8003b62:	8a3b      	ldrh	r3, [r7, #16]
 8003b64:	82bb      	strh	r3, [r7, #20]
 8003b66:	e00f      	b.n	8003b88 <BSP_LCD_DrawLine+0x100>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8003b68:	2300      	movs	r3, #0
 8003b6a:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8003b70:	89fb      	ldrh	r3, [r7, #14]
 8003b72:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8003b74:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003b78:	0fda      	lsrs	r2, r3, #31
 8003b7a:	4413      	add	r3, r2
 8003b7c:	105b      	asrs	r3, r3, #1
 8003b7e:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 8003b80:	8a3b      	ldrh	r3, [r7, #16]
 8003b82:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 8003b84:	89fb      	ldrh	r3, [r7, #14]
 8003b86:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8003b88:	2300      	movs	r3, #0
 8003b8a:	827b      	strh	r3, [r7, #18]
 8003b8c:	e037      	b.n	8003bfe <BSP_LCD_DrawLine+0x176>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 8003b8e:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8003b90:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8003b92:	4b20      	ldr	r3, [pc, #128]	; (8003c14 <BSP_LCD_DrawLine+0x18c>)
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	4c20      	ldr	r4, [pc, #128]	; (8003c18 <BSP_LCD_DrawLine+0x190>)
 8003b98:	4613      	mov	r3, r2
 8003b9a:	005b      	lsls	r3, r3, #1
 8003b9c:	4413      	add	r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	4423      	add	r3, r4
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	f000 fb03 	bl	80041b0 <BSP_LCD_DrawPixel>
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 8003baa:	8b3a      	ldrh	r2, [r7, #24]
 8003bac:	8afb      	ldrh	r3, [r7, #22]
 8003bae:	4413      	add	r3, r2
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 8003bb4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003bb8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	db0e      	blt.n	8003bde <BSP_LCD_DrawLine+0x156>
    {
      num -= den;                             /* Calculate the new numerator value */
 8003bc0:	8b3a      	ldrh	r2, [r7, #24]
 8003bc2:	8b7b      	ldrh	r3, [r7, #26]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 8003bca:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003bcc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003bce:	4413      	add	r3, r2
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;                             /* Change the y as appropriate */
 8003bd4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003bd6:	8bfb      	ldrh	r3, [r7, #30]
 8003bd8:	4413      	add	r3, r2
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 8003bde:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003be0:	8c3b      	ldrh	r3, [r7, #32]
 8003be2:	4413      	add	r3, r2
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                               /* Change the y as appropriate */
 8003be8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003bea:	8bbb      	ldrh	r3, [r7, #28]
 8003bec:	4413      	add	r3, r2
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8003bf2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	827b      	strh	r3, [r7, #18]
 8003bfe:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003c02:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	ddc1      	ble.n	8003b8e <BSP_LCD_DrawLine+0x106>
  }
}
 8003c0a:	bf00      	nop
 8003c0c:	bf00      	nop
 8003c0e:	372c      	adds	r7, #44	; 0x2c
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd90      	pop	{r4, r7, pc}
 8003c14:	200001c8 	.word	0x200001c8
 8003c18:	200001cc 	.word	0x200001cc

08003c1c <BSP_LCD_DrawCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003c1c:	b590      	push	{r4, r7, lr}
 8003c1e:	b087      	sub	sp, #28
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	4603      	mov	r3, r0
 8003c24:	80fb      	strh	r3, [r7, #6]
 8003c26:	460b      	mov	r3, r1
 8003c28:	80bb      	strh	r3, [r7, #4]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	807b      	strh	r3, [r7, #2]
  int32_t  d;/* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 8003c2e:	887b      	ldrh	r3, [r7, #2]
 8003c30:	005b      	lsls	r3, r3, #1
 8003c32:	f1c3 0303 	rsb	r3, r3, #3
 8003c36:	617b      	str	r3, [r7, #20]
  curx = 0;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8003c3c:	887b      	ldrh	r3, [r7, #2]
 8003c3e:	60fb      	str	r3, [r7, #12]
  
  while (curx <= cury)
 8003c40:	e0c7      	b.n	8003dd2 <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	b29a      	uxth	r2, r3
 8003c46:	88fb      	ldrh	r3, [r7, #6]
 8003c48:	4413      	add	r3, r2
 8003c4a:	b298      	uxth	r0, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	88ba      	ldrh	r2, [r7, #4]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	b299      	uxth	r1, r3
 8003c56:	4b64      	ldr	r3, [pc, #400]	; (8003de8 <BSP_LCD_DrawCircle+0x1cc>)
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	4c64      	ldr	r4, [pc, #400]	; (8003dec <BSP_LCD_DrawCircle+0x1d0>)
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	005b      	lsls	r3, r3, #1
 8003c60:	4413      	add	r3, r2
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	4423      	add	r3, r4
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	461a      	mov	r2, r3
 8003c6a:	f000 faa1 	bl	80041b0 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	88fa      	ldrh	r2, [r7, #6]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	b298      	uxth	r0, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	88ba      	ldrh	r2, [r7, #4]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	b299      	uxth	r1, r3
 8003c82:	4b59      	ldr	r3, [pc, #356]	; (8003de8 <BSP_LCD_DrawCircle+0x1cc>)
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	4c59      	ldr	r4, [pc, #356]	; (8003dec <BSP_LCD_DrawCircle+0x1d0>)
 8003c88:	4613      	mov	r3, r2
 8003c8a:	005b      	lsls	r3, r3, #1
 8003c8c:	4413      	add	r3, r2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	4423      	add	r3, r4
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	461a      	mov	r2, r3
 8003c96:	f000 fa8b 	bl	80041b0 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	88fb      	ldrh	r3, [r7, #6]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	b298      	uxth	r0, r3
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	88ba      	ldrh	r2, [r7, #4]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	b299      	uxth	r1, r3
 8003cae:	4b4e      	ldr	r3, [pc, #312]	; (8003de8 <BSP_LCD_DrawCircle+0x1cc>)
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	4c4e      	ldr	r4, [pc, #312]	; (8003dec <BSP_LCD_DrawCircle+0x1d0>)
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	005b      	lsls	r3, r3, #1
 8003cb8:	4413      	add	r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	4423      	add	r3, r4
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	f000 fa75 	bl	80041b0 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	88fa      	ldrh	r2, [r7, #6]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	b298      	uxth	r0, r3
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	88ba      	ldrh	r2, [r7, #4]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	b299      	uxth	r1, r3
 8003cda:	4b43      	ldr	r3, [pc, #268]	; (8003de8 <BSP_LCD_DrawCircle+0x1cc>)
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	4c43      	ldr	r4, [pc, #268]	; (8003dec <BSP_LCD_DrawCircle+0x1d0>)
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	005b      	lsls	r3, r3, #1
 8003ce4:	4413      	add	r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	4423      	add	r3, r4
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	461a      	mov	r2, r3
 8003cee:	f000 fa5f 	bl	80041b0 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	b29a      	uxth	r2, r3
 8003cf6:	88fb      	ldrh	r3, [r7, #6]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	b298      	uxth	r0, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	88bb      	ldrh	r3, [r7, #4]
 8003d02:	4413      	add	r3, r2
 8003d04:	b299      	uxth	r1, r3
 8003d06:	4b38      	ldr	r3, [pc, #224]	; (8003de8 <BSP_LCD_DrawCircle+0x1cc>)
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	4c38      	ldr	r4, [pc, #224]	; (8003dec <BSP_LCD_DrawCircle+0x1d0>)
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	005b      	lsls	r3, r3, #1
 8003d10:	4413      	add	r3, r2
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	4423      	add	r3, r4
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	461a      	mov	r2, r3
 8003d1a:	f000 fa49 	bl	80041b0 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	88fa      	ldrh	r2, [r7, #6]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	b298      	uxth	r0, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	b29a      	uxth	r2, r3
 8003d2c:	88bb      	ldrh	r3, [r7, #4]
 8003d2e:	4413      	add	r3, r2
 8003d30:	b299      	uxth	r1, r3
 8003d32:	4b2d      	ldr	r3, [pc, #180]	; (8003de8 <BSP_LCD_DrawCircle+0x1cc>)
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	4c2d      	ldr	r4, [pc, #180]	; (8003dec <BSP_LCD_DrawCircle+0x1d0>)
 8003d38:	4613      	mov	r3, r2
 8003d3a:	005b      	lsls	r3, r3, #1
 8003d3c:	4413      	add	r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	4423      	add	r3, r4
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	461a      	mov	r2, r3
 8003d46:	f000 fa33 	bl	80041b0 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	b29a      	uxth	r2, r3
 8003d4e:	88fb      	ldrh	r3, [r7, #6]
 8003d50:	4413      	add	r3, r2
 8003d52:	b298      	uxth	r0, r3
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	88bb      	ldrh	r3, [r7, #4]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	b299      	uxth	r1, r3
 8003d5e:	4b22      	ldr	r3, [pc, #136]	; (8003de8 <BSP_LCD_DrawCircle+0x1cc>)
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	4c22      	ldr	r4, [pc, #136]	; (8003dec <BSP_LCD_DrawCircle+0x1d0>)
 8003d64:	4613      	mov	r3, r2
 8003d66:	005b      	lsls	r3, r3, #1
 8003d68:	4413      	add	r3, r2
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	4423      	add	r3, r4
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	461a      	mov	r2, r3
 8003d72:	f000 fa1d 	bl	80041b0 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);   
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	88fa      	ldrh	r2, [r7, #6]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	b298      	uxth	r0, r3
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	b29a      	uxth	r2, r3
 8003d84:	88bb      	ldrh	r3, [r7, #4]
 8003d86:	4413      	add	r3, r2
 8003d88:	b299      	uxth	r1, r3
 8003d8a:	4b17      	ldr	r3, [pc, #92]	; (8003de8 <BSP_LCD_DrawCircle+0x1cc>)
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	4c17      	ldr	r4, [pc, #92]	; (8003dec <BSP_LCD_DrawCircle+0x1d0>)
 8003d90:	4613      	mov	r3, r2
 8003d92:	005b      	lsls	r3, r3, #1
 8003d94:	4413      	add	r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	4423      	add	r3, r4
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	f000 fa07 	bl	80041b0 <BSP_LCD_DrawPixel>

    if (d < 0)
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	da06      	bge.n	8003db6 <BSP_LCD_DrawCircle+0x19a>
    { 
      d += (curx << 2) + 6;
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	009a      	lsls	r2, r3, #2
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	4413      	add	r3, r2
 8003db0:	3306      	adds	r3, #6
 8003db2:	617b      	str	r3, [r7, #20]
 8003db4:	e00a      	b.n	8003dcc <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	009a      	lsls	r2, r3, #2
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	330a      	adds	r3, #10
 8003dc4:	617b      	str	r3, [r7, #20]
      cury--;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	3301      	adds	r3, #1
 8003dd0:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	f67f af33 	bls.w	8003c42 <BSP_LCD_DrawCircle+0x26>
  } 
}
 8003ddc:	bf00      	nop
 8003dde:	bf00      	nop
 8003de0:	371c      	adds	r7, #28
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd90      	pop	{r4, r7, pc}
 8003de6:	bf00      	nop
 8003de8:	200001c8 	.word	0x200001c8
 8003dec:	200001cc 	.word	0x200001cc

08003df0 <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003df4:	b086      	sub	sp, #24
 8003df6:	af02      	add	r7, sp, #8
 8003df8:	4604      	mov	r4, r0
 8003dfa:	4608      	mov	r0, r1
 8003dfc:	4611      	mov	r1, r2
 8003dfe:	461a      	mov	r2, r3
 8003e00:	4623      	mov	r3, r4
 8003e02:	80fb      	strh	r3, [r7, #6]
 8003e04:	4603      	mov	r3, r0
 8003e06:	80bb      	strh	r3, [r7, #4]
 8003e08:	460b      	mov	r3, r1
 8003e0a:	807b      	strh	r3, [r7, #2]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 8003e10:	2300      	movs	r3, #0
 8003e12:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003e14:	4b20      	ldr	r3, [pc, #128]	; (8003e98 <BSP_LCD_FillRect+0xa8>)
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	4920      	ldr	r1, [pc, #128]	; (8003e9c <BSP_LCD_FillRect+0xac>)
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	005b      	lsls	r3, r3, #1
 8003e1e:	4413      	add	r3, r2
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	440b      	add	r3, r1
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7ff fc00 	bl	800362c <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003e2c:	4b1a      	ldr	r3, [pc, #104]	; (8003e98 <BSP_LCD_FillRect+0xa8>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a1b      	ldr	r2, [pc, #108]	; (8003ea0 <BSP_LCD_FillRect+0xb0>)
 8003e32:	2134      	movs	r1, #52	; 0x34
 8003e34:	fb01 f303 	mul.w	r3, r1, r3
 8003e38:	4413      	add	r3, r2
 8003e3a:	335c      	adds	r3, #92	; 0x5c
 8003e3c:	681c      	ldr	r4, [r3, #0]
 8003e3e:	f7ff fb69 	bl	8003514 <BSP_LCD_GetXSize>
 8003e42:	4602      	mov	r2, r0
 8003e44:	88bb      	ldrh	r3, [r7, #4]
 8003e46:	fb03 f202 	mul.w	r2, r3, r2
 8003e4a:	88fb      	ldrh	r3, [r7, #6]
 8003e4c:	4413      	add	r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	4423      	add	r3, r4
 8003e52:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8003e54:	4b10      	ldr	r3, [pc, #64]	; (8003e98 <BSP_LCD_FillRect+0xa8>)
 8003e56:	681c      	ldr	r4, [r3, #0]
 8003e58:	68fd      	ldr	r5, [r7, #12]
 8003e5a:	887e      	ldrh	r6, [r7, #2]
 8003e5c:	f8b7 8000 	ldrh.w	r8, [r7]
 8003e60:	f7ff fb58 	bl	8003514 <BSP_LCD_GetXSize>
 8003e64:	4602      	mov	r2, r0
 8003e66:	887b      	ldrh	r3, [r7, #2]
 8003e68:	1ad1      	subs	r1, r2, r3
 8003e6a:	4b0b      	ldr	r3, [pc, #44]	; (8003e98 <BSP_LCD_FillRect+0xa8>)
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	480b      	ldr	r0, [pc, #44]	; (8003e9c <BSP_LCD_FillRect+0xac>)
 8003e70:	4613      	mov	r3, r2
 8003e72:	005b      	lsls	r3, r3, #1
 8003e74:	4413      	add	r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	4403      	add	r3, r0
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	9301      	str	r3, [sp, #4]
 8003e7e:	9100      	str	r1, [sp, #0]
 8003e80:	4643      	mov	r3, r8
 8003e82:	4632      	mov	r2, r6
 8003e84:	4629      	mov	r1, r5
 8003e86:	4620      	mov	r0, r4
 8003e88:	f000 fa72 	bl	8004370 <FillBuffer>
}
 8003e8c:	bf00      	nop
 8003e8e:	3710      	adds	r7, #16
 8003e90:	46bd      	mov	sp, r7
 8003e92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e96:	bf00      	nop
 8003e98:	200001c8 	.word	0x200001c8
 8003e9c:	200001cc 	.word	0x200001cc
 8003ea0:	20004dd8 	.word	0x20004dd8

08003ea4 <BSP_LCD_FillCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b086      	sub	sp, #24
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	4603      	mov	r3, r0
 8003eac:	80fb      	strh	r3, [r7, #6]
 8003eae:	460b      	mov	r3, r1
 8003eb0:	80bb      	strh	r3, [r7, #4]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	807b      	strh	r3, [r7, #2]
  int32_t  d;    /* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 8003eb6:	887b      	ldrh	r3, [r7, #2]
 8003eb8:	005b      	lsls	r3, r3, #1
 8003eba:	f1c3 0303 	rsb	r3, r3, #3
 8003ebe:	617b      	str	r3, [r7, #20]

  curx = 0;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8003ec4:	887b      	ldrh	r3, [r7, #2]
 8003ec6:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003ec8:	4b44      	ldr	r3, [pc, #272]	; (8003fdc <BSP_LCD_FillCircle+0x138>)
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	4944      	ldr	r1, [pc, #272]	; (8003fe0 <BSP_LCD_FillCircle+0x13c>)
 8003ece:	4613      	mov	r3, r2
 8003ed0:	005b      	lsls	r3, r3, #1
 8003ed2:	4413      	add	r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	440b      	add	r3, r1
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7ff fba6 	bl	800362c <BSP_LCD_SetTextColor>

  while (curx <= cury)
 8003ee0:	e061      	b.n	8003fa6 <BSP_LCD_FillCircle+0x102>
  {
    if(cury > 0) 
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d021      	beq.n	8003f2c <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - cury, Ypos + curx, 2*cury);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	88fa      	ldrh	r2, [r7, #6]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	b298      	uxth	r0, r3
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	b29a      	uxth	r2, r3
 8003ef6:	88bb      	ldrh	r3, [r7, #4]
 8003ef8:	4413      	add	r3, r2
 8003efa:	b299      	uxth	r1, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	005b      	lsls	r3, r3, #1
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	461a      	mov	r2, r3
 8003f06:	f7ff fd81 	bl	8003a0c <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos - curx, 2*cury);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	88fa      	ldrh	r2, [r7, #6]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	b298      	uxth	r0, r3
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	88ba      	ldrh	r2, [r7, #4]
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	b299      	uxth	r1, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	005b      	lsls	r3, r3, #1
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	461a      	mov	r2, r3
 8003f28:	f7ff fd70 	bl	8003a0c <BSP_LCD_DrawHLine>
    }

    if(curx > 0) 
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d021      	beq.n	8003f76 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - curx, Ypos - cury, 2*curx);
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	88fa      	ldrh	r2, [r7, #6]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	b298      	uxth	r0, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	88ba      	ldrh	r2, [r7, #4]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	b299      	uxth	r1, r3
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	005b      	lsls	r3, r3, #1
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	461a      	mov	r2, r3
 8003f50:	f7ff fd5c 	bl	8003a0c <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos + cury, 2*curx);
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	88fa      	ldrh	r2, [r7, #6]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	b298      	uxth	r0, r3
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	88bb      	ldrh	r3, [r7, #4]
 8003f64:	4413      	add	r3, r2
 8003f66:	b299      	uxth	r1, r3
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	005b      	lsls	r3, r3, #1
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	461a      	mov	r2, r3
 8003f72:	f7ff fd4b 	bl	8003a0c <BSP_LCD_DrawHLine>
    }
    if (d < 0)
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	da06      	bge.n	8003f8a <BSP_LCD_FillCircle+0xe6>
    { 
      d += (curx << 2) + 6;
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	009a      	lsls	r2, r3, #2
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	4413      	add	r3, r2
 8003f84:	3306      	adds	r3, #6
 8003f86:	617b      	str	r3, [r7, #20]
 8003f88:	e00a      	b.n	8003fa0 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8003f8a:	693a      	ldr	r2, [r7, #16]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	009a      	lsls	r2, r3, #2
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	4413      	add	r3, r2
 8003f96:	330a      	adds	r3, #10
 8003f98:	617b      	str	r3, [r7, #20]
      cury--;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8003fa6:	693a      	ldr	r2, [r7, #16]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d999      	bls.n	8003ee2 <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003fae:	4b0b      	ldr	r3, [pc, #44]	; (8003fdc <BSP_LCD_FillCircle+0x138>)
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	490b      	ldr	r1, [pc, #44]	; (8003fe0 <BSP_LCD_FillCircle+0x13c>)
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	005b      	lsls	r3, r3, #1
 8003fb8:	4413      	add	r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	440b      	add	r3, r1
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7ff fb33 	bl	800362c <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8003fc6:	887a      	ldrh	r2, [r7, #2]
 8003fc8:	88b9      	ldrh	r1, [r7, #4]
 8003fca:	88fb      	ldrh	r3, [r7, #6]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f7ff fe25 	bl	8003c1c <BSP_LCD_DrawCircle>
}
 8003fd2:	bf00      	nop
 8003fd4:	3718      	adds	r7, #24
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	200001c8 	.word	0x200001c8
 8003fe0:	200001cc 	.word	0x200001cc

08003fe4 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8003fe8:	4b05      	ldr	r3, [pc, #20]	; (8004000 <BSP_LCD_DisplayOn+0x1c>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d003      	beq.n	8003ffa <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8003ff2:	4b03      	ldr	r3, [pc, #12]	; (8004000 <BSP_LCD_DisplayOn+0x1c>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	4798      	blx	r3
  }
}
 8003ffa:	bf00      	nop
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	20004e80 	.word	0x20004e80

08004004 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b08e      	sub	sp, #56	; 0x38
 8004008:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800400a:	2300      	movs	r3, #0
 800400c:	623b      	str	r3, [r7, #32]
 800400e:	4b61      	ldr	r3, [pc, #388]	; (8004194 <BSP_LCD_MspInit+0x190>)
 8004010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004012:	4a60      	ldr	r2, [pc, #384]	; (8004194 <BSP_LCD_MspInit+0x190>)
 8004014:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004018:	6453      	str	r3, [r2, #68]	; 0x44
 800401a:	4b5e      	ldr	r3, [pc, #376]	; (8004194 <BSP_LCD_MspInit+0x190>)
 800401c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800401e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004022:	623b      	str	r3, [r7, #32]
 8004024:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8004026:	2300      	movs	r3, #0
 8004028:	61fb      	str	r3, [r7, #28]
 800402a:	4b5a      	ldr	r3, [pc, #360]	; (8004194 <BSP_LCD_MspInit+0x190>)
 800402c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402e:	4a59      	ldr	r2, [pc, #356]	; (8004194 <BSP_LCD_MspInit+0x190>)
 8004030:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004034:	6313      	str	r3, [r2, #48]	; 0x30
 8004036:	4b57      	ldr	r3, [pc, #348]	; (8004194 <BSP_LCD_MspInit+0x190>)
 8004038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800403e:	61fb      	str	r3, [r7, #28]
 8004040:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004042:	2300      	movs	r3, #0
 8004044:	61bb      	str	r3, [r7, #24]
 8004046:	4b53      	ldr	r3, [pc, #332]	; (8004194 <BSP_LCD_MspInit+0x190>)
 8004048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404a:	4a52      	ldr	r2, [pc, #328]	; (8004194 <BSP_LCD_MspInit+0x190>)
 800404c:	f043 0301 	orr.w	r3, r3, #1
 8004050:	6313      	str	r3, [r2, #48]	; 0x30
 8004052:	4b50      	ldr	r3, [pc, #320]	; (8004194 <BSP_LCD_MspInit+0x190>)
 8004054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	61bb      	str	r3, [r7, #24]
 800405c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800405e:	2300      	movs	r3, #0
 8004060:	617b      	str	r3, [r7, #20]
 8004062:	4b4c      	ldr	r3, [pc, #304]	; (8004194 <BSP_LCD_MspInit+0x190>)
 8004064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004066:	4a4b      	ldr	r2, [pc, #300]	; (8004194 <BSP_LCD_MspInit+0x190>)
 8004068:	f043 0302 	orr.w	r3, r3, #2
 800406c:	6313      	str	r3, [r2, #48]	; 0x30
 800406e:	4b49      	ldr	r3, [pc, #292]	; (8004194 <BSP_LCD_MspInit+0x190>)
 8004070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004072:	f003 0302 	and.w	r3, r3, #2
 8004076:	617b      	str	r3, [r7, #20]
 8004078:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800407a:	2300      	movs	r3, #0
 800407c:	613b      	str	r3, [r7, #16]
 800407e:	4b45      	ldr	r3, [pc, #276]	; (8004194 <BSP_LCD_MspInit+0x190>)
 8004080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004082:	4a44      	ldr	r2, [pc, #272]	; (8004194 <BSP_LCD_MspInit+0x190>)
 8004084:	f043 0304 	orr.w	r3, r3, #4
 8004088:	6313      	str	r3, [r2, #48]	; 0x30
 800408a:	4b42      	ldr	r3, [pc, #264]	; (8004194 <BSP_LCD_MspInit+0x190>)
 800408c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408e:	f003 0304 	and.w	r3, r3, #4
 8004092:	613b      	str	r3, [r7, #16]
 8004094:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004096:	2300      	movs	r3, #0
 8004098:	60fb      	str	r3, [r7, #12]
 800409a:	4b3e      	ldr	r3, [pc, #248]	; (8004194 <BSP_LCD_MspInit+0x190>)
 800409c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409e:	4a3d      	ldr	r2, [pc, #244]	; (8004194 <BSP_LCD_MspInit+0x190>)
 80040a0:	f043 0308 	orr.w	r3, r3, #8
 80040a4:	6313      	str	r3, [r2, #48]	; 0x30
 80040a6:	4b3b      	ldr	r3, [pc, #236]	; (8004194 <BSP_LCD_MspInit+0x190>)
 80040a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040aa:	f003 0308 	and.w	r3, r3, #8
 80040ae:	60fb      	str	r3, [r7, #12]
 80040b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80040b2:	2300      	movs	r3, #0
 80040b4:	60bb      	str	r3, [r7, #8]
 80040b6:	4b37      	ldr	r3, [pc, #220]	; (8004194 <BSP_LCD_MspInit+0x190>)
 80040b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ba:	4a36      	ldr	r2, [pc, #216]	; (8004194 <BSP_LCD_MspInit+0x190>)
 80040bc:	f043 0320 	orr.w	r3, r3, #32
 80040c0:	6313      	str	r3, [r2, #48]	; 0x30
 80040c2:	4b34      	ldr	r3, [pc, #208]	; (8004194 <BSP_LCD_MspInit+0x190>)
 80040c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c6:	f003 0320 	and.w	r3, r3, #32
 80040ca:	60bb      	str	r3, [r7, #8]
 80040cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80040ce:	2300      	movs	r3, #0
 80040d0:	607b      	str	r3, [r7, #4]
 80040d2:	4b30      	ldr	r3, [pc, #192]	; (8004194 <BSP_LCD_MspInit+0x190>)
 80040d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d6:	4a2f      	ldr	r2, [pc, #188]	; (8004194 <BSP_LCD_MspInit+0x190>)
 80040d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040dc:	6313      	str	r3, [r2, #48]	; 0x30
 80040de:	4b2d      	ldr	r3, [pc, #180]	; (8004194 <BSP_LCD_MspInit+0x190>)
 80040e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e6:	607b      	str	r3, [r7, #4]
 80040e8:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80040ea:	f641 0358 	movw	r3, #6232	; 0x1858
 80040ee:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80040f0:	2302      	movs	r3, #2
 80040f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80040f4:	2300      	movs	r3, #0
 80040f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80040f8:	2302      	movs	r3, #2
 80040fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80040fc:	230e      	movs	r3, #14
 80040fe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004100:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004104:	4619      	mov	r1, r3
 8004106:	4824      	ldr	r0, [pc, #144]	; (8004198 <BSP_LCD_MspInit+0x194>)
 8004108:	f001 f8d8 	bl	80052bc <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 800410c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8004110:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004112:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004116:	4619      	mov	r1, r3
 8004118:	4820      	ldr	r0, [pc, #128]	; (800419c <BSP_LCD_MspInit+0x198>)
 800411a:	f001 f8cf 	bl	80052bc <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 800411e:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8004122:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004124:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004128:	4619      	mov	r1, r3
 800412a:	481d      	ldr	r0, [pc, #116]	; (80041a0 <BSP_LCD_MspInit+0x19c>)
 800412c:	f001 f8c6 	bl	80052bc <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8004130:	2348      	movs	r3, #72	; 0x48
 8004132:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8004134:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004138:	4619      	mov	r1, r3
 800413a:	481a      	ldr	r0, [pc, #104]	; (80041a4 <BSP_LCD_MspInit+0x1a0>)
 800413c:	f001 f8be 	bl	80052bc <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8004140:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004144:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8004146:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800414a:	4619      	mov	r1, r3
 800414c:	4816      	ldr	r0, [pc, #88]	; (80041a8 <BSP_LCD_MspInit+0x1a4>)
 800414e:	f001 f8b5 	bl	80052bc <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8004152:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8004156:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8004158:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800415c:	4619      	mov	r1, r3
 800415e:	4813      	ldr	r0, [pc, #76]	; (80041ac <BSP_LCD_MspInit+0x1a8>)
 8004160:	f001 f8ac 	bl	80052bc <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8004164:	2303      	movs	r3, #3
 8004166:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8004168:	2309      	movs	r3, #9
 800416a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800416c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004170:	4619      	mov	r1, r3
 8004172:	480a      	ldr	r0, [pc, #40]	; (800419c <BSP_LCD_MspInit+0x198>)
 8004174:	f001 f8a2 	bl	80052bc <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8004178:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800417c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800417e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004182:	4619      	mov	r1, r3
 8004184:	4809      	ldr	r0, [pc, #36]	; (80041ac <BSP_LCD_MspInit+0x1a8>)
 8004186:	f001 f899 	bl	80052bc <HAL_GPIO_Init>
}
 800418a:	bf00      	nop
 800418c:	3738      	adds	r7, #56	; 0x38
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	40023800 	.word	0x40023800
 8004198:	40020000 	.word	0x40020000
 800419c:	40020400 	.word	0x40020400
 80041a0:	40020800 	.word	0x40020800
 80041a4:	40020c00 	.word	0x40020c00
 80041a8:	40021400 	.word	0x40021400
 80041ac:	40021800 	.word	0x40021800

080041b0 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80041b0:	b5b0      	push	{r4, r5, r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	4603      	mov	r3, r0
 80041b8:	603a      	str	r2, [r7, #0]
 80041ba:	80fb      	strh	r3, [r7, #6]
 80041bc:	460b      	mov	r3, r1
 80041be:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80041c0:	4b0c      	ldr	r3, [pc, #48]	; (80041f4 <BSP_LCD_DrawPixel+0x44>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a0c      	ldr	r2, [pc, #48]	; (80041f8 <BSP_LCD_DrawPixel+0x48>)
 80041c6:	2134      	movs	r1, #52	; 0x34
 80041c8:	fb01 f303 	mul.w	r3, r1, r3
 80041cc:	4413      	add	r3, r2
 80041ce:	335c      	adds	r3, #92	; 0x5c
 80041d0:	681c      	ldr	r4, [r3, #0]
 80041d2:	88bd      	ldrh	r5, [r7, #4]
 80041d4:	f7ff f99e 	bl	8003514 <BSP_LCD_GetXSize>
 80041d8:	4603      	mov	r3, r0
 80041da:	fb03 f205 	mul.w	r2, r3, r5
 80041de:	88fb      	ldrh	r3, [r7, #6]
 80041e0:	4413      	add	r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	4423      	add	r3, r4
 80041e6:	461a      	mov	r2, r3
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	6013      	str	r3, [r2, #0]
}
 80041ec:	bf00      	nop
 80041ee:	3708      	adds	r7, #8
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bdb0      	pop	{r4, r5, r7, pc}
 80041f4:	200001c8 	.word	0x200001c8
 80041f8:	20004dd8 	.word	0x20004dd8

080041fc <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b088      	sub	sp, #32
 8004200:	af00      	add	r7, sp, #0
 8004202:	4603      	mov	r3, r0
 8004204:	603a      	str	r2, [r7, #0]
 8004206:	80fb      	strh	r3, [r7, #6]
 8004208:	460b      	mov	r3, r1
 800420a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 800420c:	2300      	movs	r3, #0
 800420e:	61fb      	str	r3, [r7, #28]
 8004210:	2300      	movs	r3, #0
 8004212:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8004214:	2300      	movs	r3, #0
 8004216:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8004218:	4b53      	ldr	r3, [pc, #332]	; (8004368 <DrawChar+0x16c>)
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	4953      	ldr	r1, [pc, #332]	; (800436c <DrawChar+0x170>)
 800421e:	4613      	mov	r3, r2
 8004220:	005b      	lsls	r3, r3, #1
 8004222:	4413      	add	r3, r2
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	440b      	add	r3, r1
 8004228:	3308      	adds	r3, #8
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	88db      	ldrh	r3, [r3, #6]
 800422e:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8004230:	4b4d      	ldr	r3, [pc, #308]	; (8004368 <DrawChar+0x16c>)
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	494d      	ldr	r1, [pc, #308]	; (800436c <DrawChar+0x170>)
 8004236:	4613      	mov	r3, r2
 8004238:	005b      	lsls	r3, r3, #1
 800423a:	4413      	add	r3, r2
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	440b      	add	r3, r1
 8004240:	3308      	adds	r3, #8
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	889b      	ldrh	r3, [r3, #4]
 8004246:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8004248:	8a3b      	ldrh	r3, [r7, #16]
 800424a:	3307      	adds	r3, #7
 800424c:	2b00      	cmp	r3, #0
 800424e:	da00      	bge.n	8004252 <DrawChar+0x56>
 8004250:	3307      	adds	r3, #7
 8004252:	10db      	asrs	r3, r3, #3
 8004254:	b2db      	uxtb	r3, r3
 8004256:	00db      	lsls	r3, r3, #3
 8004258:	b2da      	uxtb	r2, r3
 800425a:	8a3b      	ldrh	r3, [r7, #16]
 800425c:	b2db      	uxtb	r3, r3
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8004262:	2300      	movs	r3, #0
 8004264:	61fb      	str	r3, [r7, #28]
 8004266:	e076      	b.n	8004356 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8004268:	8a3b      	ldrh	r3, [r7, #16]
 800426a:	3307      	adds	r3, #7
 800426c:	2b00      	cmp	r3, #0
 800426e:	da00      	bge.n	8004272 <DrawChar+0x76>
 8004270:	3307      	adds	r3, #7
 8004272:	10db      	asrs	r3, r3, #3
 8004274:	461a      	mov	r2, r3
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	fb03 f302 	mul.w	r3, r3, r2
 800427c:	683a      	ldr	r2, [r7, #0]
 800427e:	4413      	add	r3, r2
 8004280:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8004282:	8a3b      	ldrh	r3, [r7, #16]
 8004284:	3307      	adds	r3, #7
 8004286:	2b00      	cmp	r3, #0
 8004288:	da00      	bge.n	800428c <DrawChar+0x90>
 800428a:	3307      	adds	r3, #7
 800428c:	10db      	asrs	r3, r3, #3
 800428e:	2b01      	cmp	r3, #1
 8004290:	d002      	beq.n	8004298 <DrawChar+0x9c>
 8004292:	2b02      	cmp	r3, #2
 8004294:	d004      	beq.n	80042a0 <DrawChar+0xa4>
 8004296:	e00c      	b.n	80042b2 <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	617b      	str	r3, [r7, #20]
      break;
 800429e:	e016      	b.n	80042ce <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	021b      	lsls	r3, r3, #8
 80042a6:	68ba      	ldr	r2, [r7, #8]
 80042a8:	3201      	adds	r2, #1
 80042aa:	7812      	ldrb	r2, [r2, #0]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	617b      	str	r3, [r7, #20]
      break;
 80042b0:	e00d      	b.n	80042ce <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	041a      	lsls	r2, r3, #16
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	3301      	adds	r3, #1
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	021b      	lsls	r3, r3, #8
 80042c0:	4313      	orrs	r3, r2
 80042c2:	68ba      	ldr	r2, [r7, #8]
 80042c4:	3202      	adds	r2, #2
 80042c6:	7812      	ldrb	r2, [r2, #0]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	617b      	str	r3, [r7, #20]
      break;
 80042cc:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 80042ce:	2300      	movs	r3, #0
 80042d0:	61bb      	str	r3, [r7, #24]
 80042d2:	e036      	b.n	8004342 <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 80042d4:	8a3a      	ldrh	r2, [r7, #16]
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	1ad2      	subs	r2, r2, r3
 80042da:	7bfb      	ldrb	r3, [r7, #15]
 80042dc:	4413      	add	r3, r2
 80042de:	3b01      	subs	r3, #1
 80042e0:	2201      	movs	r2, #1
 80042e2:	fa02 f303 	lsl.w	r3, r2, r3
 80042e6:	461a      	mov	r2, r3
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	4013      	ands	r3, r2
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d012      	beq.n	8004316 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	b29a      	uxth	r2, r3
 80042f4:	88fb      	ldrh	r3, [r7, #6]
 80042f6:	4413      	add	r3, r2
 80042f8:	b298      	uxth	r0, r3
 80042fa:	4b1b      	ldr	r3, [pc, #108]	; (8004368 <DrawChar+0x16c>)
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	491b      	ldr	r1, [pc, #108]	; (800436c <DrawChar+0x170>)
 8004300:	4613      	mov	r3, r2
 8004302:	005b      	lsls	r3, r3, #1
 8004304:	4413      	add	r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	440b      	add	r3, r1
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	88bb      	ldrh	r3, [r7, #4]
 800430e:	4619      	mov	r1, r3
 8004310:	f7ff ff4e 	bl	80041b0 <BSP_LCD_DrawPixel>
 8004314:	e012      	b.n	800433c <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	b29a      	uxth	r2, r3
 800431a:	88fb      	ldrh	r3, [r7, #6]
 800431c:	4413      	add	r3, r2
 800431e:	b298      	uxth	r0, r3
 8004320:	4b11      	ldr	r3, [pc, #68]	; (8004368 <DrawChar+0x16c>)
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	4911      	ldr	r1, [pc, #68]	; (800436c <DrawChar+0x170>)
 8004326:	4613      	mov	r3, r2
 8004328:	005b      	lsls	r3, r3, #1
 800432a:	4413      	add	r3, r2
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	440b      	add	r3, r1
 8004330:	3304      	adds	r3, #4
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	88bb      	ldrh	r3, [r7, #4]
 8004336:	4619      	mov	r1, r3
 8004338:	f7ff ff3a 	bl	80041b0 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	3301      	adds	r3, #1
 8004340:	61bb      	str	r3, [r7, #24]
 8004342:	8a3b      	ldrh	r3, [r7, #16]
 8004344:	69ba      	ldr	r2, [r7, #24]
 8004346:	429a      	cmp	r2, r3
 8004348:	d3c4      	bcc.n	80042d4 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 800434a:	88bb      	ldrh	r3, [r7, #4]
 800434c:	3301      	adds	r3, #1
 800434e:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	3301      	adds	r3, #1
 8004354:	61fb      	str	r3, [r7, #28]
 8004356:	8a7b      	ldrh	r3, [r7, #18]
 8004358:	69fa      	ldr	r2, [r7, #28]
 800435a:	429a      	cmp	r2, r3
 800435c:	d384      	bcc.n	8004268 <DrawChar+0x6c>
  }
}
 800435e:	bf00      	nop
 8004360:	bf00      	nop
 8004362:	3720      	adds	r7, #32
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}
 8004368:	200001c8 	.word	0x200001c8
 800436c:	200001cc 	.word	0x200001cc

08004370 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b086      	sub	sp, #24
 8004374:	af02      	add	r7, sp, #8
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	607a      	str	r2, [r7, #4]
 800437c:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 800437e:	4b16      	ldr	r3, [pc, #88]	; (80043d8 <FillBuffer+0x68>)
 8004380:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004384:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8004386:	4b14      	ldr	r3, [pc, #80]	; (80043d8 <FillBuffer+0x68>)
 8004388:	2200      	movs	r2, #0
 800438a:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 800438c:	4a12      	ldr	r2, [pc, #72]	; (80043d8 <FillBuffer+0x68>)
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8004392:	4b11      	ldr	r3, [pc, #68]	; (80043d8 <FillBuffer+0x68>)
 8004394:	4a11      	ldr	r2, [pc, #68]	; (80043dc <FillBuffer+0x6c>)
 8004396:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8004398:	480f      	ldr	r0, [pc, #60]	; (80043d8 <FillBuffer+0x68>)
 800439a:	f000 fb33 	bl	8004a04 <HAL_DMA2D_Init>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d115      	bne.n	80043d0 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 80043a4:	68f9      	ldr	r1, [r7, #12]
 80043a6:	480c      	ldr	r0, [pc, #48]	; (80043d8 <FillBuffer+0x68>)
 80043a8:	f000 fc94 	bl	8004cd4 <HAL_DMA2D_ConfigLayer>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d10e      	bne.n	80043d0 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80043b2:	68ba      	ldr	r2, [r7, #8]
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	9300      	str	r3, [sp, #0]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	69f9      	ldr	r1, [r7, #28]
 80043bc:	4806      	ldr	r0, [pc, #24]	; (80043d8 <FillBuffer+0x68>)
 80043be:	f000 fb74 	bl	8004aaa <HAL_DMA2D_Start>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d103      	bne.n	80043d0 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 80043c8:	210a      	movs	r1, #10
 80043ca:	4803      	ldr	r0, [pc, #12]	; (80043d8 <FillBuffer+0x68>)
 80043cc:	f000 fb98 	bl	8004b00 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80043d0:	bf00      	nop
 80043d2:	3710      	adds	r7, #16
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	20000158 	.word	0x20000158
 80043dc:	4002b000 	.word	0x4002b000

080043e0 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 80043e4:	4b29      	ldr	r3, [pc, #164]	; (800448c <BSP_SDRAM_Init+0xac>)
 80043e6:	4a2a      	ldr	r2, [pc, #168]	; (8004490 <BSP_SDRAM_Init+0xb0>)
 80043e8:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 80043ea:	4b2a      	ldr	r3, [pc, #168]	; (8004494 <BSP_SDRAM_Init+0xb4>)
 80043ec:	2202      	movs	r2, #2
 80043ee:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 80043f0:	4b28      	ldr	r3, [pc, #160]	; (8004494 <BSP_SDRAM_Init+0xb4>)
 80043f2:	2207      	movs	r2, #7
 80043f4:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 80043f6:	4b27      	ldr	r3, [pc, #156]	; (8004494 <BSP_SDRAM_Init+0xb4>)
 80043f8:	2204      	movs	r2, #4
 80043fa:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 80043fc:	4b25      	ldr	r3, [pc, #148]	; (8004494 <BSP_SDRAM_Init+0xb4>)
 80043fe:	2207      	movs	r2, #7
 8004400:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8004402:	4b24      	ldr	r3, [pc, #144]	; (8004494 <BSP_SDRAM_Init+0xb4>)
 8004404:	2202      	movs	r2, #2
 8004406:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8004408:	4b22      	ldr	r3, [pc, #136]	; (8004494 <BSP_SDRAM_Init+0xb4>)
 800440a:	2202      	movs	r2, #2
 800440c:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 800440e:	4b21      	ldr	r3, [pc, #132]	; (8004494 <BSP_SDRAM_Init+0xb4>)
 8004410:	2202      	movs	r2, #2
 8004412:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8004414:	4b1d      	ldr	r3, [pc, #116]	; (800448c <BSP_SDRAM_Init+0xac>)
 8004416:	2201      	movs	r2, #1
 8004418:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800441a:	4b1c      	ldr	r3, [pc, #112]	; (800448c <BSP_SDRAM_Init+0xac>)
 800441c:	2200      	movs	r2, #0
 800441e:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8004420:	4b1a      	ldr	r3, [pc, #104]	; (800448c <BSP_SDRAM_Init+0xac>)
 8004422:	2204      	movs	r2, #4
 8004424:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8004426:	4b19      	ldr	r3, [pc, #100]	; (800448c <BSP_SDRAM_Init+0xac>)
 8004428:	2210      	movs	r2, #16
 800442a:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800442c:	4b17      	ldr	r3, [pc, #92]	; (800448c <BSP_SDRAM_Init+0xac>)
 800442e:	2240      	movs	r2, #64	; 0x40
 8004430:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8004432:	4b16      	ldr	r3, [pc, #88]	; (800448c <BSP_SDRAM_Init+0xac>)
 8004434:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8004438:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800443a:	4b14      	ldr	r3, [pc, #80]	; (800448c <BSP_SDRAM_Init+0xac>)
 800443c:	2200      	movs	r2, #0
 800443e:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8004440:	4b12      	ldr	r3, [pc, #72]	; (800448c <BSP_SDRAM_Init+0xac>)
 8004442:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004446:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8004448:	4b10      	ldr	r3, [pc, #64]	; (800448c <BSP_SDRAM_Init+0xac>)
 800444a:	2200      	movs	r2, #0
 800444c:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 800444e:	4b0f      	ldr	r3, [pc, #60]	; (800448c <BSP_SDRAM_Init+0xac>)
 8004450:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004454:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8004456:	2100      	movs	r1, #0
 8004458:	480c      	ldr	r0, [pc, #48]	; (800448c <BSP_SDRAM_Init+0xac>)
 800445a:	f000 f87f 	bl	800455c <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 800445e:	490d      	ldr	r1, [pc, #52]	; (8004494 <BSP_SDRAM_Init+0xb4>)
 8004460:	480a      	ldr	r0, [pc, #40]	; (800448c <BSP_SDRAM_Init+0xac>)
 8004462:	f002 faaf 	bl	80069c4 <HAL_SDRAM_Init>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d003      	beq.n	8004474 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 800446c:	4b0a      	ldr	r3, [pc, #40]	; (8004498 <BSP_SDRAM_Init+0xb8>)
 800446e:	2201      	movs	r2, #1
 8004470:	701a      	strb	r2, [r3, #0]
 8004472:	e002      	b.n	800447a <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8004474:	4b08      	ldr	r3, [pc, #32]	; (8004498 <BSP_SDRAM_Init+0xb8>)
 8004476:	2200      	movs	r2, #0
 8004478:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800447a:	f240 506a 	movw	r0, #1386	; 0x56a
 800447e:	f000 f80d 	bl	800449c <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8004482:	4b05      	ldr	r3, [pc, #20]	; (8004498 <BSP_SDRAM_Init+0xb8>)
 8004484:	781b      	ldrb	r3, [r3, #0]
}
 8004486:	4618      	mov	r0, r3
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	200001e4 	.word	0x200001e4
 8004490:	a0000140 	.word	0xa0000140
 8004494:	20000218 	.word	0x20000218
 8004498:	20000060 	.word	0x20000060

0800449c <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 80044a4:	2300      	movs	r3, #0
 80044a6:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 80044a8:	4b2a      	ldr	r3, [pc, #168]	; (8004554 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80044aa:	2201      	movs	r2, #1
 80044ac:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80044ae:	4b29      	ldr	r3, [pc, #164]	; (8004554 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80044b0:	2208      	movs	r2, #8
 80044b2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80044b4:	4b27      	ldr	r3, [pc, #156]	; (8004554 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80044b6:	2201      	movs	r2, #1
 80044b8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80044ba:	4b26      	ldr	r3, [pc, #152]	; (8004554 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80044bc:	2200      	movs	r2, #0
 80044be:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80044c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044c4:	4923      	ldr	r1, [pc, #140]	; (8004554 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80044c6:	4824      	ldr	r0, [pc, #144]	; (8004558 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80044c8:	f002 faba 	bl	8006a40 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80044cc:	2001      	movs	r0, #1
 80044ce:	f000 f993 	bl	80047f8 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 80044d2:	4b20      	ldr	r3, [pc, #128]	; (8004554 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80044d4:	2202      	movs	r2, #2
 80044d6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80044d8:	4b1e      	ldr	r3, [pc, #120]	; (8004554 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80044da:	2208      	movs	r2, #8
 80044dc:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80044de:	4b1d      	ldr	r3, [pc, #116]	; (8004554 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80044e0:	2201      	movs	r2, #1
 80044e2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80044e4:	4b1b      	ldr	r3, [pc, #108]	; (8004554 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80044e6:	2200      	movs	r2, #0
 80044e8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 80044ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044ee:	4919      	ldr	r1, [pc, #100]	; (8004554 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80044f0:	4819      	ldr	r0, [pc, #100]	; (8004558 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80044f2:	f002 faa5 	bl	8006a40 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80044f6:	4b17      	ldr	r3, [pc, #92]	; (8004554 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80044f8:	2203      	movs	r2, #3
 80044fa:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80044fc:	4b15      	ldr	r3, [pc, #84]	; (8004554 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80044fe:	2208      	movs	r2, #8
 8004500:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8004502:	4b14      	ldr	r3, [pc, #80]	; (8004554 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004504:	2204      	movs	r2, #4
 8004506:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8004508:	4b12      	ldr	r3, [pc, #72]	; (8004554 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800450a:	2200      	movs	r2, #0
 800450c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800450e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004512:	4910      	ldr	r1, [pc, #64]	; (8004554 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004514:	4810      	ldr	r0, [pc, #64]	; (8004558 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004516:	f002 fa93 	bl	8006a40 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 800451a:	f44f 730c 	mov.w	r3, #560	; 0x230
 800451e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8004520:	4b0c      	ldr	r3, [pc, #48]	; (8004554 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004522:	2204      	movs	r2, #4
 8004524:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004526:	4b0b      	ldr	r3, [pc, #44]	; (8004554 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004528:	2208      	movs	r2, #8
 800452a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800452c:	4b09      	ldr	r3, [pc, #36]	; (8004554 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800452e:	2201      	movs	r2, #1
 8004530:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	4a07      	ldr	r2, [pc, #28]	; (8004554 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004536:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004538:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800453c:	4905      	ldr	r1, [pc, #20]	; (8004554 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800453e:	4806      	ldr	r0, [pc, #24]	; (8004558 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004540:	f002 fa7e 	bl	8006a40 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8004544:	6879      	ldr	r1, [r7, #4]
 8004546:	4804      	ldr	r0, [pc, #16]	; (8004558 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004548:	f002 faa5 	bl	8006a96 <HAL_SDRAM_ProgramRefreshRate>
}
 800454c:	bf00      	nop
 800454e:	3710      	adds	r7, #16
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	20000234 	.word	0x20000234
 8004558:	200001e4 	.word	0x200001e4

0800455c <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b090      	sub	sp, #64	; 0x40
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2b00      	cmp	r3, #0
 800456a:	f000 80ec 	beq.w	8004746 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800456e:	2300      	movs	r3, #0
 8004570:	62bb      	str	r3, [r7, #40]	; 0x28
 8004572:	4b77      	ldr	r3, [pc, #476]	; (8004750 <BSP_SDRAM_MspInit+0x1f4>)
 8004574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004576:	4a76      	ldr	r2, [pc, #472]	; (8004750 <BSP_SDRAM_MspInit+0x1f4>)
 8004578:	f043 0301 	orr.w	r3, r3, #1
 800457c:	6393      	str	r3, [r2, #56]	; 0x38
 800457e:	4b74      	ldr	r3, [pc, #464]	; (8004750 <BSP_SDRAM_MspInit+0x1f4>)
 8004580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	62bb      	str	r3, [r7, #40]	; 0x28
 8004588:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800458a:	2300      	movs	r3, #0
 800458c:	627b      	str	r3, [r7, #36]	; 0x24
 800458e:	4b70      	ldr	r3, [pc, #448]	; (8004750 <BSP_SDRAM_MspInit+0x1f4>)
 8004590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004592:	4a6f      	ldr	r2, [pc, #444]	; (8004750 <BSP_SDRAM_MspInit+0x1f4>)
 8004594:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004598:	6313      	str	r3, [r2, #48]	; 0x30
 800459a:	4b6d      	ldr	r3, [pc, #436]	; (8004750 <BSP_SDRAM_MspInit+0x1f4>)
 800459c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045a2:	627b      	str	r3, [r7, #36]	; 0x24
 80045a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80045a6:	2300      	movs	r3, #0
 80045a8:	623b      	str	r3, [r7, #32]
 80045aa:	4b69      	ldr	r3, [pc, #420]	; (8004750 <BSP_SDRAM_MspInit+0x1f4>)
 80045ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ae:	4a68      	ldr	r2, [pc, #416]	; (8004750 <BSP_SDRAM_MspInit+0x1f4>)
 80045b0:	f043 0302 	orr.w	r3, r3, #2
 80045b4:	6313      	str	r3, [r2, #48]	; 0x30
 80045b6:	4b66      	ldr	r3, [pc, #408]	; (8004750 <BSP_SDRAM_MspInit+0x1f4>)
 80045b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ba:	f003 0302 	and.w	r3, r3, #2
 80045be:	623b      	str	r3, [r7, #32]
 80045c0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80045c2:	2300      	movs	r3, #0
 80045c4:	61fb      	str	r3, [r7, #28]
 80045c6:	4b62      	ldr	r3, [pc, #392]	; (8004750 <BSP_SDRAM_MspInit+0x1f4>)
 80045c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ca:	4a61      	ldr	r2, [pc, #388]	; (8004750 <BSP_SDRAM_MspInit+0x1f4>)
 80045cc:	f043 0304 	orr.w	r3, r3, #4
 80045d0:	6313      	str	r3, [r2, #48]	; 0x30
 80045d2:	4b5f      	ldr	r3, [pc, #380]	; (8004750 <BSP_SDRAM_MspInit+0x1f4>)
 80045d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d6:	f003 0304 	and.w	r3, r3, #4
 80045da:	61fb      	str	r3, [r7, #28]
 80045dc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80045de:	2300      	movs	r3, #0
 80045e0:	61bb      	str	r3, [r7, #24]
 80045e2:	4b5b      	ldr	r3, [pc, #364]	; (8004750 <BSP_SDRAM_MspInit+0x1f4>)
 80045e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e6:	4a5a      	ldr	r2, [pc, #360]	; (8004750 <BSP_SDRAM_MspInit+0x1f4>)
 80045e8:	f043 0308 	orr.w	r3, r3, #8
 80045ec:	6313      	str	r3, [r2, #48]	; 0x30
 80045ee:	4b58      	ldr	r3, [pc, #352]	; (8004750 <BSP_SDRAM_MspInit+0x1f4>)
 80045f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f2:	f003 0308 	and.w	r3, r3, #8
 80045f6:	61bb      	str	r3, [r7, #24]
 80045f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80045fa:	2300      	movs	r3, #0
 80045fc:	617b      	str	r3, [r7, #20]
 80045fe:	4b54      	ldr	r3, [pc, #336]	; (8004750 <BSP_SDRAM_MspInit+0x1f4>)
 8004600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004602:	4a53      	ldr	r2, [pc, #332]	; (8004750 <BSP_SDRAM_MspInit+0x1f4>)
 8004604:	f043 0310 	orr.w	r3, r3, #16
 8004608:	6313      	str	r3, [r2, #48]	; 0x30
 800460a:	4b51      	ldr	r3, [pc, #324]	; (8004750 <BSP_SDRAM_MspInit+0x1f4>)
 800460c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460e:	f003 0310 	and.w	r3, r3, #16
 8004612:	617b      	str	r3, [r7, #20]
 8004614:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004616:	2300      	movs	r3, #0
 8004618:	613b      	str	r3, [r7, #16]
 800461a:	4b4d      	ldr	r3, [pc, #308]	; (8004750 <BSP_SDRAM_MspInit+0x1f4>)
 800461c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461e:	4a4c      	ldr	r2, [pc, #304]	; (8004750 <BSP_SDRAM_MspInit+0x1f4>)
 8004620:	f043 0320 	orr.w	r3, r3, #32
 8004624:	6313      	str	r3, [r2, #48]	; 0x30
 8004626:	4b4a      	ldr	r3, [pc, #296]	; (8004750 <BSP_SDRAM_MspInit+0x1f4>)
 8004628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462a:	f003 0320 	and.w	r3, r3, #32
 800462e:	613b      	str	r3, [r7, #16]
 8004630:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004632:	2300      	movs	r3, #0
 8004634:	60fb      	str	r3, [r7, #12]
 8004636:	4b46      	ldr	r3, [pc, #280]	; (8004750 <BSP_SDRAM_MspInit+0x1f4>)
 8004638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463a:	4a45      	ldr	r2, [pc, #276]	; (8004750 <BSP_SDRAM_MspInit+0x1f4>)
 800463c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004640:	6313      	str	r3, [r2, #48]	; 0x30
 8004642:	4b43      	ldr	r3, [pc, #268]	; (8004750 <BSP_SDRAM_MspInit+0x1f4>)
 8004644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800464a:	60fb      	str	r3, [r7, #12]
 800464c:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 800464e:	2302      	movs	r3, #2
 8004650:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8004652:	2302      	movs	r3, #2
 8004654:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8004656:	2300      	movs	r3, #0
 8004658:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 800465a:	230c      	movs	r3, #12
 800465c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 800465e:	2360      	movs	r3, #96	; 0x60
 8004660:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8004662:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004666:	4619      	mov	r1, r3
 8004668:	483a      	ldr	r0, [pc, #232]	; (8004754 <BSP_SDRAM_MspInit+0x1f8>)
 800466a:	f000 fe27 	bl	80052bc <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 800466e:	2301      	movs	r3, #1
 8004670:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8004672:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004676:	4619      	mov	r1, r3
 8004678:	4837      	ldr	r0, [pc, #220]	; (8004758 <BSP_SDRAM_MspInit+0x1fc>)
 800467a:	f000 fe1f 	bl	80052bc <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 800467e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8004682:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8004684:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004688:	4619      	mov	r1, r3
 800468a:	4834      	ldr	r0, [pc, #208]	; (800475c <BSP_SDRAM_MspInit+0x200>)
 800468c:	f000 fe16 	bl	80052bc <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8004690:	f64f 7383 	movw	r3, #65411	; 0xff83
 8004694:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8004696:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800469a:	4619      	mov	r1, r3
 800469c:	4830      	ldr	r0, [pc, #192]	; (8004760 <BSP_SDRAM_MspInit+0x204>)
 800469e:	f000 fe0d 	bl	80052bc <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 80046a2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80046a6:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80046a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80046ac:	4619      	mov	r1, r3
 80046ae:	482d      	ldr	r0, [pc, #180]	; (8004764 <BSP_SDRAM_MspInit+0x208>)
 80046b0:	f000 fe04 	bl	80052bc <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 80046b4:	f248 1333 	movw	r3, #33075	; 0x8133
 80046b8:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80046ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80046be:	4619      	mov	r1, r3
 80046c0:	4829      	ldr	r0, [pc, #164]	; (8004768 <BSP_SDRAM_MspInit+0x20c>)
 80046c2:	f000 fdfb 	bl	80052bc <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80046c6:	4b29      	ldr	r3, [pc, #164]	; (800476c <BSP_SDRAM_MspInit+0x210>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80046cc:	4b27      	ldr	r3, [pc, #156]	; (800476c <BSP_SDRAM_MspInit+0x210>)
 80046ce:	2280      	movs	r2, #128	; 0x80
 80046d0:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80046d2:	4b26      	ldr	r3, [pc, #152]	; (800476c <BSP_SDRAM_MspInit+0x210>)
 80046d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046d8:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 80046da:	4b24      	ldr	r3, [pc, #144]	; (800476c <BSP_SDRAM_MspInit+0x210>)
 80046dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80046e0:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80046e2:	4b22      	ldr	r3, [pc, #136]	; (800476c <BSP_SDRAM_MspInit+0x210>)
 80046e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80046e8:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80046ea:	4b20      	ldr	r3, [pc, #128]	; (800476c <BSP_SDRAM_MspInit+0x210>)
 80046ec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80046f0:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 80046f2:	4b1e      	ldr	r3, [pc, #120]	; (800476c <BSP_SDRAM_MspInit+0x210>)
 80046f4:	2200      	movs	r2, #0
 80046f6:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 80046f8:	4b1c      	ldr	r3, [pc, #112]	; (800476c <BSP_SDRAM_MspInit+0x210>)
 80046fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80046fe:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8004700:	4b1a      	ldr	r3, [pc, #104]	; (800476c <BSP_SDRAM_MspInit+0x210>)
 8004702:	2200      	movs	r2, #0
 8004704:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004706:	4b19      	ldr	r3, [pc, #100]	; (800476c <BSP_SDRAM_MspInit+0x210>)
 8004708:	2203      	movs	r2, #3
 800470a:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 800470c:	4b17      	ldr	r3, [pc, #92]	; (800476c <BSP_SDRAM_MspInit+0x210>)
 800470e:	2200      	movs	r2, #0
 8004710:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8004712:	4b16      	ldr	r3, [pc, #88]	; (800476c <BSP_SDRAM_MspInit+0x210>)
 8004714:	2200      	movs	r2, #0
 8004716:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8004718:	4b14      	ldr	r3, [pc, #80]	; (800476c <BSP_SDRAM_MspInit+0x210>)
 800471a:	4a15      	ldr	r2, [pc, #84]	; (8004770 <BSP_SDRAM_MspInit+0x214>)
 800471c:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a12      	ldr	r2, [pc, #72]	; (800476c <BSP_SDRAM_MspInit+0x210>)
 8004722:	631a      	str	r2, [r3, #48]	; 0x30
 8004724:	4a11      	ldr	r2, [pc, #68]	; (800476c <BSP_SDRAM_MspInit+0x210>)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 800472a:	4810      	ldr	r0, [pc, #64]	; (800476c <BSP_SDRAM_MspInit+0x210>)
 800472c:	f7fe f85e 	bl	80027ec <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8004730:	480e      	ldr	r0, [pc, #56]	; (800476c <BSP_SDRAM_MspInit+0x210>)
 8004732:	f7fd ffad 	bl	8002690 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8004736:	2200      	movs	r2, #0
 8004738:	210f      	movs	r1, #15
 800473a:	2038      	movs	r0, #56	; 0x38
 800473c:	f000 f938 	bl	80049b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8004740:	2038      	movs	r0, #56	; 0x38
 8004742:	f000 f951 	bl	80049e8 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8004746:	bf00      	nop
 8004748:	3740      	adds	r7, #64	; 0x40
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	40023800 	.word	0x40023800
 8004754:	40020400 	.word	0x40020400
 8004758:	40020800 	.word	0x40020800
 800475c:	40020c00 	.word	0x40020c00
 8004760:	40021000 	.word	0x40021000
 8004764:	40021400 	.word	0x40021400
 8004768:	40021800 	.word	0x40021800
 800476c:	20000244 	.word	0x20000244
 8004770:	40026410 	.word	0x40026410

08004774 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004778:	4b0e      	ldr	r3, [pc, #56]	; (80047b4 <HAL_Init+0x40>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a0d      	ldr	r2, [pc, #52]	; (80047b4 <HAL_Init+0x40>)
 800477e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004782:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004784:	4b0b      	ldr	r3, [pc, #44]	; (80047b4 <HAL_Init+0x40>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a0a      	ldr	r2, [pc, #40]	; (80047b4 <HAL_Init+0x40>)
 800478a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800478e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004790:	4b08      	ldr	r3, [pc, #32]	; (80047b4 <HAL_Init+0x40>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a07      	ldr	r2, [pc, #28]	; (80047b4 <HAL_Init+0x40>)
 8004796:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800479a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800479c:	2003      	movs	r0, #3
 800479e:	f000 f8fc 	bl	800499a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80047a2:	200f      	movs	r0, #15
 80047a4:	f7fe f9ea 	bl	8002b7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80047a8:	f7fe f930 	bl	8002a0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	40023c00 	.word	0x40023c00

080047b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80047b8:	b480      	push	{r7}
 80047ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80047bc:	4b06      	ldr	r3, [pc, #24]	; (80047d8 <HAL_IncTick+0x20>)
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	461a      	mov	r2, r3
 80047c2:	4b06      	ldr	r3, [pc, #24]	; (80047dc <HAL_IncTick+0x24>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4413      	add	r3, r2
 80047c8:	4a04      	ldr	r2, [pc, #16]	; (80047dc <HAL_IncTick+0x24>)
 80047ca:	6013      	str	r3, [r2, #0]
}
 80047cc:	bf00      	nop
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
 80047d6:	bf00      	nop
 80047d8:	20000068 	.word	0x20000068
 80047dc:	20004e84 	.word	0x20004e84

080047e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80047e0:	b480      	push	{r7}
 80047e2:	af00      	add	r7, sp, #0
  return uwTick;
 80047e4:	4b03      	ldr	r3, [pc, #12]	; (80047f4 <HAL_GetTick+0x14>)
 80047e6:	681b      	ldr	r3, [r3, #0]
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	20004e84 	.word	0x20004e84

080047f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004800:	f7ff ffee 	bl	80047e0 <HAL_GetTick>
 8004804:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004810:	d005      	beq.n	800481e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004812:	4b0a      	ldr	r3, [pc, #40]	; (800483c <HAL_Delay+0x44>)
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	461a      	mov	r2, r3
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	4413      	add	r3, r2
 800481c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800481e:	bf00      	nop
 8004820:	f7ff ffde 	bl	80047e0 <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	68fa      	ldr	r2, [r7, #12]
 800482c:	429a      	cmp	r2, r3
 800482e:	d8f7      	bhi.n	8004820 <HAL_Delay+0x28>
  {
  }
}
 8004830:	bf00      	nop
 8004832:	bf00      	nop
 8004834:	3710      	adds	r7, #16
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	20000068 	.word	0x20000068

08004840 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004840:	b480      	push	{r7}
 8004842:	b085      	sub	sp, #20
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f003 0307 	and.w	r3, r3, #7
 800484e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004850:	4b0c      	ldr	r3, [pc, #48]	; (8004884 <__NVIC_SetPriorityGrouping+0x44>)
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004856:	68ba      	ldr	r2, [r7, #8]
 8004858:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800485c:	4013      	ands	r3, r2
 800485e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004868:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800486c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004870:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004872:	4a04      	ldr	r2, [pc, #16]	; (8004884 <__NVIC_SetPriorityGrouping+0x44>)
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	60d3      	str	r3, [r2, #12]
}
 8004878:	bf00      	nop
 800487a:	3714      	adds	r7, #20
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr
 8004884:	e000ed00 	.word	0xe000ed00

08004888 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004888:	b480      	push	{r7}
 800488a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800488c:	4b04      	ldr	r3, [pc, #16]	; (80048a0 <__NVIC_GetPriorityGrouping+0x18>)
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	0a1b      	lsrs	r3, r3, #8
 8004892:	f003 0307 	and.w	r3, r3, #7
}
 8004896:	4618      	mov	r0, r3
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr
 80048a0:	e000ed00 	.word	0xe000ed00

080048a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	4603      	mov	r3, r0
 80048ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	db0b      	blt.n	80048ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048b6:	79fb      	ldrb	r3, [r7, #7]
 80048b8:	f003 021f 	and.w	r2, r3, #31
 80048bc:	4907      	ldr	r1, [pc, #28]	; (80048dc <__NVIC_EnableIRQ+0x38>)
 80048be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048c2:	095b      	lsrs	r3, r3, #5
 80048c4:	2001      	movs	r0, #1
 80048c6:	fa00 f202 	lsl.w	r2, r0, r2
 80048ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80048ce:	bf00      	nop
 80048d0:	370c      	adds	r7, #12
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	e000e100 	.word	0xe000e100

080048e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	4603      	mov	r3, r0
 80048e8:	6039      	str	r1, [r7, #0]
 80048ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	db0a      	blt.n	800490a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	b2da      	uxtb	r2, r3
 80048f8:	490c      	ldr	r1, [pc, #48]	; (800492c <__NVIC_SetPriority+0x4c>)
 80048fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048fe:	0112      	lsls	r2, r2, #4
 8004900:	b2d2      	uxtb	r2, r2
 8004902:	440b      	add	r3, r1
 8004904:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004908:	e00a      	b.n	8004920 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	b2da      	uxtb	r2, r3
 800490e:	4908      	ldr	r1, [pc, #32]	; (8004930 <__NVIC_SetPriority+0x50>)
 8004910:	79fb      	ldrb	r3, [r7, #7]
 8004912:	f003 030f 	and.w	r3, r3, #15
 8004916:	3b04      	subs	r3, #4
 8004918:	0112      	lsls	r2, r2, #4
 800491a:	b2d2      	uxtb	r2, r2
 800491c:	440b      	add	r3, r1
 800491e:	761a      	strb	r2, [r3, #24]
}
 8004920:	bf00      	nop
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr
 800492c:	e000e100 	.word	0xe000e100
 8004930:	e000ed00 	.word	0xe000ed00

08004934 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004934:	b480      	push	{r7}
 8004936:	b089      	sub	sp, #36	; 0x24
 8004938:	af00      	add	r7, sp, #0
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f003 0307 	and.w	r3, r3, #7
 8004946:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	f1c3 0307 	rsb	r3, r3, #7
 800494e:	2b04      	cmp	r3, #4
 8004950:	bf28      	it	cs
 8004952:	2304      	movcs	r3, #4
 8004954:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	3304      	adds	r3, #4
 800495a:	2b06      	cmp	r3, #6
 800495c:	d902      	bls.n	8004964 <NVIC_EncodePriority+0x30>
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	3b03      	subs	r3, #3
 8004962:	e000      	b.n	8004966 <NVIC_EncodePriority+0x32>
 8004964:	2300      	movs	r3, #0
 8004966:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004968:	f04f 32ff 	mov.w	r2, #4294967295
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	fa02 f303 	lsl.w	r3, r2, r3
 8004972:	43da      	mvns	r2, r3
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	401a      	ands	r2, r3
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800497c:	f04f 31ff 	mov.w	r1, #4294967295
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	fa01 f303 	lsl.w	r3, r1, r3
 8004986:	43d9      	mvns	r1, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800498c:	4313      	orrs	r3, r2
         );
}
 800498e:	4618      	mov	r0, r3
 8004990:	3724      	adds	r7, #36	; 0x24
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr

0800499a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800499a:	b580      	push	{r7, lr}
 800499c:	b082      	sub	sp, #8
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f7ff ff4c 	bl	8004840 <__NVIC_SetPriorityGrouping>
}
 80049a8:	bf00      	nop
 80049aa:	3708      	adds	r7, #8
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b086      	sub	sp, #24
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	4603      	mov	r3, r0
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	607a      	str	r2, [r7, #4]
 80049bc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80049be:	2300      	movs	r3, #0
 80049c0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80049c2:	f7ff ff61 	bl	8004888 <__NVIC_GetPriorityGrouping>
 80049c6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	68b9      	ldr	r1, [r7, #8]
 80049cc:	6978      	ldr	r0, [r7, #20]
 80049ce:	f7ff ffb1 	bl	8004934 <NVIC_EncodePriority>
 80049d2:	4602      	mov	r2, r0
 80049d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049d8:	4611      	mov	r1, r2
 80049da:	4618      	mov	r0, r3
 80049dc:	f7ff ff80 	bl	80048e0 <__NVIC_SetPriority>
}
 80049e0:	bf00      	nop
 80049e2:	3718      	adds	r7, #24
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	4603      	mov	r3, r0
 80049f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049f6:	4618      	mov	r0, r3
 80049f8:	f7ff ff54 	bl	80048a4 <__NVIC_EnableIRQ>
}
 80049fc:	bf00      	nop
 80049fe:	3708      	adds	r7, #8
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d101      	bne.n	8004a16 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e03b      	b.n	8004a8e <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d106      	bne.n	8004a30 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 f833 	bl	8004a96 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2202      	movs	r2, #2
 8004a34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685a      	ldr	r2, [r3, #4]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a54:	f023 0107 	bic.w	r1, r3, #7
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	689a      	ldr	r2, [r3, #8]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	430a      	orrs	r2, r1
 8004a62:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004a6e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	68d1      	ldr	r1, [r2, #12]
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	6812      	ldr	r2, [r2, #0]
 8004a7a:	430b      	orrs	r3, r1
 8004a7c:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3708      	adds	r7, #8
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}

08004a96 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 8004a96:	b480      	push	{r7}
 8004a98:	b083      	sub	sp, #12
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8004a9e:	bf00      	nop
 8004aa0:	370c      	adds	r7, #12
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr

08004aaa <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8004aaa:	b580      	push	{r7, lr}
 8004aac:	b086      	sub	sp, #24
 8004aae:	af02      	add	r7, sp, #8
 8004ab0:	60f8      	str	r0, [r7, #12]
 8004ab2:	60b9      	str	r1, [r7, #8]
 8004ab4:	607a      	str	r2, [r7, #4]
 8004ab6:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d101      	bne.n	8004ac6 <HAL_DMA2D_Start+0x1c>
 8004ac2:	2302      	movs	r3, #2
 8004ac4:	e018      	b.n	8004af8 <HAL_DMA2D_Start+0x4e>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2202      	movs	r2, #2
 8004ad2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	9300      	str	r3, [sp, #0]
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	68b9      	ldr	r1, [r7, #8]
 8004ae0:	68f8      	ldr	r0, [r7, #12]
 8004ae2:	f000 f989 	bl	8004df8 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f042 0201 	orr.w	r2, r2, #1
 8004af4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3710      	adds	r7, #16
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b086      	sub	sp, #24
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 0301 	and.w	r3, r3, #1
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d056      	beq.n	8004bca <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b1c:	f7ff fe60 	bl	80047e0 <HAL_GetTick>
 8004b20:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004b22:	e04b      	b.n	8004bbc <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d023      	beq.n	8004b7e <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f003 0320 	and.w	r3, r3, #32
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d005      	beq.n	8004b4c <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b44:	f043 0202 	orr.w	r2, r3, #2
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f003 0301 	and.w	r3, r3, #1
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d005      	beq.n	8004b62 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b5a:	f043 0201 	orr.w	r2, r3, #1
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2221      	movs	r2, #33	; 0x21
 8004b68:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2204      	movs	r2, #4
 8004b6e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e0a5      	b.n	8004cca <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b84:	d01a      	beq.n	8004bbc <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004b86:	f7ff fe2b 	bl	80047e0 <HAL_GetTick>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	683a      	ldr	r2, [r7, #0]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d302      	bcc.n	8004b9c <HAL_DMA2D_PollForTransfer+0x9c>
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d10f      	bne.n	8004bbc <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba0:	f043 0220 	orr.w	r2, r3, #32
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2203      	movs	r2, #3
 8004bac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	e086      	b.n	8004cca <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	f003 0302 	and.w	r3, r3, #2
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d0ac      	beq.n	8004b24 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	69db      	ldr	r3, [r3, #28]
 8004bd0:	f003 0320 	and.w	r3, r3, #32
 8004bd4:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bdc:	f003 0320 	and.w	r3, r3, #32
 8004be0:	693a      	ldr	r2, [r7, #16]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d061      	beq.n	8004cb0 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004bec:	f7ff fdf8 	bl	80047e0 <HAL_GetTick>
 8004bf0:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004bf2:	e056      	b.n	8004ca2 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d02e      	beq.n	8004c64 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f003 0308 	and.w	r3, r3, #8
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d005      	beq.n	8004c1c <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c14:	f043 0204 	orr.w	r2, r3, #4
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f003 0320 	and.w	r3, r3, #32
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d005      	beq.n	8004c32 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c2a:	f043 0202 	orr.w	r2, r3, #2
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f003 0301 	and.w	r3, r3, #1
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d005      	beq.n	8004c48 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c40:	f043 0201 	orr.w	r2, r3, #1
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2229      	movs	r2, #41	; 0x29
 8004c4e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2204      	movs	r2, #4
 8004c54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e032      	b.n	8004cca <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c6a:	d01a      	beq.n	8004ca2 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004c6c:	f7ff fdb8 	bl	80047e0 <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	683a      	ldr	r2, [r7, #0]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d302      	bcc.n	8004c82 <HAL_DMA2D_PollForTransfer+0x182>
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d10f      	bne.n	8004ca2 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c86:	f043 0220 	orr.w	r2, r3, #32
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2203      	movs	r2, #3
 8004c92:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e013      	b.n	8004cca <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	f003 0310 	and.w	r3, r3, #16
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d0a1      	beq.n	8004bf4 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2212      	movs	r2, #18
 8004cb6:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3718      	adds	r7, #24
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
	...

08004cd4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b087      	sub	sp, #28
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d101      	bne.n	8004cf4 <HAL_DMA2D_ConfigLayer+0x20>
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	e079      	b.n	8004de8 <HAL_DMA2D_ConfigLayer+0x114>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2202      	movs	r2, #2
 8004d00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	011b      	lsls	r3, r3, #4
 8004d08:	3318      	adds	r3, #24
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	685a      	ldr	r2, [r3, #4]
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	041b      	lsls	r3, r3, #16
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004d1e:	4b35      	ldr	r3, [pc, #212]	; (8004df4 <HAL_DMA2D_ConfigLayer+0x120>)
 8004d20:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	2b0a      	cmp	r3, #10
 8004d28:	d003      	beq.n	8004d32 <HAL_DMA2D_ConfigLayer+0x5e>
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	2b09      	cmp	r3, #9
 8004d30:	d107      	bne.n	8004d42 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004d3a:	697a      	ldr	r2, [r7, #20]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	617b      	str	r3, [r7, #20]
 8004d40:	e005      	b.n	8004d4e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	061b      	lsls	r3, r3, #24
 8004d48:	697a      	ldr	r2, [r7, #20]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d120      	bne.n	8004d96 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	43db      	mvns	r3, r3
 8004d5e:	ea02 0103 	and.w	r1, r2, r3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	697a      	ldr	r2, [r7, #20]
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	693a      	ldr	r2, [r7, #16]
 8004d72:	6812      	ldr	r2, [r2, #0]
 8004d74:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	2b0a      	cmp	r3, #10
 8004d7c:	d003      	beq.n	8004d86 <HAL_DMA2D_ConfigLayer+0xb2>
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	2b09      	cmp	r3, #9
 8004d84:	d127      	bne.n	8004dd6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	68da      	ldr	r2, [r3, #12]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004d92:	629a      	str	r2, [r3, #40]	; 0x28
 8004d94:	e01f      	b.n	8004dd6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	69da      	ldr	r2, [r3, #28]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	43db      	mvns	r3, r3
 8004da0:	ea02 0103 	and.w	r1, r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	697a      	ldr	r2, [r7, #20]
 8004daa:	430a      	orrs	r2, r1
 8004dac:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	693a      	ldr	r2, [r7, #16]
 8004db4:	6812      	ldr	r2, [r2, #0]
 8004db6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	2b0a      	cmp	r3, #10
 8004dbe:	d003      	beq.n	8004dc8 <HAL_DMA2D_ConfigLayer+0xf4>
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	2b09      	cmp	r3, #9
 8004dc6:	d106      	bne.n	8004dd6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	68da      	ldr	r2, [r3, #12]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004dd4:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004de6:	2300      	movs	r3, #0
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	371c      	adds	r7, #28
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr
 8004df4:	ff03000f 	.word	0xff03000f

08004df8 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b08b      	sub	sp, #44	; 0x2c
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	607a      	str	r2, [r7, #4]
 8004e04:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e0c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	041a      	lsls	r2, r3, #16
 8004e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e16:	431a      	orrs	r2, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	430a      	orrs	r2, r1
 8004e1e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004e30:	d174      	bne.n	8004f1c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004e38:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004e40:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004e48:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d108      	bne.n	8004e6a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8004e58:	69ba      	ldr	r2, [r7, #24]
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	431a      	orrs	r2, r3
 8004e5e:	6a3b      	ldr	r3, [r7, #32]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	697a      	ldr	r2, [r7, #20]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	627b      	str	r3, [r7, #36]	; 0x24
 8004e68:	e053      	b.n	8004f12 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d106      	bne.n	8004e80 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8004e72:	69ba      	ldr	r2, [r7, #24]
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	697a      	ldr	r2, [r7, #20]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e7e:	e048      	b.n	8004f12 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d111      	bne.n	8004eac <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	0cdb      	lsrs	r3, r3, #19
 8004e8c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	0a9b      	lsrs	r3, r3, #10
 8004e92:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	08db      	lsrs	r3, r3, #3
 8004e98:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	015a      	lsls	r2, r3, #5
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	02db      	lsls	r3, r3, #11
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	697a      	ldr	r2, [r7, #20]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8004eaa:	e032      	b.n	8004f12 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	2b03      	cmp	r3, #3
 8004eb2:	d117      	bne.n	8004ee4 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8004eb4:	6a3b      	ldr	r3, [r7, #32]
 8004eb6:	0fdb      	lsrs	r3, r3, #31
 8004eb8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	0cdb      	lsrs	r3, r3, #19
 8004ebe:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	0adb      	lsrs	r3, r3, #11
 8004ec4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	08db      	lsrs	r3, r3, #3
 8004eca:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	015a      	lsls	r2, r3, #5
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	029b      	lsls	r3, r3, #10
 8004ed4:	431a      	orrs	r2, r3
 8004ed6:	6a3b      	ldr	r3, [r7, #32]
 8004ed8:	03db      	lsls	r3, r3, #15
 8004eda:	4313      	orrs	r3, r2
 8004edc:	697a      	ldr	r2, [r7, #20]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ee2:	e016      	b.n	8004f12 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004ee4:	6a3b      	ldr	r3, [r7, #32]
 8004ee6:	0f1b      	lsrs	r3, r3, #28
 8004ee8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	0d1b      	lsrs	r3, r3, #20
 8004eee:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	0b1b      	lsrs	r3, r3, #12
 8004ef4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	091b      	lsrs	r3, r3, #4
 8004efa:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	011a      	lsls	r2, r3, #4
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	021b      	lsls	r3, r3, #8
 8004f04:	431a      	orrs	r2, r3
 8004f06:	6a3b      	ldr	r3, [r7, #32]
 8004f08:	031b      	lsls	r3, r3, #12
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	697a      	ldr	r2, [r7, #20]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f18:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8004f1a:	e003      	b.n	8004f24 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68ba      	ldr	r2, [r7, #8]
 8004f22:	60da      	str	r2, [r3, #12]
}
 8004f24:	bf00      	nop
 8004f26:	372c      	adds	r7, #44	; 0x2c
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b086      	sub	sp, #24
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004f42:	4b23      	ldr	r3, [pc, #140]	; (8004fd0 <HAL_FLASH_Program+0xa0>)
 8004f44:	7e1b      	ldrb	r3, [r3, #24]
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d101      	bne.n	8004f4e <HAL_FLASH_Program+0x1e>
 8004f4a:	2302      	movs	r3, #2
 8004f4c:	e03b      	b.n	8004fc6 <HAL_FLASH_Program+0x96>
 8004f4e:	4b20      	ldr	r3, [pc, #128]	; (8004fd0 <HAL_FLASH_Program+0xa0>)
 8004f50:	2201      	movs	r2, #1
 8004f52:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004f54:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004f58:	f000 f870 	bl	800503c <FLASH_WaitForLastOperation>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8004f60:	7dfb      	ldrb	r3, [r7, #23]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d12b      	bne.n	8004fbe <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d105      	bne.n	8004f78 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8004f6c:	783b      	ldrb	r3, [r7, #0]
 8004f6e:	4619      	mov	r1, r3
 8004f70:	68b8      	ldr	r0, [r7, #8]
 8004f72:	f000 f91b 	bl	80051ac <FLASH_Program_Byte>
 8004f76:	e016      	b.n	8004fa6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d105      	bne.n	8004f8a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8004f7e:	883b      	ldrh	r3, [r7, #0]
 8004f80:	4619      	mov	r1, r3
 8004f82:	68b8      	ldr	r0, [r7, #8]
 8004f84:	f000 f8ee 	bl	8005164 <FLASH_Program_HalfWord>
 8004f88:	e00d      	b.n	8004fa6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d105      	bne.n	8004f9c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	4619      	mov	r1, r3
 8004f94:	68b8      	ldr	r0, [r7, #8]
 8004f96:	f000 f8c3 	bl	8005120 <FLASH_Program_Word>
 8004f9a:	e004      	b.n	8004fa6 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8004f9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fa0:	68b8      	ldr	r0, [r7, #8]
 8004fa2:	f000 f88b 	bl	80050bc <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004fa6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004faa:	f000 f847 	bl	800503c <FLASH_WaitForLastOperation>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8004fb2:	4b08      	ldr	r3, [pc, #32]	; (8004fd4 <HAL_FLASH_Program+0xa4>)
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	4a07      	ldr	r2, [pc, #28]	; (8004fd4 <HAL_FLASH_Program+0xa4>)
 8004fb8:	f023 0301 	bic.w	r3, r3, #1
 8004fbc:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004fbe:	4b04      	ldr	r3, [pc, #16]	; (8004fd0 <HAL_FLASH_Program+0xa0>)
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	761a      	strb	r2, [r3, #24]
  
  return status;
 8004fc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3718      	adds	r7, #24
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	20004e88 	.word	0x20004e88
 8004fd4:	40023c00 	.word	0x40023c00

08004fd8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004fe2:	4b0b      	ldr	r3, [pc, #44]	; (8005010 <HAL_FLASH_Unlock+0x38>)
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	da0b      	bge.n	8005002 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004fea:	4b09      	ldr	r3, [pc, #36]	; (8005010 <HAL_FLASH_Unlock+0x38>)
 8004fec:	4a09      	ldr	r2, [pc, #36]	; (8005014 <HAL_FLASH_Unlock+0x3c>)
 8004fee:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004ff0:	4b07      	ldr	r3, [pc, #28]	; (8005010 <HAL_FLASH_Unlock+0x38>)
 8004ff2:	4a09      	ldr	r2, [pc, #36]	; (8005018 <HAL_FLASH_Unlock+0x40>)
 8004ff4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004ff6:	4b06      	ldr	r3, [pc, #24]	; (8005010 <HAL_FLASH_Unlock+0x38>)
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	da01      	bge.n	8005002 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005002:	79fb      	ldrb	r3, [r7, #7]
}
 8005004:	4618      	mov	r0, r3
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr
 8005010:	40023c00 	.word	0x40023c00
 8005014:	45670123 	.word	0x45670123
 8005018:	cdef89ab 	.word	0xcdef89ab

0800501c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800501c:	b480      	push	{r7}
 800501e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8005020:	4b05      	ldr	r3, [pc, #20]	; (8005038 <HAL_FLASH_Lock+0x1c>)
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	4a04      	ldr	r2, [pc, #16]	; (8005038 <HAL_FLASH_Lock+0x1c>)
 8005026:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800502a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr
 8005038:	40023c00 	.word	0x40023c00

0800503c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005044:	2300      	movs	r3, #0
 8005046:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005048:	4b1a      	ldr	r3, [pc, #104]	; (80050b4 <FLASH_WaitForLastOperation+0x78>)
 800504a:	2200      	movs	r2, #0
 800504c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800504e:	f7ff fbc7 	bl	80047e0 <HAL_GetTick>
 8005052:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005054:	e010      	b.n	8005078 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800505c:	d00c      	beq.n	8005078 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d007      	beq.n	8005074 <FLASH_WaitForLastOperation+0x38>
 8005064:	f7ff fbbc 	bl	80047e0 <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	429a      	cmp	r2, r3
 8005072:	d201      	bcs.n	8005078 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	e019      	b.n	80050ac <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005078:	4b0f      	ldr	r3, [pc, #60]	; (80050b8 <FLASH_WaitForLastOperation+0x7c>)
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005080:	2b00      	cmp	r3, #0
 8005082:	d1e8      	bne.n	8005056 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8005084:	4b0c      	ldr	r3, [pc, #48]	; (80050b8 <FLASH_WaitForLastOperation+0x7c>)
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	f003 0301 	and.w	r3, r3, #1
 800508c:	2b00      	cmp	r3, #0
 800508e:	d002      	beq.n	8005096 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005090:	4b09      	ldr	r3, [pc, #36]	; (80050b8 <FLASH_WaitForLastOperation+0x7c>)
 8005092:	2201      	movs	r2, #1
 8005094:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8005096:	4b08      	ldr	r3, [pc, #32]	; (80050b8 <FLASH_WaitForLastOperation+0x7c>)
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d003      	beq.n	80050aa <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80050a2:	f000 f8a5 	bl	80051f0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e000      	b.n	80050ac <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80050aa:	2300      	movs	r3, #0
  
}  
 80050ac:	4618      	mov	r0, r3
 80050ae:	3710      	adds	r7, #16
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	20004e88 	.word	0x20004e88
 80050b8:	40023c00 	.word	0x40023c00

080050bc <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80050bc:	b480      	push	{r7}
 80050be:	b085      	sub	sp, #20
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80050c8:	4b14      	ldr	r3, [pc, #80]	; (800511c <FLASH_Program_DoubleWord+0x60>)
 80050ca:	691b      	ldr	r3, [r3, #16]
 80050cc:	4a13      	ldr	r2, [pc, #76]	; (800511c <FLASH_Program_DoubleWord+0x60>)
 80050ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050d2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80050d4:	4b11      	ldr	r3, [pc, #68]	; (800511c <FLASH_Program_DoubleWord+0x60>)
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	4a10      	ldr	r2, [pc, #64]	; (800511c <FLASH_Program_DoubleWord+0x60>)
 80050da:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80050de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80050e0:	4b0e      	ldr	r3, [pc, #56]	; (800511c <FLASH_Program_DoubleWord+0x60>)
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	4a0d      	ldr	r2, [pc, #52]	; (800511c <FLASH_Program_DoubleWord+0x60>)
 80050e6:	f043 0301 	orr.w	r3, r3, #1
 80050ea:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	683a      	ldr	r2, [r7, #0]
 80050f0:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80050f2:	f3bf 8f6f 	isb	sy
}
 80050f6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80050f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80050fc:	f04f 0200 	mov.w	r2, #0
 8005100:	f04f 0300 	mov.w	r3, #0
 8005104:	000a      	movs	r2, r1
 8005106:	2300      	movs	r3, #0
 8005108:	68f9      	ldr	r1, [r7, #12]
 800510a:	3104      	adds	r1, #4
 800510c:	4613      	mov	r3, r2
 800510e:	600b      	str	r3, [r1, #0]
}
 8005110:	bf00      	nop
 8005112:	3714      	adds	r7, #20
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr
 800511c:	40023c00 	.word	0x40023c00

08005120 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800512a:	4b0d      	ldr	r3, [pc, #52]	; (8005160 <FLASH_Program_Word+0x40>)
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	4a0c      	ldr	r2, [pc, #48]	; (8005160 <FLASH_Program_Word+0x40>)
 8005130:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005134:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8005136:	4b0a      	ldr	r3, [pc, #40]	; (8005160 <FLASH_Program_Word+0x40>)
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	4a09      	ldr	r2, [pc, #36]	; (8005160 <FLASH_Program_Word+0x40>)
 800513c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005140:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005142:	4b07      	ldr	r3, [pc, #28]	; (8005160 <FLASH_Program_Word+0x40>)
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	4a06      	ldr	r2, [pc, #24]	; (8005160 <FLASH_Program_Word+0x40>)
 8005148:	f043 0301 	orr.w	r3, r3, #1
 800514c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	683a      	ldr	r2, [r7, #0]
 8005152:	601a      	str	r2, [r3, #0]
}
 8005154:	bf00      	nop
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr
 8005160:	40023c00 	.word	0x40023c00

08005164 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	460b      	mov	r3, r1
 800516e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005170:	4b0d      	ldr	r3, [pc, #52]	; (80051a8 <FLASH_Program_HalfWord+0x44>)
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	4a0c      	ldr	r2, [pc, #48]	; (80051a8 <FLASH_Program_HalfWord+0x44>)
 8005176:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800517a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800517c:	4b0a      	ldr	r3, [pc, #40]	; (80051a8 <FLASH_Program_HalfWord+0x44>)
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	4a09      	ldr	r2, [pc, #36]	; (80051a8 <FLASH_Program_HalfWord+0x44>)
 8005182:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005186:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005188:	4b07      	ldr	r3, [pc, #28]	; (80051a8 <FLASH_Program_HalfWord+0x44>)
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	4a06      	ldr	r2, [pc, #24]	; (80051a8 <FLASH_Program_HalfWord+0x44>)
 800518e:	f043 0301 	orr.w	r3, r3, #1
 8005192:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	887a      	ldrh	r2, [r7, #2]
 8005198:	801a      	strh	r2, [r3, #0]
}
 800519a:	bf00      	nop
 800519c:	370c      	adds	r7, #12
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr
 80051a6:	bf00      	nop
 80051a8:	40023c00 	.word	0x40023c00

080051ac <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	460b      	mov	r3, r1
 80051b6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80051b8:	4b0c      	ldr	r3, [pc, #48]	; (80051ec <FLASH_Program_Byte+0x40>)
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	4a0b      	ldr	r2, [pc, #44]	; (80051ec <FLASH_Program_Byte+0x40>)
 80051be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80051c4:	4b09      	ldr	r3, [pc, #36]	; (80051ec <FLASH_Program_Byte+0x40>)
 80051c6:	4a09      	ldr	r2, [pc, #36]	; (80051ec <FLASH_Program_Byte+0x40>)
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80051cc:	4b07      	ldr	r3, [pc, #28]	; (80051ec <FLASH_Program_Byte+0x40>)
 80051ce:	691b      	ldr	r3, [r3, #16]
 80051d0:	4a06      	ldr	r2, [pc, #24]	; (80051ec <FLASH_Program_Byte+0x40>)
 80051d2:	f043 0301 	orr.w	r3, r3, #1
 80051d6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	78fa      	ldrb	r2, [r7, #3]
 80051dc:	701a      	strb	r2, [r3, #0]
}
 80051de:	bf00      	nop
 80051e0:	370c      	adds	r7, #12
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr
 80051ea:	bf00      	nop
 80051ec:	40023c00 	.word	0x40023c00

080051f0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80051f0:	b480      	push	{r7}
 80051f2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80051f4:	4b2f      	ldr	r3, [pc, #188]	; (80052b4 <FLASH_SetErrorCode+0xc4>)
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	f003 0310 	and.w	r3, r3, #16
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d008      	beq.n	8005212 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005200:	4b2d      	ldr	r3, [pc, #180]	; (80052b8 <FLASH_SetErrorCode+0xc8>)
 8005202:	69db      	ldr	r3, [r3, #28]
 8005204:	f043 0310 	orr.w	r3, r3, #16
 8005208:	4a2b      	ldr	r2, [pc, #172]	; (80052b8 <FLASH_SetErrorCode+0xc8>)
 800520a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800520c:	4b29      	ldr	r3, [pc, #164]	; (80052b4 <FLASH_SetErrorCode+0xc4>)
 800520e:	2210      	movs	r2, #16
 8005210:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8005212:	4b28      	ldr	r3, [pc, #160]	; (80052b4 <FLASH_SetErrorCode+0xc4>)
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	f003 0320 	and.w	r3, r3, #32
 800521a:	2b00      	cmp	r3, #0
 800521c:	d008      	beq.n	8005230 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800521e:	4b26      	ldr	r3, [pc, #152]	; (80052b8 <FLASH_SetErrorCode+0xc8>)
 8005220:	69db      	ldr	r3, [r3, #28]
 8005222:	f043 0308 	orr.w	r3, r3, #8
 8005226:	4a24      	ldr	r2, [pc, #144]	; (80052b8 <FLASH_SetErrorCode+0xc8>)
 8005228:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800522a:	4b22      	ldr	r3, [pc, #136]	; (80052b4 <FLASH_SetErrorCode+0xc4>)
 800522c:	2220      	movs	r2, #32
 800522e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8005230:	4b20      	ldr	r3, [pc, #128]	; (80052b4 <FLASH_SetErrorCode+0xc4>)
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005238:	2b00      	cmp	r3, #0
 800523a:	d008      	beq.n	800524e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800523c:	4b1e      	ldr	r3, [pc, #120]	; (80052b8 <FLASH_SetErrorCode+0xc8>)
 800523e:	69db      	ldr	r3, [r3, #28]
 8005240:	f043 0304 	orr.w	r3, r3, #4
 8005244:	4a1c      	ldr	r2, [pc, #112]	; (80052b8 <FLASH_SetErrorCode+0xc8>)
 8005246:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8005248:	4b1a      	ldr	r3, [pc, #104]	; (80052b4 <FLASH_SetErrorCode+0xc4>)
 800524a:	2240      	movs	r2, #64	; 0x40
 800524c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800524e:	4b19      	ldr	r3, [pc, #100]	; (80052b4 <FLASH_SetErrorCode+0xc4>)
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005256:	2b00      	cmp	r3, #0
 8005258:	d008      	beq.n	800526c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800525a:	4b17      	ldr	r3, [pc, #92]	; (80052b8 <FLASH_SetErrorCode+0xc8>)
 800525c:	69db      	ldr	r3, [r3, #28]
 800525e:	f043 0302 	orr.w	r3, r3, #2
 8005262:	4a15      	ldr	r2, [pc, #84]	; (80052b8 <FLASH_SetErrorCode+0xc8>)
 8005264:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8005266:	4b13      	ldr	r3, [pc, #76]	; (80052b4 <FLASH_SetErrorCode+0xc4>)
 8005268:	2280      	movs	r2, #128	; 0x80
 800526a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800526c:	4b11      	ldr	r3, [pc, #68]	; (80052b4 <FLASH_SetErrorCode+0xc4>)
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005274:	2b00      	cmp	r3, #0
 8005276:	d009      	beq.n	800528c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8005278:	4b0f      	ldr	r3, [pc, #60]	; (80052b8 <FLASH_SetErrorCode+0xc8>)
 800527a:	69db      	ldr	r3, [r3, #28]
 800527c:	f043 0301 	orr.w	r3, r3, #1
 8005280:	4a0d      	ldr	r2, [pc, #52]	; (80052b8 <FLASH_SetErrorCode+0xc8>)
 8005282:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8005284:	4b0b      	ldr	r3, [pc, #44]	; (80052b4 <FLASH_SetErrorCode+0xc4>)
 8005286:	f44f 7280 	mov.w	r2, #256	; 0x100
 800528a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800528c:	4b09      	ldr	r3, [pc, #36]	; (80052b4 <FLASH_SetErrorCode+0xc4>)
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	f003 0302 	and.w	r3, r3, #2
 8005294:	2b00      	cmp	r3, #0
 8005296:	d008      	beq.n	80052aa <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8005298:	4b07      	ldr	r3, [pc, #28]	; (80052b8 <FLASH_SetErrorCode+0xc8>)
 800529a:	69db      	ldr	r3, [r3, #28]
 800529c:	f043 0320 	orr.w	r3, r3, #32
 80052a0:	4a05      	ldr	r2, [pc, #20]	; (80052b8 <FLASH_SetErrorCode+0xc8>)
 80052a2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80052a4:	4b03      	ldr	r3, [pc, #12]	; (80052b4 <FLASH_SetErrorCode+0xc4>)
 80052a6:	2202      	movs	r2, #2
 80052a8:	60da      	str	r2, [r3, #12]
  }
}
 80052aa:	bf00      	nop
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr
 80052b4:	40023c00 	.word	0x40023c00
 80052b8:	20004e88 	.word	0x20004e88

080052bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052bc:	b480      	push	{r7}
 80052be:	b089      	sub	sp, #36	; 0x24
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80052c6:	2300      	movs	r3, #0
 80052c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80052ca:	2300      	movs	r3, #0
 80052cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80052ce:	2300      	movs	r3, #0
 80052d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80052d2:	2300      	movs	r3, #0
 80052d4:	61fb      	str	r3, [r7, #28]
 80052d6:	e177      	b.n	80055c8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80052d8:	2201      	movs	r2, #1
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	fa02 f303 	lsl.w	r3, r2, r3
 80052e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	697a      	ldr	r2, [r7, #20]
 80052e8:	4013      	ands	r3, r2
 80052ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80052ec:	693a      	ldr	r2, [r7, #16]
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	f040 8166 	bne.w	80055c2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	f003 0303 	and.w	r3, r3, #3
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d005      	beq.n	800530e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800530a:	2b02      	cmp	r3, #2
 800530c:	d130      	bne.n	8005370 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	005b      	lsls	r3, r3, #1
 8005318:	2203      	movs	r2, #3
 800531a:	fa02 f303 	lsl.w	r3, r2, r3
 800531e:	43db      	mvns	r3, r3
 8005320:	69ba      	ldr	r2, [r7, #24]
 8005322:	4013      	ands	r3, r2
 8005324:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	68da      	ldr	r2, [r3, #12]
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	005b      	lsls	r3, r3, #1
 800532e:	fa02 f303 	lsl.w	r3, r2, r3
 8005332:	69ba      	ldr	r2, [r7, #24]
 8005334:	4313      	orrs	r3, r2
 8005336:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	69ba      	ldr	r2, [r7, #24]
 800533c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005344:	2201      	movs	r2, #1
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	fa02 f303 	lsl.w	r3, r2, r3
 800534c:	43db      	mvns	r3, r3
 800534e:	69ba      	ldr	r2, [r7, #24]
 8005350:	4013      	ands	r3, r2
 8005352:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	091b      	lsrs	r3, r3, #4
 800535a:	f003 0201 	and.w	r2, r3, #1
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	fa02 f303 	lsl.w	r3, r2, r3
 8005364:	69ba      	ldr	r2, [r7, #24]
 8005366:	4313      	orrs	r3, r2
 8005368:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	69ba      	ldr	r2, [r7, #24]
 800536e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	f003 0303 	and.w	r3, r3, #3
 8005378:	2b03      	cmp	r3, #3
 800537a:	d017      	beq.n	80053ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	005b      	lsls	r3, r3, #1
 8005386:	2203      	movs	r2, #3
 8005388:	fa02 f303 	lsl.w	r3, r2, r3
 800538c:	43db      	mvns	r3, r3
 800538e:	69ba      	ldr	r2, [r7, #24]
 8005390:	4013      	ands	r3, r2
 8005392:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	689a      	ldr	r2, [r3, #8]
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	005b      	lsls	r3, r3, #1
 800539c:	fa02 f303 	lsl.w	r3, r2, r3
 80053a0:	69ba      	ldr	r2, [r7, #24]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	69ba      	ldr	r2, [r7, #24]
 80053aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	f003 0303 	and.w	r3, r3, #3
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	d123      	bne.n	8005400 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	08da      	lsrs	r2, r3, #3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	3208      	adds	r2, #8
 80053c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	f003 0307 	and.w	r3, r3, #7
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	220f      	movs	r2, #15
 80053d0:	fa02 f303 	lsl.w	r3, r2, r3
 80053d4:	43db      	mvns	r3, r3
 80053d6:	69ba      	ldr	r2, [r7, #24]
 80053d8:	4013      	ands	r3, r2
 80053da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	691a      	ldr	r2, [r3, #16]
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	f003 0307 	and.w	r3, r3, #7
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	fa02 f303 	lsl.w	r3, r2, r3
 80053ec:	69ba      	ldr	r2, [r7, #24]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	08da      	lsrs	r2, r3, #3
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	3208      	adds	r2, #8
 80053fa:	69b9      	ldr	r1, [r7, #24]
 80053fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	005b      	lsls	r3, r3, #1
 800540a:	2203      	movs	r2, #3
 800540c:	fa02 f303 	lsl.w	r3, r2, r3
 8005410:	43db      	mvns	r3, r3
 8005412:	69ba      	ldr	r2, [r7, #24]
 8005414:	4013      	ands	r3, r2
 8005416:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	f003 0203 	and.w	r2, r3, #3
 8005420:	69fb      	ldr	r3, [r7, #28]
 8005422:	005b      	lsls	r3, r3, #1
 8005424:	fa02 f303 	lsl.w	r3, r2, r3
 8005428:	69ba      	ldr	r2, [r7, #24]
 800542a:	4313      	orrs	r3, r2
 800542c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	69ba      	ldr	r2, [r7, #24]
 8005432:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800543c:	2b00      	cmp	r3, #0
 800543e:	f000 80c0 	beq.w	80055c2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005442:	2300      	movs	r3, #0
 8005444:	60fb      	str	r3, [r7, #12]
 8005446:	4b66      	ldr	r3, [pc, #408]	; (80055e0 <HAL_GPIO_Init+0x324>)
 8005448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800544a:	4a65      	ldr	r2, [pc, #404]	; (80055e0 <HAL_GPIO_Init+0x324>)
 800544c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005450:	6453      	str	r3, [r2, #68]	; 0x44
 8005452:	4b63      	ldr	r3, [pc, #396]	; (80055e0 <HAL_GPIO_Init+0x324>)
 8005454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005456:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800545a:	60fb      	str	r3, [r7, #12]
 800545c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800545e:	4a61      	ldr	r2, [pc, #388]	; (80055e4 <HAL_GPIO_Init+0x328>)
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	089b      	lsrs	r3, r3, #2
 8005464:	3302      	adds	r3, #2
 8005466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800546a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	f003 0303 	and.w	r3, r3, #3
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	220f      	movs	r2, #15
 8005476:	fa02 f303 	lsl.w	r3, r2, r3
 800547a:	43db      	mvns	r3, r3
 800547c:	69ba      	ldr	r2, [r7, #24]
 800547e:	4013      	ands	r3, r2
 8005480:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a58      	ldr	r2, [pc, #352]	; (80055e8 <HAL_GPIO_Init+0x32c>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d037      	beq.n	80054fa <HAL_GPIO_Init+0x23e>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a57      	ldr	r2, [pc, #348]	; (80055ec <HAL_GPIO_Init+0x330>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d031      	beq.n	80054f6 <HAL_GPIO_Init+0x23a>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a56      	ldr	r2, [pc, #344]	; (80055f0 <HAL_GPIO_Init+0x334>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d02b      	beq.n	80054f2 <HAL_GPIO_Init+0x236>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a55      	ldr	r2, [pc, #340]	; (80055f4 <HAL_GPIO_Init+0x338>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d025      	beq.n	80054ee <HAL_GPIO_Init+0x232>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a54      	ldr	r2, [pc, #336]	; (80055f8 <HAL_GPIO_Init+0x33c>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d01f      	beq.n	80054ea <HAL_GPIO_Init+0x22e>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a53      	ldr	r2, [pc, #332]	; (80055fc <HAL_GPIO_Init+0x340>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d019      	beq.n	80054e6 <HAL_GPIO_Init+0x22a>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a52      	ldr	r2, [pc, #328]	; (8005600 <HAL_GPIO_Init+0x344>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d013      	beq.n	80054e2 <HAL_GPIO_Init+0x226>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a51      	ldr	r2, [pc, #324]	; (8005604 <HAL_GPIO_Init+0x348>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d00d      	beq.n	80054de <HAL_GPIO_Init+0x222>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a50      	ldr	r2, [pc, #320]	; (8005608 <HAL_GPIO_Init+0x34c>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d007      	beq.n	80054da <HAL_GPIO_Init+0x21e>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a4f      	ldr	r2, [pc, #316]	; (800560c <HAL_GPIO_Init+0x350>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d101      	bne.n	80054d6 <HAL_GPIO_Init+0x21a>
 80054d2:	2309      	movs	r3, #9
 80054d4:	e012      	b.n	80054fc <HAL_GPIO_Init+0x240>
 80054d6:	230a      	movs	r3, #10
 80054d8:	e010      	b.n	80054fc <HAL_GPIO_Init+0x240>
 80054da:	2308      	movs	r3, #8
 80054dc:	e00e      	b.n	80054fc <HAL_GPIO_Init+0x240>
 80054de:	2307      	movs	r3, #7
 80054e0:	e00c      	b.n	80054fc <HAL_GPIO_Init+0x240>
 80054e2:	2306      	movs	r3, #6
 80054e4:	e00a      	b.n	80054fc <HAL_GPIO_Init+0x240>
 80054e6:	2305      	movs	r3, #5
 80054e8:	e008      	b.n	80054fc <HAL_GPIO_Init+0x240>
 80054ea:	2304      	movs	r3, #4
 80054ec:	e006      	b.n	80054fc <HAL_GPIO_Init+0x240>
 80054ee:	2303      	movs	r3, #3
 80054f0:	e004      	b.n	80054fc <HAL_GPIO_Init+0x240>
 80054f2:	2302      	movs	r3, #2
 80054f4:	e002      	b.n	80054fc <HAL_GPIO_Init+0x240>
 80054f6:	2301      	movs	r3, #1
 80054f8:	e000      	b.n	80054fc <HAL_GPIO_Init+0x240>
 80054fa:	2300      	movs	r3, #0
 80054fc:	69fa      	ldr	r2, [r7, #28]
 80054fe:	f002 0203 	and.w	r2, r2, #3
 8005502:	0092      	lsls	r2, r2, #2
 8005504:	4093      	lsls	r3, r2
 8005506:	69ba      	ldr	r2, [r7, #24]
 8005508:	4313      	orrs	r3, r2
 800550a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800550c:	4935      	ldr	r1, [pc, #212]	; (80055e4 <HAL_GPIO_Init+0x328>)
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	089b      	lsrs	r3, r3, #2
 8005512:	3302      	adds	r3, #2
 8005514:	69ba      	ldr	r2, [r7, #24]
 8005516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800551a:	4b3d      	ldr	r3, [pc, #244]	; (8005610 <HAL_GPIO_Init+0x354>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	43db      	mvns	r3, r3
 8005524:	69ba      	ldr	r2, [r7, #24]
 8005526:	4013      	ands	r3, r2
 8005528:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005532:	2b00      	cmp	r3, #0
 8005534:	d003      	beq.n	800553e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005536:	69ba      	ldr	r2, [r7, #24]
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	4313      	orrs	r3, r2
 800553c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800553e:	4a34      	ldr	r2, [pc, #208]	; (8005610 <HAL_GPIO_Init+0x354>)
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005544:	4b32      	ldr	r3, [pc, #200]	; (8005610 <HAL_GPIO_Init+0x354>)
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	43db      	mvns	r3, r3
 800554e:	69ba      	ldr	r2, [r7, #24]
 8005550:	4013      	ands	r3, r2
 8005552:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800555c:	2b00      	cmp	r3, #0
 800555e:	d003      	beq.n	8005568 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005560:	69ba      	ldr	r2, [r7, #24]
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	4313      	orrs	r3, r2
 8005566:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005568:	4a29      	ldr	r2, [pc, #164]	; (8005610 <HAL_GPIO_Init+0x354>)
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800556e:	4b28      	ldr	r3, [pc, #160]	; (8005610 <HAL_GPIO_Init+0x354>)
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	43db      	mvns	r3, r3
 8005578:	69ba      	ldr	r2, [r7, #24]
 800557a:	4013      	ands	r3, r2
 800557c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005586:	2b00      	cmp	r3, #0
 8005588:	d003      	beq.n	8005592 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800558a:	69ba      	ldr	r2, [r7, #24]
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	4313      	orrs	r3, r2
 8005590:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005592:	4a1f      	ldr	r2, [pc, #124]	; (8005610 <HAL_GPIO_Init+0x354>)
 8005594:	69bb      	ldr	r3, [r7, #24]
 8005596:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005598:	4b1d      	ldr	r3, [pc, #116]	; (8005610 <HAL_GPIO_Init+0x354>)
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	43db      	mvns	r3, r3
 80055a2:	69ba      	ldr	r2, [r7, #24]
 80055a4:	4013      	ands	r3, r2
 80055a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d003      	beq.n	80055bc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80055b4:	69ba      	ldr	r2, [r7, #24]
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80055bc:	4a14      	ldr	r2, [pc, #80]	; (8005610 <HAL_GPIO_Init+0x354>)
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	3301      	adds	r3, #1
 80055c6:	61fb      	str	r3, [r7, #28]
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	2b0f      	cmp	r3, #15
 80055cc:	f67f ae84 	bls.w	80052d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80055d0:	bf00      	nop
 80055d2:	bf00      	nop
 80055d4:	3724      	adds	r7, #36	; 0x24
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr
 80055de:	bf00      	nop
 80055e0:	40023800 	.word	0x40023800
 80055e4:	40013800 	.word	0x40013800
 80055e8:	40020000 	.word	0x40020000
 80055ec:	40020400 	.word	0x40020400
 80055f0:	40020800 	.word	0x40020800
 80055f4:	40020c00 	.word	0x40020c00
 80055f8:	40021000 	.word	0x40021000
 80055fc:	40021400 	.word	0x40021400
 8005600:	40021800 	.word	0x40021800
 8005604:	40021c00 	.word	0x40021c00
 8005608:	40022000 	.word	0x40022000
 800560c:	40022400 	.word	0x40022400
 8005610:	40013c00 	.word	0x40013c00

08005614 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005614:	b480      	push	{r7}
 8005616:	b085      	sub	sp, #20
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	460b      	mov	r3, r1
 800561e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	691a      	ldr	r2, [r3, #16]
 8005624:	887b      	ldrh	r3, [r7, #2]
 8005626:	4013      	ands	r3, r2
 8005628:	2b00      	cmp	r3, #0
 800562a:	d002      	beq.n	8005632 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800562c:	2301      	movs	r3, #1
 800562e:	73fb      	strb	r3, [r7, #15]
 8005630:	e001      	b.n	8005636 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005632:	2300      	movs	r3, #0
 8005634:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005636:	7bfb      	ldrb	r3, [r7, #15]
}
 8005638:	4618      	mov	r0, r3
 800563a:	3714      	adds	r7, #20
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	460b      	mov	r3, r1
 800564e:	807b      	strh	r3, [r7, #2]
 8005650:	4613      	mov	r3, r2
 8005652:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005654:	787b      	ldrb	r3, [r7, #1]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d003      	beq.n	8005662 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800565a:	887a      	ldrh	r2, [r7, #2]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005660:	e003      	b.n	800566a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005662:	887b      	ldrh	r3, [r7, #2]
 8005664:	041a      	lsls	r2, r3, #16
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	619a      	str	r2, [r3, #24]
}
 800566a:	bf00      	nop
 800566c:	370c      	adds	r7, #12
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr
	...

08005678 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b082      	sub	sp, #8
 800567c:	af00      	add	r7, sp, #0
 800567e:	4603      	mov	r3, r0
 8005680:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005682:	4b08      	ldr	r3, [pc, #32]	; (80056a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005684:	695a      	ldr	r2, [r3, #20]
 8005686:	88fb      	ldrh	r3, [r7, #6]
 8005688:	4013      	ands	r3, r2
 800568a:	2b00      	cmp	r3, #0
 800568c:	d006      	beq.n	800569c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800568e:	4a05      	ldr	r2, [pc, #20]	; (80056a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005690:	88fb      	ldrh	r3, [r7, #6]
 8005692:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005694:	88fb      	ldrh	r3, [r7, #6]
 8005696:	4618      	mov	r0, r3
 8005698:	f7fb fd22 	bl	80010e0 <HAL_GPIO_EXTI_Callback>
  }
}
 800569c:	bf00      	nop
 800569e:	3708      	adds	r7, #8
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	40013c00 	.word	0x40013c00

080056a8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d101      	bne.n	80056ba <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e0bf      	b.n	800583a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d106      	bne.n	80056d4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 f8ba 	bl	8005848 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2202      	movs	r2, #2
 80056d8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	699a      	ldr	r2, [r3, #24]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80056ea:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	6999      	ldr	r1, [r3, #24]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	685a      	ldr	r2, [r3, #4]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005700:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	430a      	orrs	r2, r1
 800570e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	6899      	ldr	r1, [r3, #8]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	4b4a      	ldr	r3, [pc, #296]	; (8005844 <HAL_LTDC_Init+0x19c>)
 800571c:	400b      	ands	r3, r1
 800571e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	695b      	ldr	r3, [r3, #20]
 8005724:	041b      	lsls	r3, r3, #16
 8005726:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	6899      	ldr	r1, [r3, #8]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	699a      	ldr	r2, [r3, #24]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	431a      	orrs	r2, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	430a      	orrs	r2, r1
 800573c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68d9      	ldr	r1, [r3, #12]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	4b3e      	ldr	r3, [pc, #248]	; (8005844 <HAL_LTDC_Init+0x19c>)
 800574a:	400b      	ands	r3, r1
 800574c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	69db      	ldr	r3, [r3, #28]
 8005752:	041b      	lsls	r3, r3, #16
 8005754:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68d9      	ldr	r1, [r3, #12]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a1a      	ldr	r2, [r3, #32]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	431a      	orrs	r2, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	430a      	orrs	r2, r1
 800576a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	6919      	ldr	r1, [r3, #16]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	4b33      	ldr	r3, [pc, #204]	; (8005844 <HAL_LTDC_Init+0x19c>)
 8005778:	400b      	ands	r3, r1
 800577a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005780:	041b      	lsls	r3, r3, #16
 8005782:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	6919      	ldr	r1, [r3, #16]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	431a      	orrs	r2, r3
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	430a      	orrs	r2, r1
 8005798:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	6959      	ldr	r1, [r3, #20]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	4b27      	ldr	r3, [pc, #156]	; (8005844 <HAL_LTDC_Init+0x19c>)
 80057a6:	400b      	ands	r3, r1
 80057a8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ae:	041b      	lsls	r3, r3, #16
 80057b0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	6959      	ldr	r1, [r3, #20]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	431a      	orrs	r2, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	430a      	orrs	r2, r1
 80057c6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80057ce:	021b      	lsls	r3, r3, #8
 80057d0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80057d8:	041b      	lsls	r3, r3, #16
 80057da:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80057ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80057f2:	68ba      	ldr	r2, [r7, #8]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80057fe:	431a      	orrs	r2, r3
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	430a      	orrs	r2, r1
 8005806:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f042 0206 	orr.w	r2, r2, #6
 8005816:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	699a      	ldr	r2, [r3, #24]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f042 0201 	orr.w	r2, r2, #1
 8005826:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3710      	adds	r7, #16
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	f000f800 	.word	0xf000f800

08005848 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8005850:	bf00      	nop
 8005852:	370c      	adds	r7, #12
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr

0800585c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800585c:	b5b0      	push	{r4, r5, r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	60b9      	str	r1, [r7, #8]
 8005866:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800586e:	2b01      	cmp	r3, #1
 8005870:	d101      	bne.n	8005876 <HAL_LTDC_ConfigLayer+0x1a>
 8005872:	2302      	movs	r3, #2
 8005874:	e02c      	b.n	80058d0 <HAL_LTDC_ConfigLayer+0x74>
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2201      	movs	r2, #1
 800587a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2202      	movs	r2, #2
 8005882:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005886:	68fa      	ldr	r2, [r7, #12]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2134      	movs	r1, #52	; 0x34
 800588c:	fb01 f303 	mul.w	r3, r1, r3
 8005890:	4413      	add	r3, r2
 8005892:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	4614      	mov	r4, r2
 800589a:	461d      	mov	r5, r3
 800589c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800589e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80058a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80058a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80058a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80058a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80058a8:	682b      	ldr	r3, [r5, #0]
 80058aa:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	68b9      	ldr	r1, [r7, #8]
 80058b0:	68f8      	ldr	r0, [r7, #12]
 80058b2:	f000 f83b 	bl	800592c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2201      	movs	r2, #1
 80058bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2201      	movs	r2, #1
 80058c2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2200      	movs	r2, #0
 80058ca:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3710      	adds	r7, #16
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bdb0      	pop	{r4, r5, r7, pc}

080058d8 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 80058d8:	b480      	push	{r7}
 80058da:	b083      	sub	sp, #12
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d101      	bne.n	80058ee <HAL_LTDC_EnableDither+0x16>
 80058ea:	2302      	movs	r3, #2
 80058ec:	e016      	b.n	800591c <HAL_LTDC_EnableDither+0x44>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2201      	movs	r2, #1
 80058f2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2202      	movs	r2, #2
 80058fa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 80058fe:	4b0a      	ldr	r3, [pc, #40]	; (8005928 <HAL_LTDC_EnableDither+0x50>)
 8005900:	699b      	ldr	r3, [r3, #24]
 8005902:	4a09      	ldr	r2, [pc, #36]	; (8005928 <HAL_LTDC_EnableDither+0x50>)
 8005904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005908:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2201      	movs	r2, #1
 800590e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800591a:	2300      	movs	r3, #0
}
 800591c:	4618      	mov	r0, r3
 800591e:	370c      	adds	r7, #12
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr
 8005928:	40016800 	.word	0x40016800

0800592c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800592c:	b480      	push	{r7}
 800592e:	b089      	sub	sp, #36	; 0x24
 8005930:	af00      	add	r7, sp, #0
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	685a      	ldr	r2, [r3, #4]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	0c1b      	lsrs	r3, r3, #16
 8005944:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005948:	4413      	add	r3, r2
 800594a:	041b      	lsls	r3, r3, #16
 800594c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	461a      	mov	r2, r3
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	01db      	lsls	r3, r3, #7
 8005958:	4413      	add	r3, r2
 800595a:	3384      	adds	r3, #132	; 0x84
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	6812      	ldr	r2, [r2, #0]
 8005962:	4611      	mov	r1, r2
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	01d2      	lsls	r2, r2, #7
 8005968:	440a      	add	r2, r1
 800596a:	3284      	adds	r2, #132	; 0x84
 800596c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005970:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	0c1b      	lsrs	r3, r3, #16
 800597e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005982:	4413      	add	r3, r2
 8005984:	1c5a      	adds	r2, r3, #1
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4619      	mov	r1, r3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	01db      	lsls	r3, r3, #7
 8005990:	440b      	add	r3, r1
 8005992:	3384      	adds	r3, #132	; 0x84
 8005994:	4619      	mov	r1, r3
 8005996:	69fb      	ldr	r3, [r7, #28]
 8005998:	4313      	orrs	r3, r2
 800599a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	68da      	ldr	r2, [r3, #12]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059aa:	4413      	add	r3, r2
 80059ac:	041b      	lsls	r3, r3, #16
 80059ae:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	461a      	mov	r2, r3
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	01db      	lsls	r3, r3, #7
 80059ba:	4413      	add	r3, r2
 80059bc:	3384      	adds	r3, #132	; 0x84
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	68fa      	ldr	r2, [r7, #12]
 80059c2:	6812      	ldr	r2, [r2, #0]
 80059c4:	4611      	mov	r1, r2
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	01d2      	lsls	r2, r2, #7
 80059ca:	440a      	add	r2, r1
 80059cc:	3284      	adds	r2, #132	; 0x84
 80059ce:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80059d2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	689a      	ldr	r2, [r3, #8]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059e2:	4413      	add	r3, r2
 80059e4:	1c5a      	adds	r2, r3, #1
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4619      	mov	r1, r3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	01db      	lsls	r3, r3, #7
 80059f0:	440b      	add	r3, r1
 80059f2:	3384      	adds	r3, #132	; 0x84
 80059f4:	4619      	mov	r1, r3
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	461a      	mov	r2, r3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	01db      	lsls	r3, r3, #7
 8005a06:	4413      	add	r3, r2
 8005a08:	3384      	adds	r3, #132	; 0x84
 8005a0a:	691b      	ldr	r3, [r3, #16]
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	6812      	ldr	r2, [r2, #0]
 8005a10:	4611      	mov	r1, r2
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	01d2      	lsls	r2, r2, #7
 8005a16:	440a      	add	r2, r1
 8005a18:	3284      	adds	r2, #132	; 0x84
 8005a1a:	f023 0307 	bic.w	r3, r3, #7
 8005a1e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	461a      	mov	r2, r3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	01db      	lsls	r3, r3, #7
 8005a2a:	4413      	add	r3, r2
 8005a2c:	3384      	adds	r3, #132	; 0x84
 8005a2e:	461a      	mov	r2, r3
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005a3c:	021b      	lsls	r3, r3, #8
 8005a3e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005a46:	041b      	lsls	r3, r3, #16
 8005a48:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	699b      	ldr	r3, [r3, #24]
 8005a4e:	061b      	lsls	r3, r3, #24
 8005a50:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	461a      	mov	r2, r3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	01db      	lsls	r3, r3, #7
 8005a5c:	4413      	add	r3, r2
 8005a5e:	3384      	adds	r3, #132	; 0x84
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	461a      	mov	r2, r3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	01db      	lsls	r3, r3, #7
 8005a6c:	4413      	add	r3, r2
 8005a6e:	3384      	adds	r3, #132	; 0x84
 8005a70:	461a      	mov	r2, r3
 8005a72:	2300      	movs	r3, #0
 8005a74:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	431a      	orrs	r2, r3
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	431a      	orrs	r2, r3
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	01db      	lsls	r3, r3, #7
 8005a90:	440b      	add	r3, r1
 8005a92:	3384      	adds	r3, #132	; 0x84
 8005a94:	4619      	mov	r1, r3
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	01db      	lsls	r3, r3, #7
 8005aa6:	4413      	add	r3, r2
 8005aa8:	3384      	adds	r3, #132	; 0x84
 8005aaa:	695b      	ldr	r3, [r3, #20]
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	6812      	ldr	r2, [r2, #0]
 8005ab0:	4611      	mov	r1, r2
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	01d2      	lsls	r2, r2, #7
 8005ab6:	440a      	add	r2, r1
 8005ab8:	3284      	adds	r2, #132	; 0x84
 8005aba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005abe:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	01db      	lsls	r3, r3, #7
 8005aca:	4413      	add	r3, r2
 8005acc:	3384      	adds	r3, #132	; 0x84
 8005ace:	461a      	mov	r2, r3
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	695b      	ldr	r3, [r3, #20]
 8005ad4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	461a      	mov	r2, r3
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	01db      	lsls	r3, r3, #7
 8005ae0:	4413      	add	r3, r2
 8005ae2:	3384      	adds	r3, #132	; 0x84
 8005ae4:	69db      	ldr	r3, [r3, #28]
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	6812      	ldr	r2, [r2, #0]
 8005aea:	4611      	mov	r1, r2
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	01d2      	lsls	r2, r2, #7
 8005af0:	440a      	add	r2, r1
 8005af2:	3284      	adds	r2, #132	; 0x84
 8005af4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005af8:	f023 0307 	bic.w	r3, r3, #7
 8005afc:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	69da      	ldr	r2, [r3, #28]
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	6a1b      	ldr	r3, [r3, #32]
 8005b06:	68f9      	ldr	r1, [r7, #12]
 8005b08:	6809      	ldr	r1, [r1, #0]
 8005b0a:	4608      	mov	r0, r1
 8005b0c:	6879      	ldr	r1, [r7, #4]
 8005b0e:	01c9      	lsls	r1, r1, #7
 8005b10:	4401      	add	r1, r0
 8005b12:	3184      	adds	r1, #132	; 0x84
 8005b14:	4313      	orrs	r3, r2
 8005b16:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	01db      	lsls	r3, r3, #7
 8005b22:	4413      	add	r3, r2
 8005b24:	3384      	adds	r3, #132	; 0x84
 8005b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	01db      	lsls	r3, r3, #7
 8005b32:	4413      	add	r3, r2
 8005b34:	3384      	adds	r3, #132	; 0x84
 8005b36:	461a      	mov	r2, r3
 8005b38:	2300      	movs	r3, #0
 8005b3a:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	461a      	mov	r2, r3
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	01db      	lsls	r3, r3, #7
 8005b46:	4413      	add	r3, r2
 8005b48:	3384      	adds	r3, #132	; 0x84
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b50:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d102      	bne.n	8005b60 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8005b5a:	2304      	movs	r3, #4
 8005b5c:	61fb      	str	r3, [r7, #28]
 8005b5e:	e01b      	b.n	8005b98 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d102      	bne.n	8005b6e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	61fb      	str	r3, [r7, #28]
 8005b6c:	e014      	b.n	8005b98 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	2b04      	cmp	r3, #4
 8005b74:	d00b      	beq.n	8005b8e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005b7a:	2b02      	cmp	r3, #2
 8005b7c:	d007      	beq.n	8005b8e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005b82:	2b03      	cmp	r3, #3
 8005b84:	d003      	beq.n	8005b8e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005b8a:	2b07      	cmp	r3, #7
 8005b8c:	d102      	bne.n	8005b94 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8005b8e:	2302      	movs	r3, #2
 8005b90:	61fb      	str	r3, [r7, #28]
 8005b92:	e001      	b.n	8005b98 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005b94:	2301      	movs	r3, #1
 8005b96:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	01db      	lsls	r3, r3, #7
 8005ba2:	4413      	add	r3, r2
 8005ba4:	3384      	adds	r3, #132	; 0x84
 8005ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba8:	68fa      	ldr	r2, [r7, #12]
 8005baa:	6812      	ldr	r2, [r2, #0]
 8005bac:	4611      	mov	r1, r2
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	01d2      	lsls	r2, r2, #7
 8005bb2:	440a      	add	r2, r1
 8005bb4:	3284      	adds	r2, #132	; 0x84
 8005bb6:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8005bba:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc0:	69fa      	ldr	r2, [r7, #28]
 8005bc2:	fb02 f303 	mul.w	r3, r2, r3
 8005bc6:	041a      	lsls	r2, r3, #16
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	6859      	ldr	r1, [r3, #4]
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	1acb      	subs	r3, r1, r3
 8005bd2:	69f9      	ldr	r1, [r7, #28]
 8005bd4:	fb01 f303 	mul.w	r3, r1, r3
 8005bd8:	3303      	adds	r3, #3
 8005bda:	68f9      	ldr	r1, [r7, #12]
 8005bdc:	6809      	ldr	r1, [r1, #0]
 8005bde:	4608      	mov	r0, r1
 8005be0:	6879      	ldr	r1, [r7, #4]
 8005be2:	01c9      	lsls	r1, r1, #7
 8005be4:	4401      	add	r1, r0
 8005be6:	3184      	adds	r1, #132	; 0x84
 8005be8:	4313      	orrs	r3, r2
 8005bea:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	01db      	lsls	r3, r3, #7
 8005bf6:	4413      	add	r3, r2
 8005bf8:	3384      	adds	r3, #132	; 0x84
 8005bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bfc:	68fa      	ldr	r2, [r7, #12]
 8005bfe:	6812      	ldr	r2, [r2, #0]
 8005c00:	4611      	mov	r1, r2
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	01d2      	lsls	r2, r2, #7
 8005c06:	440a      	add	r2, r1
 8005c08:	3284      	adds	r2, #132	; 0x84
 8005c0a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005c0e:	f023 0307 	bic.w	r3, r3, #7
 8005c12:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	461a      	mov	r2, r3
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	01db      	lsls	r3, r3, #7
 8005c1e:	4413      	add	r3, r2
 8005c20:	3384      	adds	r3, #132	; 0x84
 8005c22:	461a      	mov	r2, r3
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c28:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	461a      	mov	r2, r3
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	01db      	lsls	r3, r3, #7
 8005c34:	4413      	add	r3, r2
 8005c36:	3384      	adds	r3, #132	; 0x84
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	6812      	ldr	r2, [r2, #0]
 8005c3e:	4611      	mov	r1, r2
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	01d2      	lsls	r2, r2, #7
 8005c44:	440a      	add	r2, r1
 8005c46:	3284      	adds	r2, #132	; 0x84
 8005c48:	f043 0301 	orr.w	r3, r3, #1
 8005c4c:	6013      	str	r3, [r2, #0]
}
 8005c4e:	bf00      	nop
 8005c50:	3724      	adds	r7, #36	; 0x24
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
	...

08005c5c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b082      	sub	sp, #8
 8005c60:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005c62:	2300      	movs	r3, #0
 8005c64:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005c66:	2300      	movs	r3, #0
 8005c68:	603b      	str	r3, [r7, #0]
 8005c6a:	4b20      	ldr	r3, [pc, #128]	; (8005cec <HAL_PWREx_EnableOverDrive+0x90>)
 8005c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6e:	4a1f      	ldr	r2, [pc, #124]	; (8005cec <HAL_PWREx_EnableOverDrive+0x90>)
 8005c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c74:	6413      	str	r3, [r2, #64]	; 0x40
 8005c76:	4b1d      	ldr	r3, [pc, #116]	; (8005cec <HAL_PWREx_EnableOverDrive+0x90>)
 8005c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c7e:	603b      	str	r3, [r7, #0]
 8005c80:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005c82:	4b1b      	ldr	r3, [pc, #108]	; (8005cf0 <HAL_PWREx_EnableOverDrive+0x94>)
 8005c84:	2201      	movs	r2, #1
 8005c86:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005c88:	f7fe fdaa 	bl	80047e0 <HAL_GetTick>
 8005c8c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005c8e:	e009      	b.n	8005ca4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005c90:	f7fe fda6 	bl	80047e0 <HAL_GetTick>
 8005c94:	4602      	mov	r2, r0
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	1ad3      	subs	r3, r2, r3
 8005c9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c9e:	d901      	bls.n	8005ca4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005ca0:	2303      	movs	r3, #3
 8005ca2:	e01f      	b.n	8005ce4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005ca4:	4b13      	ldr	r3, [pc, #76]	; (8005cf4 <HAL_PWREx_EnableOverDrive+0x98>)
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cb0:	d1ee      	bne.n	8005c90 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005cb2:	4b11      	ldr	r3, [pc, #68]	; (8005cf8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005cb8:	f7fe fd92 	bl	80047e0 <HAL_GetTick>
 8005cbc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005cbe:	e009      	b.n	8005cd4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005cc0:	f7fe fd8e 	bl	80047e0 <HAL_GetTick>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	1ad3      	subs	r3, r2, r3
 8005cca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005cce:	d901      	bls.n	8005cd4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005cd0:	2303      	movs	r3, #3
 8005cd2:	e007      	b.n	8005ce4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005cd4:	4b07      	ldr	r3, [pc, #28]	; (8005cf4 <HAL_PWREx_EnableOverDrive+0x98>)
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cdc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ce0:	d1ee      	bne.n	8005cc0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005ce2:	2300      	movs	r3, #0
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3708      	adds	r7, #8
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	40023800 	.word	0x40023800
 8005cf0:	420e0040 	.word	0x420e0040
 8005cf4:	40007000 	.word	0x40007000
 8005cf8:	420e0044 	.word	0x420e0044

08005cfc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b086      	sub	sp, #24
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d101      	bne.n	8005d0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e264      	b.n	80061d8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 0301 	and.w	r3, r3, #1
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d075      	beq.n	8005e06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005d1a:	4ba3      	ldr	r3, [pc, #652]	; (8005fa8 <HAL_RCC_OscConfig+0x2ac>)
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	f003 030c 	and.w	r3, r3, #12
 8005d22:	2b04      	cmp	r3, #4
 8005d24:	d00c      	beq.n	8005d40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d26:	4ba0      	ldr	r3, [pc, #640]	; (8005fa8 <HAL_RCC_OscConfig+0x2ac>)
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005d2e:	2b08      	cmp	r3, #8
 8005d30:	d112      	bne.n	8005d58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d32:	4b9d      	ldr	r3, [pc, #628]	; (8005fa8 <HAL_RCC_OscConfig+0x2ac>)
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d3e:	d10b      	bne.n	8005d58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d40:	4b99      	ldr	r3, [pc, #612]	; (8005fa8 <HAL_RCC_OscConfig+0x2ac>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d05b      	beq.n	8005e04 <HAL_RCC_OscConfig+0x108>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d157      	bne.n	8005e04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	e23f      	b.n	80061d8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d60:	d106      	bne.n	8005d70 <HAL_RCC_OscConfig+0x74>
 8005d62:	4b91      	ldr	r3, [pc, #580]	; (8005fa8 <HAL_RCC_OscConfig+0x2ac>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a90      	ldr	r2, [pc, #576]	; (8005fa8 <HAL_RCC_OscConfig+0x2ac>)
 8005d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d6c:	6013      	str	r3, [r2, #0]
 8005d6e:	e01d      	b.n	8005dac <HAL_RCC_OscConfig+0xb0>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d78:	d10c      	bne.n	8005d94 <HAL_RCC_OscConfig+0x98>
 8005d7a:	4b8b      	ldr	r3, [pc, #556]	; (8005fa8 <HAL_RCC_OscConfig+0x2ac>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a8a      	ldr	r2, [pc, #552]	; (8005fa8 <HAL_RCC_OscConfig+0x2ac>)
 8005d80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d84:	6013      	str	r3, [r2, #0]
 8005d86:	4b88      	ldr	r3, [pc, #544]	; (8005fa8 <HAL_RCC_OscConfig+0x2ac>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a87      	ldr	r2, [pc, #540]	; (8005fa8 <HAL_RCC_OscConfig+0x2ac>)
 8005d8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d90:	6013      	str	r3, [r2, #0]
 8005d92:	e00b      	b.n	8005dac <HAL_RCC_OscConfig+0xb0>
 8005d94:	4b84      	ldr	r3, [pc, #528]	; (8005fa8 <HAL_RCC_OscConfig+0x2ac>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a83      	ldr	r2, [pc, #524]	; (8005fa8 <HAL_RCC_OscConfig+0x2ac>)
 8005d9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d9e:	6013      	str	r3, [r2, #0]
 8005da0:	4b81      	ldr	r3, [pc, #516]	; (8005fa8 <HAL_RCC_OscConfig+0x2ac>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a80      	ldr	r2, [pc, #512]	; (8005fa8 <HAL_RCC_OscConfig+0x2ac>)
 8005da6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005daa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d013      	beq.n	8005ddc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005db4:	f7fe fd14 	bl	80047e0 <HAL_GetTick>
 8005db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dba:	e008      	b.n	8005dce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005dbc:	f7fe fd10 	bl	80047e0 <HAL_GetTick>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	1ad3      	subs	r3, r2, r3
 8005dc6:	2b64      	cmp	r3, #100	; 0x64
 8005dc8:	d901      	bls.n	8005dce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	e204      	b.n	80061d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dce:	4b76      	ldr	r3, [pc, #472]	; (8005fa8 <HAL_RCC_OscConfig+0x2ac>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d0f0      	beq.n	8005dbc <HAL_RCC_OscConfig+0xc0>
 8005dda:	e014      	b.n	8005e06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ddc:	f7fe fd00 	bl	80047e0 <HAL_GetTick>
 8005de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005de2:	e008      	b.n	8005df6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005de4:	f7fe fcfc 	bl	80047e0 <HAL_GetTick>
 8005de8:	4602      	mov	r2, r0
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	1ad3      	subs	r3, r2, r3
 8005dee:	2b64      	cmp	r3, #100	; 0x64
 8005df0:	d901      	bls.n	8005df6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005df2:	2303      	movs	r3, #3
 8005df4:	e1f0      	b.n	80061d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005df6:	4b6c      	ldr	r3, [pc, #432]	; (8005fa8 <HAL_RCC_OscConfig+0x2ac>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d1f0      	bne.n	8005de4 <HAL_RCC_OscConfig+0xe8>
 8005e02:	e000      	b.n	8005e06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f003 0302 	and.w	r3, r3, #2
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d063      	beq.n	8005eda <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005e12:	4b65      	ldr	r3, [pc, #404]	; (8005fa8 <HAL_RCC_OscConfig+0x2ac>)
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	f003 030c 	and.w	r3, r3, #12
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00b      	beq.n	8005e36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e1e:	4b62      	ldr	r3, [pc, #392]	; (8005fa8 <HAL_RCC_OscConfig+0x2ac>)
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005e26:	2b08      	cmp	r3, #8
 8005e28:	d11c      	bne.n	8005e64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e2a:	4b5f      	ldr	r3, [pc, #380]	; (8005fa8 <HAL_RCC_OscConfig+0x2ac>)
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d116      	bne.n	8005e64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e36:	4b5c      	ldr	r3, [pc, #368]	; (8005fa8 <HAL_RCC_OscConfig+0x2ac>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f003 0302 	and.w	r3, r3, #2
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d005      	beq.n	8005e4e <HAL_RCC_OscConfig+0x152>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	68db      	ldr	r3, [r3, #12]
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d001      	beq.n	8005e4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e1c4      	b.n	80061d8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e4e:	4b56      	ldr	r3, [pc, #344]	; (8005fa8 <HAL_RCC_OscConfig+0x2ac>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	691b      	ldr	r3, [r3, #16]
 8005e5a:	00db      	lsls	r3, r3, #3
 8005e5c:	4952      	ldr	r1, [pc, #328]	; (8005fa8 <HAL_RCC_OscConfig+0x2ac>)
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e62:	e03a      	b.n	8005eda <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d020      	beq.n	8005eae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e6c:	4b4f      	ldr	r3, [pc, #316]	; (8005fac <HAL_RCC_OscConfig+0x2b0>)
 8005e6e:	2201      	movs	r2, #1
 8005e70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e72:	f7fe fcb5 	bl	80047e0 <HAL_GetTick>
 8005e76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e78:	e008      	b.n	8005e8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e7a:	f7fe fcb1 	bl	80047e0 <HAL_GetTick>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	1ad3      	subs	r3, r2, r3
 8005e84:	2b02      	cmp	r3, #2
 8005e86:	d901      	bls.n	8005e8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005e88:	2303      	movs	r3, #3
 8005e8a:	e1a5      	b.n	80061d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e8c:	4b46      	ldr	r3, [pc, #280]	; (8005fa8 <HAL_RCC_OscConfig+0x2ac>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 0302 	and.w	r3, r3, #2
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d0f0      	beq.n	8005e7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e98:	4b43      	ldr	r3, [pc, #268]	; (8005fa8 <HAL_RCC_OscConfig+0x2ac>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	691b      	ldr	r3, [r3, #16]
 8005ea4:	00db      	lsls	r3, r3, #3
 8005ea6:	4940      	ldr	r1, [pc, #256]	; (8005fa8 <HAL_RCC_OscConfig+0x2ac>)
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	600b      	str	r3, [r1, #0]
 8005eac:	e015      	b.n	8005eda <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005eae:	4b3f      	ldr	r3, [pc, #252]	; (8005fac <HAL_RCC_OscConfig+0x2b0>)
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eb4:	f7fe fc94 	bl	80047e0 <HAL_GetTick>
 8005eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005eba:	e008      	b.n	8005ece <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ebc:	f7fe fc90 	bl	80047e0 <HAL_GetTick>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	2b02      	cmp	r3, #2
 8005ec8:	d901      	bls.n	8005ece <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005eca:	2303      	movs	r3, #3
 8005ecc:	e184      	b.n	80061d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ece:	4b36      	ldr	r3, [pc, #216]	; (8005fa8 <HAL_RCC_OscConfig+0x2ac>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f003 0302 	and.w	r3, r3, #2
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d1f0      	bne.n	8005ebc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f003 0308 	and.w	r3, r3, #8
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d030      	beq.n	8005f48 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	695b      	ldr	r3, [r3, #20]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d016      	beq.n	8005f1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005eee:	4b30      	ldr	r3, [pc, #192]	; (8005fb0 <HAL_RCC_OscConfig+0x2b4>)
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ef4:	f7fe fc74 	bl	80047e0 <HAL_GetTick>
 8005ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005efa:	e008      	b.n	8005f0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005efc:	f7fe fc70 	bl	80047e0 <HAL_GetTick>
 8005f00:	4602      	mov	r2, r0
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	2b02      	cmp	r3, #2
 8005f08:	d901      	bls.n	8005f0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	e164      	b.n	80061d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f0e:	4b26      	ldr	r3, [pc, #152]	; (8005fa8 <HAL_RCC_OscConfig+0x2ac>)
 8005f10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f12:	f003 0302 	and.w	r3, r3, #2
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d0f0      	beq.n	8005efc <HAL_RCC_OscConfig+0x200>
 8005f1a:	e015      	b.n	8005f48 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f1c:	4b24      	ldr	r3, [pc, #144]	; (8005fb0 <HAL_RCC_OscConfig+0x2b4>)
 8005f1e:	2200      	movs	r2, #0
 8005f20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f22:	f7fe fc5d 	bl	80047e0 <HAL_GetTick>
 8005f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f28:	e008      	b.n	8005f3c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f2a:	f7fe fc59 	bl	80047e0 <HAL_GetTick>
 8005f2e:	4602      	mov	r2, r0
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	1ad3      	subs	r3, r2, r3
 8005f34:	2b02      	cmp	r3, #2
 8005f36:	d901      	bls.n	8005f3c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005f38:	2303      	movs	r3, #3
 8005f3a:	e14d      	b.n	80061d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f3c:	4b1a      	ldr	r3, [pc, #104]	; (8005fa8 <HAL_RCC_OscConfig+0x2ac>)
 8005f3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f40:	f003 0302 	and.w	r3, r3, #2
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d1f0      	bne.n	8005f2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 0304 	and.w	r3, r3, #4
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	f000 80a0 	beq.w	8006096 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f56:	2300      	movs	r3, #0
 8005f58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f5a:	4b13      	ldr	r3, [pc, #76]	; (8005fa8 <HAL_RCC_OscConfig+0x2ac>)
 8005f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d10f      	bne.n	8005f86 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f66:	2300      	movs	r3, #0
 8005f68:	60bb      	str	r3, [r7, #8]
 8005f6a:	4b0f      	ldr	r3, [pc, #60]	; (8005fa8 <HAL_RCC_OscConfig+0x2ac>)
 8005f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6e:	4a0e      	ldr	r2, [pc, #56]	; (8005fa8 <HAL_RCC_OscConfig+0x2ac>)
 8005f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f74:	6413      	str	r3, [r2, #64]	; 0x40
 8005f76:	4b0c      	ldr	r3, [pc, #48]	; (8005fa8 <HAL_RCC_OscConfig+0x2ac>)
 8005f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f7e:	60bb      	str	r3, [r7, #8]
 8005f80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f82:	2301      	movs	r3, #1
 8005f84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f86:	4b0b      	ldr	r3, [pc, #44]	; (8005fb4 <HAL_RCC_OscConfig+0x2b8>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d121      	bne.n	8005fd6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f92:	4b08      	ldr	r3, [pc, #32]	; (8005fb4 <HAL_RCC_OscConfig+0x2b8>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a07      	ldr	r2, [pc, #28]	; (8005fb4 <HAL_RCC_OscConfig+0x2b8>)
 8005f98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f9e:	f7fe fc1f 	bl	80047e0 <HAL_GetTick>
 8005fa2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fa4:	e011      	b.n	8005fca <HAL_RCC_OscConfig+0x2ce>
 8005fa6:	bf00      	nop
 8005fa8:	40023800 	.word	0x40023800
 8005fac:	42470000 	.word	0x42470000
 8005fb0:	42470e80 	.word	0x42470e80
 8005fb4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fb8:	f7fe fc12 	bl	80047e0 <HAL_GetTick>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	1ad3      	subs	r3, r2, r3
 8005fc2:	2b02      	cmp	r3, #2
 8005fc4:	d901      	bls.n	8005fca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	e106      	b.n	80061d8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fca:	4b85      	ldr	r3, [pc, #532]	; (80061e0 <HAL_RCC_OscConfig+0x4e4>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d0f0      	beq.n	8005fb8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d106      	bne.n	8005fec <HAL_RCC_OscConfig+0x2f0>
 8005fde:	4b81      	ldr	r3, [pc, #516]	; (80061e4 <HAL_RCC_OscConfig+0x4e8>)
 8005fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fe2:	4a80      	ldr	r2, [pc, #512]	; (80061e4 <HAL_RCC_OscConfig+0x4e8>)
 8005fe4:	f043 0301 	orr.w	r3, r3, #1
 8005fe8:	6713      	str	r3, [r2, #112]	; 0x70
 8005fea:	e01c      	b.n	8006026 <HAL_RCC_OscConfig+0x32a>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	2b05      	cmp	r3, #5
 8005ff2:	d10c      	bne.n	800600e <HAL_RCC_OscConfig+0x312>
 8005ff4:	4b7b      	ldr	r3, [pc, #492]	; (80061e4 <HAL_RCC_OscConfig+0x4e8>)
 8005ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ff8:	4a7a      	ldr	r2, [pc, #488]	; (80061e4 <HAL_RCC_OscConfig+0x4e8>)
 8005ffa:	f043 0304 	orr.w	r3, r3, #4
 8005ffe:	6713      	str	r3, [r2, #112]	; 0x70
 8006000:	4b78      	ldr	r3, [pc, #480]	; (80061e4 <HAL_RCC_OscConfig+0x4e8>)
 8006002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006004:	4a77      	ldr	r2, [pc, #476]	; (80061e4 <HAL_RCC_OscConfig+0x4e8>)
 8006006:	f043 0301 	orr.w	r3, r3, #1
 800600a:	6713      	str	r3, [r2, #112]	; 0x70
 800600c:	e00b      	b.n	8006026 <HAL_RCC_OscConfig+0x32a>
 800600e:	4b75      	ldr	r3, [pc, #468]	; (80061e4 <HAL_RCC_OscConfig+0x4e8>)
 8006010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006012:	4a74      	ldr	r2, [pc, #464]	; (80061e4 <HAL_RCC_OscConfig+0x4e8>)
 8006014:	f023 0301 	bic.w	r3, r3, #1
 8006018:	6713      	str	r3, [r2, #112]	; 0x70
 800601a:	4b72      	ldr	r3, [pc, #456]	; (80061e4 <HAL_RCC_OscConfig+0x4e8>)
 800601c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800601e:	4a71      	ldr	r2, [pc, #452]	; (80061e4 <HAL_RCC_OscConfig+0x4e8>)
 8006020:	f023 0304 	bic.w	r3, r3, #4
 8006024:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d015      	beq.n	800605a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800602e:	f7fe fbd7 	bl	80047e0 <HAL_GetTick>
 8006032:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006034:	e00a      	b.n	800604c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006036:	f7fe fbd3 	bl	80047e0 <HAL_GetTick>
 800603a:	4602      	mov	r2, r0
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	1ad3      	subs	r3, r2, r3
 8006040:	f241 3288 	movw	r2, #5000	; 0x1388
 8006044:	4293      	cmp	r3, r2
 8006046:	d901      	bls.n	800604c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006048:	2303      	movs	r3, #3
 800604a:	e0c5      	b.n	80061d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800604c:	4b65      	ldr	r3, [pc, #404]	; (80061e4 <HAL_RCC_OscConfig+0x4e8>)
 800604e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006050:	f003 0302 	and.w	r3, r3, #2
 8006054:	2b00      	cmp	r3, #0
 8006056:	d0ee      	beq.n	8006036 <HAL_RCC_OscConfig+0x33a>
 8006058:	e014      	b.n	8006084 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800605a:	f7fe fbc1 	bl	80047e0 <HAL_GetTick>
 800605e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006060:	e00a      	b.n	8006078 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006062:	f7fe fbbd 	bl	80047e0 <HAL_GetTick>
 8006066:	4602      	mov	r2, r0
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	1ad3      	subs	r3, r2, r3
 800606c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006070:	4293      	cmp	r3, r2
 8006072:	d901      	bls.n	8006078 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006074:	2303      	movs	r3, #3
 8006076:	e0af      	b.n	80061d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006078:	4b5a      	ldr	r3, [pc, #360]	; (80061e4 <HAL_RCC_OscConfig+0x4e8>)
 800607a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800607c:	f003 0302 	and.w	r3, r3, #2
 8006080:	2b00      	cmp	r3, #0
 8006082:	d1ee      	bne.n	8006062 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006084:	7dfb      	ldrb	r3, [r7, #23]
 8006086:	2b01      	cmp	r3, #1
 8006088:	d105      	bne.n	8006096 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800608a:	4b56      	ldr	r3, [pc, #344]	; (80061e4 <HAL_RCC_OscConfig+0x4e8>)
 800608c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800608e:	4a55      	ldr	r2, [pc, #340]	; (80061e4 <HAL_RCC_OscConfig+0x4e8>)
 8006090:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006094:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	699b      	ldr	r3, [r3, #24]
 800609a:	2b00      	cmp	r3, #0
 800609c:	f000 809b 	beq.w	80061d6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80060a0:	4b50      	ldr	r3, [pc, #320]	; (80061e4 <HAL_RCC_OscConfig+0x4e8>)
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	f003 030c 	and.w	r3, r3, #12
 80060a8:	2b08      	cmp	r3, #8
 80060aa:	d05c      	beq.n	8006166 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	699b      	ldr	r3, [r3, #24]
 80060b0:	2b02      	cmp	r3, #2
 80060b2:	d141      	bne.n	8006138 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060b4:	4b4c      	ldr	r3, [pc, #304]	; (80061e8 <HAL_RCC_OscConfig+0x4ec>)
 80060b6:	2200      	movs	r2, #0
 80060b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060ba:	f7fe fb91 	bl	80047e0 <HAL_GetTick>
 80060be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060c0:	e008      	b.n	80060d4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060c2:	f7fe fb8d 	bl	80047e0 <HAL_GetTick>
 80060c6:	4602      	mov	r2, r0
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	1ad3      	subs	r3, r2, r3
 80060cc:	2b02      	cmp	r3, #2
 80060ce:	d901      	bls.n	80060d4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80060d0:	2303      	movs	r3, #3
 80060d2:	e081      	b.n	80061d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060d4:	4b43      	ldr	r3, [pc, #268]	; (80061e4 <HAL_RCC_OscConfig+0x4e8>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d1f0      	bne.n	80060c2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	69da      	ldr	r2, [r3, #28]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6a1b      	ldr	r3, [r3, #32]
 80060e8:	431a      	orrs	r2, r3
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ee:	019b      	lsls	r3, r3, #6
 80060f0:	431a      	orrs	r2, r3
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f6:	085b      	lsrs	r3, r3, #1
 80060f8:	3b01      	subs	r3, #1
 80060fa:	041b      	lsls	r3, r3, #16
 80060fc:	431a      	orrs	r2, r3
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006102:	061b      	lsls	r3, r3, #24
 8006104:	4937      	ldr	r1, [pc, #220]	; (80061e4 <HAL_RCC_OscConfig+0x4e8>)
 8006106:	4313      	orrs	r3, r2
 8006108:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800610a:	4b37      	ldr	r3, [pc, #220]	; (80061e8 <HAL_RCC_OscConfig+0x4ec>)
 800610c:	2201      	movs	r2, #1
 800610e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006110:	f7fe fb66 	bl	80047e0 <HAL_GetTick>
 8006114:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006116:	e008      	b.n	800612a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006118:	f7fe fb62 	bl	80047e0 <HAL_GetTick>
 800611c:	4602      	mov	r2, r0
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	1ad3      	subs	r3, r2, r3
 8006122:	2b02      	cmp	r3, #2
 8006124:	d901      	bls.n	800612a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006126:	2303      	movs	r3, #3
 8006128:	e056      	b.n	80061d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800612a:	4b2e      	ldr	r3, [pc, #184]	; (80061e4 <HAL_RCC_OscConfig+0x4e8>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006132:	2b00      	cmp	r3, #0
 8006134:	d0f0      	beq.n	8006118 <HAL_RCC_OscConfig+0x41c>
 8006136:	e04e      	b.n	80061d6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006138:	4b2b      	ldr	r3, [pc, #172]	; (80061e8 <HAL_RCC_OscConfig+0x4ec>)
 800613a:	2200      	movs	r2, #0
 800613c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800613e:	f7fe fb4f 	bl	80047e0 <HAL_GetTick>
 8006142:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006144:	e008      	b.n	8006158 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006146:	f7fe fb4b 	bl	80047e0 <HAL_GetTick>
 800614a:	4602      	mov	r2, r0
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	2b02      	cmp	r3, #2
 8006152:	d901      	bls.n	8006158 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006154:	2303      	movs	r3, #3
 8006156:	e03f      	b.n	80061d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006158:	4b22      	ldr	r3, [pc, #136]	; (80061e4 <HAL_RCC_OscConfig+0x4e8>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006160:	2b00      	cmp	r3, #0
 8006162:	d1f0      	bne.n	8006146 <HAL_RCC_OscConfig+0x44a>
 8006164:	e037      	b.n	80061d6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	699b      	ldr	r3, [r3, #24]
 800616a:	2b01      	cmp	r3, #1
 800616c:	d101      	bne.n	8006172 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	e032      	b.n	80061d8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006172:	4b1c      	ldr	r3, [pc, #112]	; (80061e4 <HAL_RCC_OscConfig+0x4e8>)
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	699b      	ldr	r3, [r3, #24]
 800617c:	2b01      	cmp	r3, #1
 800617e:	d028      	beq.n	80061d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800618a:	429a      	cmp	r2, r3
 800618c:	d121      	bne.n	80061d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006198:	429a      	cmp	r2, r3
 800619a:	d11a      	bne.n	80061d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800619c:	68fa      	ldr	r2, [r7, #12]
 800619e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80061a2:	4013      	ands	r3, r2
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80061a8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d111      	bne.n	80061d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b8:	085b      	lsrs	r3, r3, #1
 80061ba:	3b01      	subs	r3, #1
 80061bc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80061be:	429a      	cmp	r2, r3
 80061c0:	d107      	bne.n	80061d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061cc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d001      	beq.n	80061d6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	e000      	b.n	80061d8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80061d6:	2300      	movs	r3, #0
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3718      	adds	r7, #24
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	40007000 	.word	0x40007000
 80061e4:	40023800 	.word	0x40023800
 80061e8:	42470060 	.word	0x42470060

080061ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d101      	bne.n	8006200 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	e0cc      	b.n	800639a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006200:	4b68      	ldr	r3, [pc, #416]	; (80063a4 <HAL_RCC_ClockConfig+0x1b8>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 030f 	and.w	r3, r3, #15
 8006208:	683a      	ldr	r2, [r7, #0]
 800620a:	429a      	cmp	r2, r3
 800620c:	d90c      	bls.n	8006228 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800620e:	4b65      	ldr	r3, [pc, #404]	; (80063a4 <HAL_RCC_ClockConfig+0x1b8>)
 8006210:	683a      	ldr	r2, [r7, #0]
 8006212:	b2d2      	uxtb	r2, r2
 8006214:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006216:	4b63      	ldr	r3, [pc, #396]	; (80063a4 <HAL_RCC_ClockConfig+0x1b8>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f003 030f 	and.w	r3, r3, #15
 800621e:	683a      	ldr	r2, [r7, #0]
 8006220:	429a      	cmp	r2, r3
 8006222:	d001      	beq.n	8006228 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	e0b8      	b.n	800639a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f003 0302 	and.w	r3, r3, #2
 8006230:	2b00      	cmp	r3, #0
 8006232:	d020      	beq.n	8006276 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f003 0304 	and.w	r3, r3, #4
 800623c:	2b00      	cmp	r3, #0
 800623e:	d005      	beq.n	800624c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006240:	4b59      	ldr	r3, [pc, #356]	; (80063a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	4a58      	ldr	r2, [pc, #352]	; (80063a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006246:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800624a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f003 0308 	and.w	r3, r3, #8
 8006254:	2b00      	cmp	r3, #0
 8006256:	d005      	beq.n	8006264 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006258:	4b53      	ldr	r3, [pc, #332]	; (80063a8 <HAL_RCC_ClockConfig+0x1bc>)
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	4a52      	ldr	r2, [pc, #328]	; (80063a8 <HAL_RCC_ClockConfig+0x1bc>)
 800625e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006262:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006264:	4b50      	ldr	r3, [pc, #320]	; (80063a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	494d      	ldr	r1, [pc, #308]	; (80063a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006272:	4313      	orrs	r3, r2
 8006274:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f003 0301 	and.w	r3, r3, #1
 800627e:	2b00      	cmp	r3, #0
 8006280:	d044      	beq.n	800630c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	2b01      	cmp	r3, #1
 8006288:	d107      	bne.n	800629a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800628a:	4b47      	ldr	r3, [pc, #284]	; (80063a8 <HAL_RCC_ClockConfig+0x1bc>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006292:	2b00      	cmp	r3, #0
 8006294:	d119      	bne.n	80062ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	e07f      	b.n	800639a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	2b02      	cmp	r3, #2
 80062a0:	d003      	beq.n	80062aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062a6:	2b03      	cmp	r3, #3
 80062a8:	d107      	bne.n	80062ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062aa:	4b3f      	ldr	r3, [pc, #252]	; (80063a8 <HAL_RCC_ClockConfig+0x1bc>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d109      	bne.n	80062ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e06f      	b.n	800639a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062ba:	4b3b      	ldr	r3, [pc, #236]	; (80063a8 <HAL_RCC_ClockConfig+0x1bc>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 0302 	and.w	r3, r3, #2
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d101      	bne.n	80062ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	e067      	b.n	800639a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80062ca:	4b37      	ldr	r3, [pc, #220]	; (80063a8 <HAL_RCC_ClockConfig+0x1bc>)
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	f023 0203 	bic.w	r2, r3, #3
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	4934      	ldr	r1, [pc, #208]	; (80063a8 <HAL_RCC_ClockConfig+0x1bc>)
 80062d8:	4313      	orrs	r3, r2
 80062da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80062dc:	f7fe fa80 	bl	80047e0 <HAL_GetTick>
 80062e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062e2:	e00a      	b.n	80062fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062e4:	f7fe fa7c 	bl	80047e0 <HAL_GetTick>
 80062e8:	4602      	mov	r2, r0
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	1ad3      	subs	r3, r2, r3
 80062ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d901      	bls.n	80062fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80062f6:	2303      	movs	r3, #3
 80062f8:	e04f      	b.n	800639a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062fa:	4b2b      	ldr	r3, [pc, #172]	; (80063a8 <HAL_RCC_ClockConfig+0x1bc>)
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	f003 020c 	and.w	r2, r3, #12
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	429a      	cmp	r2, r3
 800630a:	d1eb      	bne.n	80062e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800630c:	4b25      	ldr	r3, [pc, #148]	; (80063a4 <HAL_RCC_ClockConfig+0x1b8>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f003 030f 	and.w	r3, r3, #15
 8006314:	683a      	ldr	r2, [r7, #0]
 8006316:	429a      	cmp	r2, r3
 8006318:	d20c      	bcs.n	8006334 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800631a:	4b22      	ldr	r3, [pc, #136]	; (80063a4 <HAL_RCC_ClockConfig+0x1b8>)
 800631c:	683a      	ldr	r2, [r7, #0]
 800631e:	b2d2      	uxtb	r2, r2
 8006320:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006322:	4b20      	ldr	r3, [pc, #128]	; (80063a4 <HAL_RCC_ClockConfig+0x1b8>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f003 030f 	and.w	r3, r3, #15
 800632a:	683a      	ldr	r2, [r7, #0]
 800632c:	429a      	cmp	r2, r3
 800632e:	d001      	beq.n	8006334 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	e032      	b.n	800639a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 0304 	and.w	r3, r3, #4
 800633c:	2b00      	cmp	r3, #0
 800633e:	d008      	beq.n	8006352 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006340:	4b19      	ldr	r3, [pc, #100]	; (80063a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	4916      	ldr	r1, [pc, #88]	; (80063a8 <HAL_RCC_ClockConfig+0x1bc>)
 800634e:	4313      	orrs	r3, r2
 8006350:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 0308 	and.w	r3, r3, #8
 800635a:	2b00      	cmp	r3, #0
 800635c:	d009      	beq.n	8006372 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800635e:	4b12      	ldr	r3, [pc, #72]	; (80063a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	00db      	lsls	r3, r3, #3
 800636c:	490e      	ldr	r1, [pc, #56]	; (80063a8 <HAL_RCC_ClockConfig+0x1bc>)
 800636e:	4313      	orrs	r3, r2
 8006370:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006372:	f000 f821 	bl	80063b8 <HAL_RCC_GetSysClockFreq>
 8006376:	4602      	mov	r2, r0
 8006378:	4b0b      	ldr	r3, [pc, #44]	; (80063a8 <HAL_RCC_ClockConfig+0x1bc>)
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	091b      	lsrs	r3, r3, #4
 800637e:	f003 030f 	and.w	r3, r3, #15
 8006382:	490a      	ldr	r1, [pc, #40]	; (80063ac <HAL_RCC_ClockConfig+0x1c0>)
 8006384:	5ccb      	ldrb	r3, [r1, r3]
 8006386:	fa22 f303 	lsr.w	r3, r2, r3
 800638a:	4a09      	ldr	r2, [pc, #36]	; (80063b0 <HAL_RCC_ClockConfig+0x1c4>)
 800638c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800638e:	4b09      	ldr	r3, [pc, #36]	; (80063b4 <HAL_RCC_ClockConfig+0x1c8>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4618      	mov	r0, r3
 8006394:	f7fc fbf2 	bl	8002b7c <HAL_InitTick>

  return HAL_OK;
 8006398:	2300      	movs	r3, #0
}
 800639a:	4618      	mov	r0, r3
 800639c:	3710      	adds	r7, #16
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
 80063a2:	bf00      	nop
 80063a4:	40023c00 	.word	0x40023c00
 80063a8:	40023800 	.word	0x40023800
 80063ac:	0800ce50 	.word	0x0800ce50
 80063b0:	20000008 	.word	0x20000008
 80063b4:	20000064 	.word	0x20000064

080063b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80063bc:	b084      	sub	sp, #16
 80063be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80063c0:	2300      	movs	r3, #0
 80063c2:	607b      	str	r3, [r7, #4]
 80063c4:	2300      	movs	r3, #0
 80063c6:	60fb      	str	r3, [r7, #12]
 80063c8:	2300      	movs	r3, #0
 80063ca:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80063cc:	2300      	movs	r3, #0
 80063ce:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80063d0:	4b67      	ldr	r3, [pc, #412]	; (8006570 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	f003 030c 	and.w	r3, r3, #12
 80063d8:	2b08      	cmp	r3, #8
 80063da:	d00d      	beq.n	80063f8 <HAL_RCC_GetSysClockFreq+0x40>
 80063dc:	2b08      	cmp	r3, #8
 80063de:	f200 80bd 	bhi.w	800655c <HAL_RCC_GetSysClockFreq+0x1a4>
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d002      	beq.n	80063ec <HAL_RCC_GetSysClockFreq+0x34>
 80063e6:	2b04      	cmp	r3, #4
 80063e8:	d003      	beq.n	80063f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80063ea:	e0b7      	b.n	800655c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80063ec:	4b61      	ldr	r3, [pc, #388]	; (8006574 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80063ee:	60bb      	str	r3, [r7, #8]
       break;
 80063f0:	e0b7      	b.n	8006562 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80063f2:	4b61      	ldr	r3, [pc, #388]	; (8006578 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80063f4:	60bb      	str	r3, [r7, #8]
      break;
 80063f6:	e0b4      	b.n	8006562 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80063f8:	4b5d      	ldr	r3, [pc, #372]	; (8006570 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006400:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006402:	4b5b      	ldr	r3, [pc, #364]	; (8006570 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800640a:	2b00      	cmp	r3, #0
 800640c:	d04d      	beq.n	80064aa <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800640e:	4b58      	ldr	r3, [pc, #352]	; (8006570 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	099b      	lsrs	r3, r3, #6
 8006414:	461a      	mov	r2, r3
 8006416:	f04f 0300 	mov.w	r3, #0
 800641a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800641e:	f04f 0100 	mov.w	r1, #0
 8006422:	ea02 0800 	and.w	r8, r2, r0
 8006426:	ea03 0901 	and.w	r9, r3, r1
 800642a:	4640      	mov	r0, r8
 800642c:	4649      	mov	r1, r9
 800642e:	f04f 0200 	mov.w	r2, #0
 8006432:	f04f 0300 	mov.w	r3, #0
 8006436:	014b      	lsls	r3, r1, #5
 8006438:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800643c:	0142      	lsls	r2, r0, #5
 800643e:	4610      	mov	r0, r2
 8006440:	4619      	mov	r1, r3
 8006442:	ebb0 0008 	subs.w	r0, r0, r8
 8006446:	eb61 0109 	sbc.w	r1, r1, r9
 800644a:	f04f 0200 	mov.w	r2, #0
 800644e:	f04f 0300 	mov.w	r3, #0
 8006452:	018b      	lsls	r3, r1, #6
 8006454:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006458:	0182      	lsls	r2, r0, #6
 800645a:	1a12      	subs	r2, r2, r0
 800645c:	eb63 0301 	sbc.w	r3, r3, r1
 8006460:	f04f 0000 	mov.w	r0, #0
 8006464:	f04f 0100 	mov.w	r1, #0
 8006468:	00d9      	lsls	r1, r3, #3
 800646a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800646e:	00d0      	lsls	r0, r2, #3
 8006470:	4602      	mov	r2, r0
 8006472:	460b      	mov	r3, r1
 8006474:	eb12 0208 	adds.w	r2, r2, r8
 8006478:	eb43 0309 	adc.w	r3, r3, r9
 800647c:	f04f 0000 	mov.w	r0, #0
 8006480:	f04f 0100 	mov.w	r1, #0
 8006484:	0259      	lsls	r1, r3, #9
 8006486:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800648a:	0250      	lsls	r0, r2, #9
 800648c:	4602      	mov	r2, r0
 800648e:	460b      	mov	r3, r1
 8006490:	4610      	mov	r0, r2
 8006492:	4619      	mov	r1, r3
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	461a      	mov	r2, r3
 8006498:	f04f 0300 	mov.w	r3, #0
 800649c:	f7fa fbc6 	bl	8000c2c <__aeabi_uldivmod>
 80064a0:	4602      	mov	r2, r0
 80064a2:	460b      	mov	r3, r1
 80064a4:	4613      	mov	r3, r2
 80064a6:	60fb      	str	r3, [r7, #12]
 80064a8:	e04a      	b.n	8006540 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064aa:	4b31      	ldr	r3, [pc, #196]	; (8006570 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	099b      	lsrs	r3, r3, #6
 80064b0:	461a      	mov	r2, r3
 80064b2:	f04f 0300 	mov.w	r3, #0
 80064b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80064ba:	f04f 0100 	mov.w	r1, #0
 80064be:	ea02 0400 	and.w	r4, r2, r0
 80064c2:	ea03 0501 	and.w	r5, r3, r1
 80064c6:	4620      	mov	r0, r4
 80064c8:	4629      	mov	r1, r5
 80064ca:	f04f 0200 	mov.w	r2, #0
 80064ce:	f04f 0300 	mov.w	r3, #0
 80064d2:	014b      	lsls	r3, r1, #5
 80064d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80064d8:	0142      	lsls	r2, r0, #5
 80064da:	4610      	mov	r0, r2
 80064dc:	4619      	mov	r1, r3
 80064de:	1b00      	subs	r0, r0, r4
 80064e0:	eb61 0105 	sbc.w	r1, r1, r5
 80064e4:	f04f 0200 	mov.w	r2, #0
 80064e8:	f04f 0300 	mov.w	r3, #0
 80064ec:	018b      	lsls	r3, r1, #6
 80064ee:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80064f2:	0182      	lsls	r2, r0, #6
 80064f4:	1a12      	subs	r2, r2, r0
 80064f6:	eb63 0301 	sbc.w	r3, r3, r1
 80064fa:	f04f 0000 	mov.w	r0, #0
 80064fe:	f04f 0100 	mov.w	r1, #0
 8006502:	00d9      	lsls	r1, r3, #3
 8006504:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006508:	00d0      	lsls	r0, r2, #3
 800650a:	4602      	mov	r2, r0
 800650c:	460b      	mov	r3, r1
 800650e:	1912      	adds	r2, r2, r4
 8006510:	eb45 0303 	adc.w	r3, r5, r3
 8006514:	f04f 0000 	mov.w	r0, #0
 8006518:	f04f 0100 	mov.w	r1, #0
 800651c:	0299      	lsls	r1, r3, #10
 800651e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006522:	0290      	lsls	r0, r2, #10
 8006524:	4602      	mov	r2, r0
 8006526:	460b      	mov	r3, r1
 8006528:	4610      	mov	r0, r2
 800652a:	4619      	mov	r1, r3
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	461a      	mov	r2, r3
 8006530:	f04f 0300 	mov.w	r3, #0
 8006534:	f7fa fb7a 	bl	8000c2c <__aeabi_uldivmod>
 8006538:	4602      	mov	r2, r0
 800653a:	460b      	mov	r3, r1
 800653c:	4613      	mov	r3, r2
 800653e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006540:	4b0b      	ldr	r3, [pc, #44]	; (8006570 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	0c1b      	lsrs	r3, r3, #16
 8006546:	f003 0303 	and.w	r3, r3, #3
 800654a:	3301      	adds	r3, #1
 800654c:	005b      	lsls	r3, r3, #1
 800654e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006550:	68fa      	ldr	r2, [r7, #12]
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	fbb2 f3f3 	udiv	r3, r2, r3
 8006558:	60bb      	str	r3, [r7, #8]
      break;
 800655a:	e002      	b.n	8006562 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800655c:	4b05      	ldr	r3, [pc, #20]	; (8006574 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800655e:	60bb      	str	r3, [r7, #8]
      break;
 8006560:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006562:	68bb      	ldr	r3, [r7, #8]
}
 8006564:	4618      	mov	r0, r3
 8006566:	3710      	adds	r7, #16
 8006568:	46bd      	mov	sp, r7
 800656a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800656e:	bf00      	nop
 8006570:	40023800 	.word	0x40023800
 8006574:	00f42400 	.word	0x00f42400
 8006578:	007a1200 	.word	0x007a1200

0800657c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800657c:	b480      	push	{r7}
 800657e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006580:	4b03      	ldr	r3, [pc, #12]	; (8006590 <HAL_RCC_GetHCLKFreq+0x14>)
 8006582:	681b      	ldr	r3, [r3, #0]
}
 8006584:	4618      	mov	r0, r3
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr
 800658e:	bf00      	nop
 8006590:	20000008 	.word	0x20000008

08006594 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006598:	f7ff fff0 	bl	800657c <HAL_RCC_GetHCLKFreq>
 800659c:	4602      	mov	r2, r0
 800659e:	4b05      	ldr	r3, [pc, #20]	; (80065b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	0a9b      	lsrs	r3, r3, #10
 80065a4:	f003 0307 	and.w	r3, r3, #7
 80065a8:	4903      	ldr	r1, [pc, #12]	; (80065b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80065aa:	5ccb      	ldrb	r3, [r1, r3]
 80065ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	bd80      	pop	{r7, pc}
 80065b4:	40023800 	.word	0x40023800
 80065b8:	0800ce60 	.word	0x0800ce60

080065bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80065c0:	f7ff ffdc 	bl	800657c <HAL_RCC_GetHCLKFreq>
 80065c4:	4602      	mov	r2, r0
 80065c6:	4b05      	ldr	r3, [pc, #20]	; (80065dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	0b5b      	lsrs	r3, r3, #13
 80065cc:	f003 0307 	and.w	r3, r3, #7
 80065d0:	4903      	ldr	r1, [pc, #12]	; (80065e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80065d2:	5ccb      	ldrb	r3, [r1, r3]
 80065d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065d8:	4618      	mov	r0, r3
 80065da:	bd80      	pop	{r7, pc}
 80065dc:	40023800 	.word	0x40023800
 80065e0:	0800ce60 	.word	0x0800ce60

080065e4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	220f      	movs	r2, #15
 80065f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80065f4:	4b12      	ldr	r3, [pc, #72]	; (8006640 <HAL_RCC_GetClockConfig+0x5c>)
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	f003 0203 	and.w	r2, r3, #3
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006600:	4b0f      	ldr	r3, [pc, #60]	; (8006640 <HAL_RCC_GetClockConfig+0x5c>)
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800660c:	4b0c      	ldr	r3, [pc, #48]	; (8006640 <HAL_RCC_GetClockConfig+0x5c>)
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006618:	4b09      	ldr	r3, [pc, #36]	; (8006640 <HAL_RCC_GetClockConfig+0x5c>)
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	08db      	lsrs	r3, r3, #3
 800661e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006626:	4b07      	ldr	r3, [pc, #28]	; (8006644 <HAL_RCC_GetClockConfig+0x60>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f003 020f 	and.w	r2, r3, #15
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	601a      	str	r2, [r3, #0]
}
 8006632:	bf00      	nop
 8006634:	370c      	adds	r7, #12
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop
 8006640:	40023800 	.word	0x40023800
 8006644:	40023c00 	.word	0x40023c00

08006648 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b086      	sub	sp, #24
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006650:	2300      	movs	r3, #0
 8006652:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006654:	2300      	movs	r3, #0
 8006656:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f003 0301 	and.w	r3, r3, #1
 8006660:	2b00      	cmp	r3, #0
 8006662:	d10b      	bne.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800666c:	2b00      	cmp	r3, #0
 800666e:	d105      	bne.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006678:	2b00      	cmp	r3, #0
 800667a:	d075      	beq.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800667c:	4bad      	ldr	r3, [pc, #692]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800667e:	2200      	movs	r2, #0
 8006680:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006682:	f7fe f8ad 	bl	80047e0 <HAL_GetTick>
 8006686:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006688:	e008      	b.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800668a:	f7fe f8a9 	bl	80047e0 <HAL_GetTick>
 800668e:	4602      	mov	r2, r0
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	1ad3      	subs	r3, r2, r3
 8006694:	2b02      	cmp	r3, #2
 8006696:	d901      	bls.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006698:	2303      	movs	r3, #3
 800669a:	e18b      	b.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800669c:	4ba6      	ldr	r3, [pc, #664]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d1f0      	bne.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 0301 	and.w	r3, r3, #1
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d009      	beq.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	019a      	lsls	r2, r3, #6
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	071b      	lsls	r3, r3, #28
 80066c0:	499d      	ldr	r1, [pc, #628]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80066c2:	4313      	orrs	r3, r2
 80066c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 0302 	and.w	r3, r3, #2
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d01f      	beq.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80066d4:	4b98      	ldr	r3, [pc, #608]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80066d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066da:	0f1b      	lsrs	r3, r3, #28
 80066dc:	f003 0307 	and.w	r3, r3, #7
 80066e0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	019a      	lsls	r2, r3, #6
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	061b      	lsls	r3, r3, #24
 80066ee:	431a      	orrs	r2, r3
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	071b      	lsls	r3, r3, #28
 80066f4:	4990      	ldr	r1, [pc, #576]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80066f6:	4313      	orrs	r3, r2
 80066f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80066fc:	4b8e      	ldr	r3, [pc, #568]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80066fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006702:	f023 021f 	bic.w	r2, r3, #31
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	69db      	ldr	r3, [r3, #28]
 800670a:	3b01      	subs	r3, #1
 800670c:	498a      	ldr	r1, [pc, #552]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800670e:	4313      	orrs	r3, r2
 8006710:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800671c:	2b00      	cmp	r3, #0
 800671e:	d00d      	beq.n	800673c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	019a      	lsls	r2, r3, #6
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	061b      	lsls	r3, r3, #24
 800672c:	431a      	orrs	r2, r3
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	071b      	lsls	r3, r3, #28
 8006734:	4980      	ldr	r1, [pc, #512]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006736:	4313      	orrs	r3, r2
 8006738:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800673c:	4b7d      	ldr	r3, [pc, #500]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800673e:	2201      	movs	r2, #1
 8006740:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006742:	f7fe f84d 	bl	80047e0 <HAL_GetTick>
 8006746:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006748:	e008      	b.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800674a:	f7fe f849 	bl	80047e0 <HAL_GetTick>
 800674e:	4602      	mov	r2, r0
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	1ad3      	subs	r3, r2, r3
 8006754:	2b02      	cmp	r3, #2
 8006756:	d901      	bls.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006758:	2303      	movs	r3, #3
 800675a:	e12b      	b.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800675c:	4b76      	ldr	r3, [pc, #472]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006764:	2b00      	cmp	r3, #0
 8006766:	d0f0      	beq.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 0304 	and.w	r3, r3, #4
 8006770:	2b00      	cmp	r3, #0
 8006772:	d105      	bne.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800677c:	2b00      	cmp	r3, #0
 800677e:	d079      	beq.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006780:	4b6e      	ldr	r3, [pc, #440]	; (800693c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006782:	2200      	movs	r2, #0
 8006784:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006786:	f7fe f82b 	bl	80047e0 <HAL_GetTick>
 800678a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800678c:	e008      	b.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800678e:	f7fe f827 	bl	80047e0 <HAL_GetTick>
 8006792:	4602      	mov	r2, r0
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	1ad3      	subs	r3, r2, r3
 8006798:	2b02      	cmp	r3, #2
 800679a:	d901      	bls.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800679c:	2303      	movs	r3, #3
 800679e:	e109      	b.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80067a0:	4b65      	ldr	r3, [pc, #404]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067ac:	d0ef      	beq.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f003 0304 	and.w	r3, r3, #4
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d020      	beq.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80067ba:	4b5f      	ldr	r3, [pc, #380]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80067bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067c0:	0f1b      	lsrs	r3, r3, #28
 80067c2:	f003 0307 	and.w	r3, r3, #7
 80067c6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	691b      	ldr	r3, [r3, #16]
 80067cc:	019a      	lsls	r2, r3, #6
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	695b      	ldr	r3, [r3, #20]
 80067d2:	061b      	lsls	r3, r3, #24
 80067d4:	431a      	orrs	r2, r3
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	071b      	lsls	r3, r3, #28
 80067da:	4957      	ldr	r1, [pc, #348]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80067dc:	4313      	orrs	r3, r2
 80067de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80067e2:	4b55      	ldr	r3, [pc, #340]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80067e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067e8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6a1b      	ldr	r3, [r3, #32]
 80067f0:	3b01      	subs	r3, #1
 80067f2:	021b      	lsls	r3, r3, #8
 80067f4:	4950      	ldr	r1, [pc, #320]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80067f6:	4313      	orrs	r3, r2
 80067f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f003 0308 	and.w	r3, r3, #8
 8006804:	2b00      	cmp	r3, #0
 8006806:	d01e      	beq.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006808:	4b4b      	ldr	r3, [pc, #300]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800680a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800680e:	0e1b      	lsrs	r3, r3, #24
 8006810:	f003 030f 	and.w	r3, r3, #15
 8006814:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	691b      	ldr	r3, [r3, #16]
 800681a:	019a      	lsls	r2, r3, #6
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	061b      	lsls	r3, r3, #24
 8006820:	431a      	orrs	r2, r3
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	699b      	ldr	r3, [r3, #24]
 8006826:	071b      	lsls	r3, r3, #28
 8006828:	4943      	ldr	r1, [pc, #268]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800682a:	4313      	orrs	r3, r2
 800682c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006830:	4b41      	ldr	r3, [pc, #260]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006832:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006836:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800683e:	493e      	ldr	r1, [pc, #248]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006840:	4313      	orrs	r3, r2
 8006842:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006846:	4b3d      	ldr	r3, [pc, #244]	; (800693c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006848:	2201      	movs	r2, #1
 800684a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800684c:	f7fd ffc8 	bl	80047e0 <HAL_GetTick>
 8006850:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006852:	e008      	b.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006854:	f7fd ffc4 	bl	80047e0 <HAL_GetTick>
 8006858:	4602      	mov	r2, r0
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	1ad3      	subs	r3, r2, r3
 800685e:	2b02      	cmp	r3, #2
 8006860:	d901      	bls.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006862:	2303      	movs	r3, #3
 8006864:	e0a6      	b.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006866:	4b34      	ldr	r3, [pc, #208]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800686e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006872:	d1ef      	bne.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f003 0320 	and.w	r3, r3, #32
 800687c:	2b00      	cmp	r3, #0
 800687e:	f000 808d 	beq.w	800699c <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006882:	2300      	movs	r3, #0
 8006884:	60fb      	str	r3, [r7, #12]
 8006886:	4b2c      	ldr	r3, [pc, #176]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800688a:	4a2b      	ldr	r2, [pc, #172]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800688c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006890:	6413      	str	r3, [r2, #64]	; 0x40
 8006892:	4b29      	ldr	r3, [pc, #164]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800689a:	60fb      	str	r3, [r7, #12]
 800689c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800689e:	4b28      	ldr	r3, [pc, #160]	; (8006940 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a27      	ldr	r2, [pc, #156]	; (8006940 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80068a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068a8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80068aa:	f7fd ff99 	bl	80047e0 <HAL_GetTick>
 80068ae:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80068b0:	e008      	b.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80068b2:	f7fd ff95 	bl	80047e0 <HAL_GetTick>
 80068b6:	4602      	mov	r2, r0
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	1ad3      	subs	r3, r2, r3
 80068bc:	2b02      	cmp	r3, #2
 80068be:	d901      	bls.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 80068c0:	2303      	movs	r3, #3
 80068c2:	e077      	b.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80068c4:	4b1e      	ldr	r3, [pc, #120]	; (8006940 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d0f0      	beq.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80068d0:	4b19      	ldr	r3, [pc, #100]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80068d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068d8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d039      	beq.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068e8:	693a      	ldr	r2, [r7, #16]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d032      	beq.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80068ee:	4b12      	ldr	r3, [pc, #72]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80068f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068f6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80068f8:	4b12      	ldr	r3, [pc, #72]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80068fa:	2201      	movs	r2, #1
 80068fc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80068fe:	4b11      	ldr	r3, [pc, #68]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006900:	2200      	movs	r2, #0
 8006902:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006904:	4a0c      	ldr	r2, [pc, #48]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800690a:	4b0b      	ldr	r3, [pc, #44]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800690c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800690e:	f003 0301 	and.w	r3, r3, #1
 8006912:	2b01      	cmp	r3, #1
 8006914:	d11e      	bne.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006916:	f7fd ff63 	bl	80047e0 <HAL_GetTick>
 800691a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800691c:	e014      	b.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800691e:	f7fd ff5f 	bl	80047e0 <HAL_GetTick>
 8006922:	4602      	mov	r2, r0
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	1ad3      	subs	r3, r2, r3
 8006928:	f241 3288 	movw	r2, #5000	; 0x1388
 800692c:	4293      	cmp	r3, r2
 800692e:	d90b      	bls.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8006930:	2303      	movs	r3, #3
 8006932:	e03f      	b.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8006934:	42470068 	.word	0x42470068
 8006938:	40023800 	.word	0x40023800
 800693c:	42470070 	.word	0x42470070
 8006940:	40007000 	.word	0x40007000
 8006944:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006948:	4b1c      	ldr	r3, [pc, #112]	; (80069bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800694a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800694c:	f003 0302 	and.w	r3, r3, #2
 8006950:	2b00      	cmp	r3, #0
 8006952:	d0e4      	beq.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006958:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800695c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006960:	d10d      	bne.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x336>
 8006962:	4b16      	ldr	r3, [pc, #88]	; (80069bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800696e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006972:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006976:	4911      	ldr	r1, [pc, #68]	; (80069bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006978:	4313      	orrs	r3, r2
 800697a:	608b      	str	r3, [r1, #8]
 800697c:	e005      	b.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800697e:	4b0f      	ldr	r3, [pc, #60]	; (80069bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	4a0e      	ldr	r2, [pc, #56]	; (80069bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006984:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006988:	6093      	str	r3, [r2, #8]
 800698a:	4b0c      	ldr	r3, [pc, #48]	; (80069bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800698c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006992:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006996:	4909      	ldr	r1, [pc, #36]	; (80069bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006998:	4313      	orrs	r3, r2
 800699a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f003 0310 	and.w	r3, r3, #16
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d004      	beq.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80069ae:	4b04      	ldr	r3, [pc, #16]	; (80069c0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80069b0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80069b2:	2300      	movs	r3, #0
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3718      	adds	r7, #24
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}
 80069bc:	40023800 	.word	0x40023800
 80069c0:	424711e0 	.word	0x424711e0

080069c4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b082      	sub	sp, #8
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d101      	bne.n	80069d8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	e025      	b.n	8006a24 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d106      	bne.n	80069f2 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f000 f81d 	bl	8006a2c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2202      	movs	r2, #2
 80069f6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	3304      	adds	r3, #4
 8006a02:	4619      	mov	r1, r3
 8006a04:	4610      	mov	r0, r2
 8006a06:	f001 fe1f 	bl	8008648 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6818      	ldr	r0, [r3, #0]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	461a      	mov	r2, r3
 8006a14:	6839      	ldr	r1, [r7, #0]
 8006a16:	f001 fe8a 	bl	800872e <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8006a22:	2300      	movs	r3, #0
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3708      	adds	r7, #8
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b083      	sub	sp, #12
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 8006a34:	bf00      	nop
 8006a36:	370c      	adds	r7, #12
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr

08006a40 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	2b02      	cmp	r3, #2
 8006a56:	d101      	bne.n	8006a5c <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8006a58:	2302      	movs	r3, #2
 8006a5a:	e018      	b.n	8006a8e <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2202      	movs	r2, #2
 8006a60:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	687a      	ldr	r2, [r7, #4]
 8006a6a:	68b9      	ldr	r1, [r7, #8]
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f001 fedd 	bl	800882c <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	2b02      	cmp	r3, #2
 8006a78:	d104      	bne.n	8006a84 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2205      	movs	r2, #5
 8006a7e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8006a82:	e003      	b.n	8006a8c <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2201      	movs	r2, #1
 8006a88:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3710      	adds	r7, #16
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}

08006a96 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006a96:	b580      	push	{r7, lr}
 8006a98:	b082      	sub	sp, #8
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	6078      	str	r0, [r7, #4]
 8006a9e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	2b02      	cmp	r3, #2
 8006aaa:	d101      	bne.n	8006ab0 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8006aac:	2302      	movs	r3, #2
 8006aae:	e00e      	b.n	8006ace <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2202      	movs	r2, #2
 8006ab4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	6839      	ldr	r1, [r7, #0]
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f001 fef0 	bl	80088a4 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3708      	adds	r7, #8
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}

08006ad6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b082      	sub	sp, #8
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d101      	bne.n	8006ae8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e07b      	b.n	8006be0 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d108      	bne.n	8006b02 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006af8:	d009      	beq.n	8006b0e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2200      	movs	r2, #0
 8006afe:	61da      	str	r2, [r3, #28]
 8006b00:	e005      	b.n	8006b0e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2200      	movs	r2, #0
 8006b06:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d106      	bne.n	8006b2e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f000 f885 	bl	8006c38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2202      	movs	r2, #2
 8006b32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b44:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006b56:	431a      	orrs	r2, r3
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	68db      	ldr	r3, [r3, #12]
 8006b5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b60:	431a      	orrs	r2, r3
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	f003 0302 	and.w	r3, r3, #2
 8006b6a:	431a      	orrs	r2, r3
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	695b      	ldr	r3, [r3, #20]
 8006b70:	f003 0301 	and.w	r3, r3, #1
 8006b74:	431a      	orrs	r2, r3
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	699b      	ldr	r3, [r3, #24]
 8006b7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b7e:	431a      	orrs	r2, r3
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	69db      	ldr	r3, [r3, #28]
 8006b84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b88:	431a      	orrs	r2, r3
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6a1b      	ldr	r3, [r3, #32]
 8006b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b92:	ea42 0103 	orr.w	r1, r2, r3
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b9a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	430a      	orrs	r2, r1
 8006ba4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	699b      	ldr	r3, [r3, #24]
 8006baa:	0c1b      	lsrs	r3, r3, #16
 8006bac:	f003 0104 	and.w	r1, r3, #4
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb4:	f003 0210 	and.w	r2, r3, #16
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	430a      	orrs	r2, r1
 8006bbe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	69da      	ldr	r2, [r3, #28]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006bce:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2201      	movs	r2, #1
 8006bda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006bde:	2300      	movs	r3, #0
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3708      	adds	r7, #8
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d101      	bne.n	8006bfa <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e01a      	b.n	8006c30 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2202      	movs	r2, #2
 8006bfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c10:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 f81a 	bl	8006c4c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2200      	movs	r2, #0
 8006c22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006c2e:	2300      	movs	r3, #0
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3708      	adds	r7, #8
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b083      	sub	sp, #12
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8006c40:	bf00      	nop
 8006c42:	370c      	adds	r7, #12
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 8006c54:	bf00      	nop
 8006c56:	370c      	adds	r7, #12
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr

08006c60 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b088      	sub	sp, #32
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	60f8      	str	r0, [r7, #12]
 8006c68:	60b9      	str	r1, [r7, #8]
 8006c6a:	603b      	str	r3, [r7, #0]
 8006c6c:	4613      	mov	r3, r2
 8006c6e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006c70:	2300      	movs	r3, #0
 8006c72:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d101      	bne.n	8006c82 <HAL_SPI_Transmit+0x22>
 8006c7e:	2302      	movs	r3, #2
 8006c80:	e126      	b.n	8006ed0 <HAL_SPI_Transmit+0x270>
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2201      	movs	r2, #1
 8006c86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c8a:	f7fd fda9 	bl	80047e0 <HAL_GetTick>
 8006c8e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006c90:	88fb      	ldrh	r3, [r7, #6]
 8006c92:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d002      	beq.n	8006ca6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006ca0:	2302      	movs	r3, #2
 8006ca2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006ca4:	e10b      	b.n	8006ebe <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d002      	beq.n	8006cb2 <HAL_SPI_Transmit+0x52>
 8006cac:	88fb      	ldrh	r3, [r7, #6]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d102      	bne.n	8006cb8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006cb6:	e102      	b.n	8006ebe <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2203      	movs	r2, #3
 8006cbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	68ba      	ldr	r2, [r7, #8]
 8006cca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	88fa      	ldrh	r2, [r7, #6]
 8006cd0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	88fa      	ldrh	r2, [r7, #6]
 8006cd6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2200      	movs	r2, #0
 8006cee:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cfe:	d10f      	bne.n	8006d20 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	681a      	ldr	r2, [r3, #0]
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d0e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d1e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d2a:	2b40      	cmp	r3, #64	; 0x40
 8006d2c:	d007      	beq.n	8006d3e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d3c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	68db      	ldr	r3, [r3, #12]
 8006d42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d46:	d14b      	bne.n	8006de0 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d002      	beq.n	8006d56 <HAL_SPI_Transmit+0xf6>
 8006d50:	8afb      	ldrh	r3, [r7, #22]
 8006d52:	2b01      	cmp	r3, #1
 8006d54:	d13e      	bne.n	8006dd4 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d5a:	881a      	ldrh	r2, [r3, #0]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d66:	1c9a      	adds	r2, r3, #2
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	3b01      	subs	r3, #1
 8006d74:	b29a      	uxth	r2, r3
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006d7a:	e02b      	b.n	8006dd4 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	f003 0302 	and.w	r3, r3, #2
 8006d86:	2b02      	cmp	r3, #2
 8006d88:	d112      	bne.n	8006db0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d8e:	881a      	ldrh	r2, [r3, #0]
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d9a:	1c9a      	adds	r2, r3, #2
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	3b01      	subs	r3, #1
 8006da8:	b29a      	uxth	r2, r3
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	86da      	strh	r2, [r3, #54]	; 0x36
 8006dae:	e011      	b.n	8006dd4 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006db0:	f7fd fd16 	bl	80047e0 <HAL_GetTick>
 8006db4:	4602      	mov	r2, r0
 8006db6:	69bb      	ldr	r3, [r7, #24]
 8006db8:	1ad3      	subs	r3, r2, r3
 8006dba:	683a      	ldr	r2, [r7, #0]
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d803      	bhi.n	8006dc8 <HAL_SPI_Transmit+0x168>
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dc6:	d102      	bne.n	8006dce <HAL_SPI_Transmit+0x16e>
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d102      	bne.n	8006dd4 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006dce:	2303      	movs	r3, #3
 8006dd0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006dd2:	e074      	b.n	8006ebe <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d1ce      	bne.n	8006d7c <HAL_SPI_Transmit+0x11c>
 8006dde:	e04c      	b.n	8006e7a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d002      	beq.n	8006dee <HAL_SPI_Transmit+0x18e>
 8006de8:	8afb      	ldrh	r3, [r7, #22]
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d140      	bne.n	8006e70 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	330c      	adds	r3, #12
 8006df8:	7812      	ldrb	r2, [r2, #0]
 8006dfa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e00:	1c5a      	adds	r2, r3, #1
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	3b01      	subs	r3, #1
 8006e0e:	b29a      	uxth	r2, r3
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006e14:	e02c      	b.n	8006e70 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	f003 0302 	and.w	r3, r3, #2
 8006e20:	2b02      	cmp	r3, #2
 8006e22:	d113      	bne.n	8006e4c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	330c      	adds	r3, #12
 8006e2e:	7812      	ldrb	r2, [r2, #0]
 8006e30:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e36:	1c5a      	adds	r2, r3, #1
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	3b01      	subs	r3, #1
 8006e44:	b29a      	uxth	r2, r3
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	86da      	strh	r2, [r3, #54]	; 0x36
 8006e4a:	e011      	b.n	8006e70 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e4c:	f7fd fcc8 	bl	80047e0 <HAL_GetTick>
 8006e50:	4602      	mov	r2, r0
 8006e52:	69bb      	ldr	r3, [r7, #24]
 8006e54:	1ad3      	subs	r3, r2, r3
 8006e56:	683a      	ldr	r2, [r7, #0]
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d803      	bhi.n	8006e64 <HAL_SPI_Transmit+0x204>
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e62:	d102      	bne.n	8006e6a <HAL_SPI_Transmit+0x20a>
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d102      	bne.n	8006e70 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006e6a:	2303      	movs	r3, #3
 8006e6c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006e6e:	e026      	b.n	8006ebe <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d1cd      	bne.n	8006e16 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e7a:	69ba      	ldr	r2, [r7, #24]
 8006e7c:	6839      	ldr	r1, [r7, #0]
 8006e7e:	68f8      	ldr	r0, [r7, #12]
 8006e80:	f000 fbda 	bl	8007638 <SPI_EndRxTxTransaction>
 8006e84:	4603      	mov	r3, r0
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d002      	beq.n	8006e90 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2220      	movs	r2, #32
 8006e8e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d10a      	bne.n	8006eae <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e98:	2300      	movs	r3, #0
 8006e9a:	613b      	str	r3, [r7, #16]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	68db      	ldr	r3, [r3, #12]
 8006ea2:	613b      	str	r3, [r7, #16]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	613b      	str	r3, [r7, #16]
 8006eac:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d002      	beq.n	8006ebc <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	77fb      	strb	r3, [r7, #31]
 8006eba:	e000      	b.n	8006ebe <HAL_SPI_Transmit+0x25e>
  }

error:
 8006ebc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006ece:	7ffb      	ldrb	r3, [r7, #31]
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3720      	adds	r7, #32
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}

08006ed8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b088      	sub	sp, #32
 8006edc:	af02      	add	r7, sp, #8
 8006ede:	60f8      	str	r0, [r7, #12]
 8006ee0:	60b9      	str	r1, [r7, #8]
 8006ee2:	603b      	str	r3, [r7, #0]
 8006ee4:	4613      	mov	r3, r2
 8006ee6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ef4:	d112      	bne.n	8006f1c <HAL_SPI_Receive+0x44>
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d10e      	bne.n	8006f1c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2204      	movs	r2, #4
 8006f02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006f06:	88fa      	ldrh	r2, [r7, #6]
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	9300      	str	r3, [sp, #0]
 8006f0c:	4613      	mov	r3, r2
 8006f0e:	68ba      	ldr	r2, [r7, #8]
 8006f10:	68b9      	ldr	r1, [r7, #8]
 8006f12:	68f8      	ldr	r0, [r7, #12]
 8006f14:	f000 f8f1 	bl	80070fa <HAL_SPI_TransmitReceive>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	e0ea      	b.n	80070f2 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d101      	bne.n	8006f2a <HAL_SPI_Receive+0x52>
 8006f26:	2302      	movs	r3, #2
 8006f28:	e0e3      	b.n	80070f2 <HAL_SPI_Receive+0x21a>
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f32:	f7fd fc55 	bl	80047e0 <HAL_GetTick>
 8006f36:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d002      	beq.n	8006f4a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006f44:	2302      	movs	r3, #2
 8006f46:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006f48:	e0ca      	b.n	80070e0 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d002      	beq.n	8006f56 <HAL_SPI_Receive+0x7e>
 8006f50:	88fb      	ldrh	r3, [r7, #6]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d102      	bne.n	8006f5c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006f56:	2301      	movs	r3, #1
 8006f58:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006f5a:	e0c1      	b.n	80070e0 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2204      	movs	r2, #4
 8006f60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2200      	movs	r2, #0
 8006f68:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	68ba      	ldr	r2, [r7, #8]
 8006f6e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	88fa      	ldrh	r2, [r7, #6]
 8006f74:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	88fa      	ldrh	r2, [r7, #6]
 8006f7a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2200      	movs	r2, #0
 8006f86:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2200      	movs	r2, #0
 8006f92:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2200      	movs	r2, #0
 8006f98:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fa2:	d10f      	bne.n	8006fc4 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fb2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006fc2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fce:	2b40      	cmp	r3, #64	; 0x40
 8006fd0:	d007      	beq.n	8006fe2 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006fe0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	68db      	ldr	r3, [r3, #12]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d162      	bne.n	80070b0 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006fea:	e02e      	b.n	800704a <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	f003 0301 	and.w	r3, r3, #1
 8006ff6:	2b01      	cmp	r3, #1
 8006ff8:	d115      	bne.n	8007026 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f103 020c 	add.w	r2, r3, #12
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007006:	7812      	ldrb	r2, [r2, #0]
 8007008:	b2d2      	uxtb	r2, r2
 800700a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007010:	1c5a      	adds	r2, r3, #1
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800701a:	b29b      	uxth	r3, r3
 800701c:	3b01      	subs	r3, #1
 800701e:	b29a      	uxth	r2, r3
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007024:	e011      	b.n	800704a <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007026:	f7fd fbdb 	bl	80047e0 <HAL_GetTick>
 800702a:	4602      	mov	r2, r0
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	1ad3      	subs	r3, r2, r3
 8007030:	683a      	ldr	r2, [r7, #0]
 8007032:	429a      	cmp	r2, r3
 8007034:	d803      	bhi.n	800703e <HAL_SPI_Receive+0x166>
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800703c:	d102      	bne.n	8007044 <HAL_SPI_Receive+0x16c>
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d102      	bne.n	800704a <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007044:	2303      	movs	r3, #3
 8007046:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007048:	e04a      	b.n	80070e0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800704e:	b29b      	uxth	r3, r3
 8007050:	2b00      	cmp	r3, #0
 8007052:	d1cb      	bne.n	8006fec <HAL_SPI_Receive+0x114>
 8007054:	e031      	b.n	80070ba <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	f003 0301 	and.w	r3, r3, #1
 8007060:	2b01      	cmp	r3, #1
 8007062:	d113      	bne.n	800708c <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	68da      	ldr	r2, [r3, #12]
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800706e:	b292      	uxth	r2, r2
 8007070:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007076:	1c9a      	adds	r2, r3, #2
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007080:	b29b      	uxth	r3, r3
 8007082:	3b01      	subs	r3, #1
 8007084:	b29a      	uxth	r2, r3
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	87da      	strh	r2, [r3, #62]	; 0x3e
 800708a:	e011      	b.n	80070b0 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800708c:	f7fd fba8 	bl	80047e0 <HAL_GetTick>
 8007090:	4602      	mov	r2, r0
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	1ad3      	subs	r3, r2, r3
 8007096:	683a      	ldr	r2, [r7, #0]
 8007098:	429a      	cmp	r2, r3
 800709a:	d803      	bhi.n	80070a4 <HAL_SPI_Receive+0x1cc>
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070a2:	d102      	bne.n	80070aa <HAL_SPI_Receive+0x1d2>
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d102      	bne.n	80070b0 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80070aa:	2303      	movs	r3, #3
 80070ac:	75fb      	strb	r3, [r7, #23]
          goto error;
 80070ae:	e017      	b.n	80070e0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d1cd      	bne.n	8007056 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80070ba:	693a      	ldr	r2, [r7, #16]
 80070bc:	6839      	ldr	r1, [r7, #0]
 80070be:	68f8      	ldr	r0, [r7, #12]
 80070c0:	f000 fa54 	bl	800756c <SPI_EndRxTransaction>
 80070c4:	4603      	mov	r3, r0
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d002      	beq.n	80070d0 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2220      	movs	r2, #32
 80070ce:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d002      	beq.n	80070de <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80070d8:	2301      	movs	r3, #1
 80070da:	75fb      	strb	r3, [r7, #23]
 80070dc:	e000      	b.n	80070e0 <HAL_SPI_Receive+0x208>
  }

error :
 80070de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2201      	movs	r2, #1
 80070e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2200      	movs	r2, #0
 80070ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80070f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3718      	adds	r7, #24
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}

080070fa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80070fa:	b580      	push	{r7, lr}
 80070fc:	b08c      	sub	sp, #48	; 0x30
 80070fe:	af00      	add	r7, sp, #0
 8007100:	60f8      	str	r0, [r7, #12]
 8007102:	60b9      	str	r1, [r7, #8]
 8007104:	607a      	str	r2, [r7, #4]
 8007106:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007108:	2301      	movs	r3, #1
 800710a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800710c:	2300      	movs	r3, #0
 800710e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007118:	2b01      	cmp	r3, #1
 800711a:	d101      	bne.n	8007120 <HAL_SPI_TransmitReceive+0x26>
 800711c:	2302      	movs	r3, #2
 800711e:	e18a      	b.n	8007436 <HAL_SPI_TransmitReceive+0x33c>
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2201      	movs	r2, #1
 8007124:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007128:	f7fd fb5a 	bl	80047e0 <HAL_GetTick>
 800712c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007134:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800713e:	887b      	ldrh	r3, [r7, #2]
 8007140:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007142:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007146:	2b01      	cmp	r3, #1
 8007148:	d00f      	beq.n	800716a <HAL_SPI_TransmitReceive+0x70>
 800714a:	69fb      	ldr	r3, [r7, #28]
 800714c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007150:	d107      	bne.n	8007162 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d103      	bne.n	8007162 <HAL_SPI_TransmitReceive+0x68>
 800715a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800715e:	2b04      	cmp	r3, #4
 8007160:	d003      	beq.n	800716a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007162:	2302      	movs	r3, #2
 8007164:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007168:	e15b      	b.n	8007422 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d005      	beq.n	800717c <HAL_SPI_TransmitReceive+0x82>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d002      	beq.n	800717c <HAL_SPI_TransmitReceive+0x82>
 8007176:	887b      	ldrh	r3, [r7, #2]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d103      	bne.n	8007184 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800717c:	2301      	movs	r3, #1
 800717e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007182:	e14e      	b.n	8007422 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800718a:	b2db      	uxtb	r3, r3
 800718c:	2b04      	cmp	r3, #4
 800718e:	d003      	beq.n	8007198 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2205      	movs	r2, #5
 8007194:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2200      	movs	r2, #0
 800719c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	687a      	ldr	r2, [r7, #4]
 80071a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	887a      	ldrh	r2, [r7, #2]
 80071a8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	887a      	ldrh	r2, [r7, #2]
 80071ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	68ba      	ldr	r2, [r7, #8]
 80071b4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	887a      	ldrh	r2, [r7, #2]
 80071ba:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	887a      	ldrh	r2, [r7, #2]
 80071c0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2200      	movs	r2, #0
 80071c6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2200      	movs	r2, #0
 80071cc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071d8:	2b40      	cmp	r3, #64	; 0x40
 80071da:	d007      	beq.n	80071ec <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071f4:	d178      	bne.n	80072e8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d002      	beq.n	8007204 <HAL_SPI_TransmitReceive+0x10a>
 80071fe:	8b7b      	ldrh	r3, [r7, #26]
 8007200:	2b01      	cmp	r3, #1
 8007202:	d166      	bne.n	80072d2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007208:	881a      	ldrh	r2, [r3, #0]
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007214:	1c9a      	adds	r2, r3, #2
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800721e:	b29b      	uxth	r3, r3
 8007220:	3b01      	subs	r3, #1
 8007222:	b29a      	uxth	r2, r3
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007228:	e053      	b.n	80072d2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	f003 0302 	and.w	r3, r3, #2
 8007234:	2b02      	cmp	r3, #2
 8007236:	d11b      	bne.n	8007270 <HAL_SPI_TransmitReceive+0x176>
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800723c:	b29b      	uxth	r3, r3
 800723e:	2b00      	cmp	r3, #0
 8007240:	d016      	beq.n	8007270 <HAL_SPI_TransmitReceive+0x176>
 8007242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007244:	2b01      	cmp	r3, #1
 8007246:	d113      	bne.n	8007270 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800724c:	881a      	ldrh	r2, [r3, #0]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007258:	1c9a      	adds	r2, r3, #2
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007262:	b29b      	uxth	r3, r3
 8007264:	3b01      	subs	r3, #1
 8007266:	b29a      	uxth	r2, r3
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800726c:	2300      	movs	r3, #0
 800726e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	f003 0301 	and.w	r3, r3, #1
 800727a:	2b01      	cmp	r3, #1
 800727c:	d119      	bne.n	80072b2 <HAL_SPI_TransmitReceive+0x1b8>
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007282:	b29b      	uxth	r3, r3
 8007284:	2b00      	cmp	r3, #0
 8007286:	d014      	beq.n	80072b2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	68da      	ldr	r2, [r3, #12]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007292:	b292      	uxth	r2, r2
 8007294:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800729a:	1c9a      	adds	r2, r3, #2
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	3b01      	subs	r3, #1
 80072a8:	b29a      	uxth	r2, r3
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80072ae:	2301      	movs	r3, #1
 80072b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80072b2:	f7fd fa95 	bl	80047e0 <HAL_GetTick>
 80072b6:	4602      	mov	r2, r0
 80072b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ba:	1ad3      	subs	r3, r2, r3
 80072bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072be:	429a      	cmp	r2, r3
 80072c0:	d807      	bhi.n	80072d2 <HAL_SPI_TransmitReceive+0x1d8>
 80072c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072c8:	d003      	beq.n	80072d2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80072ca:	2303      	movs	r3, #3
 80072cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80072d0:	e0a7      	b.n	8007422 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d1a6      	bne.n	800722a <HAL_SPI_TransmitReceive+0x130>
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d1a1      	bne.n	800722a <HAL_SPI_TransmitReceive+0x130>
 80072e6:	e07c      	b.n	80073e2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d002      	beq.n	80072f6 <HAL_SPI_TransmitReceive+0x1fc>
 80072f0:	8b7b      	ldrh	r3, [r7, #26]
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d16b      	bne.n	80073ce <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	330c      	adds	r3, #12
 8007300:	7812      	ldrb	r2, [r2, #0]
 8007302:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007308:	1c5a      	adds	r2, r3, #1
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007312:	b29b      	uxth	r3, r3
 8007314:	3b01      	subs	r3, #1
 8007316:	b29a      	uxth	r2, r3
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800731c:	e057      	b.n	80073ce <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	f003 0302 	and.w	r3, r3, #2
 8007328:	2b02      	cmp	r3, #2
 800732a:	d11c      	bne.n	8007366 <HAL_SPI_TransmitReceive+0x26c>
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007330:	b29b      	uxth	r3, r3
 8007332:	2b00      	cmp	r3, #0
 8007334:	d017      	beq.n	8007366 <HAL_SPI_TransmitReceive+0x26c>
 8007336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007338:	2b01      	cmp	r3, #1
 800733a:	d114      	bne.n	8007366 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	330c      	adds	r3, #12
 8007346:	7812      	ldrb	r2, [r2, #0]
 8007348:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800734e:	1c5a      	adds	r2, r3, #1
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007358:	b29b      	uxth	r3, r3
 800735a:	3b01      	subs	r3, #1
 800735c:	b29a      	uxth	r2, r3
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007362:	2300      	movs	r3, #0
 8007364:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	689b      	ldr	r3, [r3, #8]
 800736c:	f003 0301 	and.w	r3, r3, #1
 8007370:	2b01      	cmp	r3, #1
 8007372:	d119      	bne.n	80073a8 <HAL_SPI_TransmitReceive+0x2ae>
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007378:	b29b      	uxth	r3, r3
 800737a:	2b00      	cmp	r3, #0
 800737c:	d014      	beq.n	80073a8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	68da      	ldr	r2, [r3, #12]
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007388:	b2d2      	uxtb	r2, r2
 800738a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007390:	1c5a      	adds	r2, r3, #1
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800739a:	b29b      	uxth	r3, r3
 800739c:	3b01      	subs	r3, #1
 800739e:	b29a      	uxth	r2, r3
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80073a4:	2301      	movs	r3, #1
 80073a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80073a8:	f7fd fa1a 	bl	80047e0 <HAL_GetTick>
 80073ac:	4602      	mov	r2, r0
 80073ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b0:	1ad3      	subs	r3, r2, r3
 80073b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d803      	bhi.n	80073c0 <HAL_SPI_TransmitReceive+0x2c6>
 80073b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073be:	d102      	bne.n	80073c6 <HAL_SPI_TransmitReceive+0x2cc>
 80073c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d103      	bne.n	80073ce <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80073c6:	2303      	movs	r3, #3
 80073c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80073cc:	e029      	b.n	8007422 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d1a2      	bne.n	800731e <HAL_SPI_TransmitReceive+0x224>
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073dc:	b29b      	uxth	r3, r3
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d19d      	bne.n	800731e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80073e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80073e6:	68f8      	ldr	r0, [r7, #12]
 80073e8:	f000 f926 	bl	8007638 <SPI_EndRxTxTransaction>
 80073ec:	4603      	mov	r3, r0
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d006      	beq.n	8007400 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80073f2:	2301      	movs	r3, #1
 80073f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2220      	movs	r2, #32
 80073fc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80073fe:	e010      	b.n	8007422 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	689b      	ldr	r3, [r3, #8]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d10b      	bne.n	8007420 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007408:	2300      	movs	r3, #0
 800740a:	617b      	str	r3, [r7, #20]
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	68db      	ldr	r3, [r3, #12]
 8007412:	617b      	str	r3, [r7, #20]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	617b      	str	r3, [r7, #20]
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	e000      	b.n	8007422 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007420:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2201      	movs	r2, #1
 8007426:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2200      	movs	r2, #0
 800742e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007432:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007436:	4618      	mov	r0, r3
 8007438:	3730      	adds	r7, #48	; 0x30
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}

0800743e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800743e:	b480      	push	{r7}
 8007440:	b083      	sub	sp, #12
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800744c:	b2db      	uxtb	r3, r3
}
 800744e:	4618      	mov	r0, r3
 8007450:	370c      	adds	r7, #12
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr
	...

0800745c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b088      	sub	sp, #32
 8007460:	af00      	add	r7, sp, #0
 8007462:	60f8      	str	r0, [r7, #12]
 8007464:	60b9      	str	r1, [r7, #8]
 8007466:	603b      	str	r3, [r7, #0]
 8007468:	4613      	mov	r3, r2
 800746a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800746c:	f7fd f9b8 	bl	80047e0 <HAL_GetTick>
 8007470:	4602      	mov	r2, r0
 8007472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007474:	1a9b      	subs	r3, r3, r2
 8007476:	683a      	ldr	r2, [r7, #0]
 8007478:	4413      	add	r3, r2
 800747a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800747c:	f7fd f9b0 	bl	80047e0 <HAL_GetTick>
 8007480:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007482:	4b39      	ldr	r3, [pc, #228]	; (8007568 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	015b      	lsls	r3, r3, #5
 8007488:	0d1b      	lsrs	r3, r3, #20
 800748a:	69fa      	ldr	r2, [r7, #28]
 800748c:	fb02 f303 	mul.w	r3, r2, r3
 8007490:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007492:	e054      	b.n	800753e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800749a:	d050      	beq.n	800753e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800749c:	f7fd f9a0 	bl	80047e0 <HAL_GetTick>
 80074a0:	4602      	mov	r2, r0
 80074a2:	69bb      	ldr	r3, [r7, #24]
 80074a4:	1ad3      	subs	r3, r2, r3
 80074a6:	69fa      	ldr	r2, [r7, #28]
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d902      	bls.n	80074b2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d13d      	bne.n	800752e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	685a      	ldr	r2, [r3, #4]
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80074c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074ca:	d111      	bne.n	80074f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074d4:	d004      	beq.n	80074e0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	689b      	ldr	r3, [r3, #8]
 80074da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074de:	d107      	bne.n	80074f0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	681a      	ldr	r2, [r3, #0]
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074f8:	d10f      	bne.n	800751a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007508:	601a      	str	r2, [r3, #0]
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007518:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2201      	movs	r2, #1
 800751e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2200      	movs	r2, #0
 8007526:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800752a:	2303      	movs	r3, #3
 800752c:	e017      	b.n	800755e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d101      	bne.n	8007538 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007534:	2300      	movs	r3, #0
 8007536:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	3b01      	subs	r3, #1
 800753c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	689a      	ldr	r2, [r3, #8]
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	4013      	ands	r3, r2
 8007548:	68ba      	ldr	r2, [r7, #8]
 800754a:	429a      	cmp	r2, r3
 800754c:	bf0c      	ite	eq
 800754e:	2301      	moveq	r3, #1
 8007550:	2300      	movne	r3, #0
 8007552:	b2db      	uxtb	r3, r3
 8007554:	461a      	mov	r2, r3
 8007556:	79fb      	ldrb	r3, [r7, #7]
 8007558:	429a      	cmp	r2, r3
 800755a:	d19b      	bne.n	8007494 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800755c:	2300      	movs	r3, #0
}
 800755e:	4618      	mov	r0, r3
 8007560:	3720      	adds	r7, #32
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
 8007566:	bf00      	nop
 8007568:	20000008 	.word	0x20000008

0800756c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b086      	sub	sp, #24
 8007570:	af02      	add	r7, sp, #8
 8007572:	60f8      	str	r0, [r7, #12]
 8007574:	60b9      	str	r1, [r7, #8]
 8007576:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007580:	d111      	bne.n	80075a6 <SPI_EndRxTransaction+0x3a>
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800758a:	d004      	beq.n	8007596 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007594:	d107      	bne.n	80075a6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075a4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075ae:	d12a      	bne.n	8007606 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	689b      	ldr	r3, [r3, #8]
 80075b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075b8:	d012      	beq.n	80075e0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	9300      	str	r3, [sp, #0]
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	2200      	movs	r2, #0
 80075c2:	2180      	movs	r1, #128	; 0x80
 80075c4:	68f8      	ldr	r0, [r7, #12]
 80075c6:	f7ff ff49 	bl	800745c <SPI_WaitFlagStateUntilTimeout>
 80075ca:	4603      	mov	r3, r0
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d02d      	beq.n	800762c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075d4:	f043 0220 	orr.w	r2, r3, #32
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80075dc:	2303      	movs	r3, #3
 80075de:	e026      	b.n	800762e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	9300      	str	r3, [sp, #0]
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	2200      	movs	r2, #0
 80075e8:	2101      	movs	r1, #1
 80075ea:	68f8      	ldr	r0, [r7, #12]
 80075ec:	f7ff ff36 	bl	800745c <SPI_WaitFlagStateUntilTimeout>
 80075f0:	4603      	mov	r3, r0
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d01a      	beq.n	800762c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075fa:	f043 0220 	orr.w	r2, r3, #32
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007602:	2303      	movs	r3, #3
 8007604:	e013      	b.n	800762e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	9300      	str	r3, [sp, #0]
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	2200      	movs	r2, #0
 800760e:	2101      	movs	r1, #1
 8007610:	68f8      	ldr	r0, [r7, #12]
 8007612:	f7ff ff23 	bl	800745c <SPI_WaitFlagStateUntilTimeout>
 8007616:	4603      	mov	r3, r0
 8007618:	2b00      	cmp	r3, #0
 800761a:	d007      	beq.n	800762c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007620:	f043 0220 	orr.w	r2, r3, #32
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007628:	2303      	movs	r3, #3
 800762a:	e000      	b.n	800762e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800762c:	2300      	movs	r3, #0
}
 800762e:	4618      	mov	r0, r3
 8007630:	3710      	adds	r7, #16
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
	...

08007638 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b088      	sub	sp, #32
 800763c:	af02      	add	r7, sp, #8
 800763e:	60f8      	str	r0, [r7, #12]
 8007640:	60b9      	str	r1, [r7, #8]
 8007642:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007644:	4b1b      	ldr	r3, [pc, #108]	; (80076b4 <SPI_EndRxTxTransaction+0x7c>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a1b      	ldr	r2, [pc, #108]	; (80076b8 <SPI_EndRxTxTransaction+0x80>)
 800764a:	fba2 2303 	umull	r2, r3, r2, r3
 800764e:	0d5b      	lsrs	r3, r3, #21
 8007650:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007654:	fb02 f303 	mul.w	r3, r2, r3
 8007658:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007662:	d112      	bne.n	800768a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	9300      	str	r3, [sp, #0]
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	2200      	movs	r2, #0
 800766c:	2180      	movs	r1, #128	; 0x80
 800766e:	68f8      	ldr	r0, [r7, #12]
 8007670:	f7ff fef4 	bl	800745c <SPI_WaitFlagStateUntilTimeout>
 8007674:	4603      	mov	r3, r0
 8007676:	2b00      	cmp	r3, #0
 8007678:	d016      	beq.n	80076a8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800767e:	f043 0220 	orr.w	r2, r3, #32
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007686:	2303      	movs	r3, #3
 8007688:	e00f      	b.n	80076aa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d00a      	beq.n	80076a6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	3b01      	subs	r3, #1
 8007694:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	689b      	ldr	r3, [r3, #8]
 800769c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076a0:	2b80      	cmp	r3, #128	; 0x80
 80076a2:	d0f2      	beq.n	800768a <SPI_EndRxTxTransaction+0x52>
 80076a4:	e000      	b.n	80076a8 <SPI_EndRxTxTransaction+0x70>
        break;
 80076a6:	bf00      	nop
  }

  return HAL_OK;
 80076a8:	2300      	movs	r3, #0
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3718      	adds	r7, #24
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}
 80076b2:	bf00      	nop
 80076b4:	20000008 	.word	0x20000008
 80076b8:	165e9f81 	.word	0x165e9f81

080076bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b082      	sub	sp, #8
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d101      	bne.n	80076ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80076ca:	2301      	movs	r3, #1
 80076cc:	e041      	b.n	8007752 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076d4:	b2db      	uxtb	r3, r3
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d106      	bne.n	80076e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2200      	movs	r2, #0
 80076de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f7fb f9be 	bl	8002a64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2202      	movs	r2, #2
 80076ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	3304      	adds	r3, #4
 80076f8:	4619      	mov	r1, r3
 80076fa:	4610      	mov	r0, r2
 80076fc:	f000 fac4 	bl	8007c88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2201      	movs	r2, #1
 8007704:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2201      	movs	r2, #1
 800770c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2201      	movs	r2, #1
 8007714:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2201      	movs	r2, #1
 800771c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2201      	movs	r2, #1
 8007724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2201      	movs	r2, #1
 800772c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2201      	movs	r2, #1
 8007734:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2201      	movs	r2, #1
 800773c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2201      	movs	r2, #1
 8007744:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2201      	movs	r2, #1
 800774c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007750:	2300      	movs	r3, #0
}
 8007752:	4618      	mov	r0, r3
 8007754:	3708      	adds	r7, #8
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}
	...

0800775c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800775c:	b480      	push	{r7}
 800775e:	b085      	sub	sp, #20
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800776a:	b2db      	uxtb	r3, r3
 800776c:	2b01      	cmp	r3, #1
 800776e:	d001      	beq.n	8007774 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007770:	2301      	movs	r3, #1
 8007772:	e04e      	b.n	8007812 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2202      	movs	r2, #2
 8007778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	68da      	ldr	r2, [r3, #12]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f042 0201 	orr.w	r2, r2, #1
 800778a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a23      	ldr	r2, [pc, #140]	; (8007820 <HAL_TIM_Base_Start_IT+0xc4>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d022      	beq.n	80077dc <HAL_TIM_Base_Start_IT+0x80>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800779e:	d01d      	beq.n	80077dc <HAL_TIM_Base_Start_IT+0x80>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a1f      	ldr	r2, [pc, #124]	; (8007824 <HAL_TIM_Base_Start_IT+0xc8>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d018      	beq.n	80077dc <HAL_TIM_Base_Start_IT+0x80>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a1e      	ldr	r2, [pc, #120]	; (8007828 <HAL_TIM_Base_Start_IT+0xcc>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d013      	beq.n	80077dc <HAL_TIM_Base_Start_IT+0x80>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a1c      	ldr	r2, [pc, #112]	; (800782c <HAL_TIM_Base_Start_IT+0xd0>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d00e      	beq.n	80077dc <HAL_TIM_Base_Start_IT+0x80>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a1b      	ldr	r2, [pc, #108]	; (8007830 <HAL_TIM_Base_Start_IT+0xd4>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d009      	beq.n	80077dc <HAL_TIM_Base_Start_IT+0x80>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a19      	ldr	r2, [pc, #100]	; (8007834 <HAL_TIM_Base_Start_IT+0xd8>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d004      	beq.n	80077dc <HAL_TIM_Base_Start_IT+0x80>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a18      	ldr	r2, [pc, #96]	; (8007838 <HAL_TIM_Base_Start_IT+0xdc>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d111      	bne.n	8007800 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	689b      	ldr	r3, [r3, #8]
 80077e2:	f003 0307 	and.w	r3, r3, #7
 80077e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2b06      	cmp	r3, #6
 80077ec:	d010      	beq.n	8007810 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	681a      	ldr	r2, [r3, #0]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f042 0201 	orr.w	r2, r2, #1
 80077fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077fe:	e007      	b.n	8007810 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	681a      	ldr	r2, [r3, #0]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f042 0201 	orr.w	r2, r2, #1
 800780e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007810:	2300      	movs	r3, #0
}
 8007812:	4618      	mov	r0, r3
 8007814:	3714      	adds	r7, #20
 8007816:	46bd      	mov	sp, r7
 8007818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781c:	4770      	bx	lr
 800781e:	bf00      	nop
 8007820:	40010000 	.word	0x40010000
 8007824:	40000400 	.word	0x40000400
 8007828:	40000800 	.word	0x40000800
 800782c:	40000c00 	.word	0x40000c00
 8007830:	40010400 	.word	0x40010400
 8007834:	40014000 	.word	0x40014000
 8007838:	40001800 	.word	0x40001800

0800783c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800783c:	b480      	push	{r7}
 800783e:	b083      	sub	sp, #12
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	68da      	ldr	r2, [r3, #12]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f022 0201 	bic.w	r2, r2, #1
 8007852:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	6a1a      	ldr	r2, [r3, #32]
 800785a:	f241 1311 	movw	r3, #4369	; 0x1111
 800785e:	4013      	ands	r3, r2
 8007860:	2b00      	cmp	r3, #0
 8007862:	d10f      	bne.n	8007884 <HAL_TIM_Base_Stop_IT+0x48>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	6a1a      	ldr	r2, [r3, #32]
 800786a:	f240 4344 	movw	r3, #1092	; 0x444
 800786e:	4013      	ands	r3, r2
 8007870:	2b00      	cmp	r3, #0
 8007872:	d107      	bne.n	8007884 <HAL_TIM_Base_Stop_IT+0x48>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f022 0201 	bic.w	r2, r2, #1
 8007882:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2201      	movs	r2, #1
 8007888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800788c:	2300      	movs	r3, #0
}
 800788e:	4618      	mov	r0, r3
 8007890:	370c      	adds	r7, #12
 8007892:	46bd      	mov	sp, r7
 8007894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007898:	4770      	bx	lr

0800789a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800789a:	b580      	push	{r7, lr}
 800789c:	b082      	sub	sp, #8
 800789e:	af00      	add	r7, sp, #0
 80078a0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	691b      	ldr	r3, [r3, #16]
 80078a8:	f003 0302 	and.w	r3, r3, #2
 80078ac:	2b02      	cmp	r3, #2
 80078ae:	d122      	bne.n	80078f6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	68db      	ldr	r3, [r3, #12]
 80078b6:	f003 0302 	and.w	r3, r3, #2
 80078ba:	2b02      	cmp	r3, #2
 80078bc:	d11b      	bne.n	80078f6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f06f 0202 	mvn.w	r2, #2
 80078c6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2201      	movs	r2, #1
 80078cc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	699b      	ldr	r3, [r3, #24]
 80078d4:	f003 0303 	and.w	r3, r3, #3
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d003      	beq.n	80078e4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 f9b5 	bl	8007c4c <HAL_TIM_IC_CaptureCallback>
 80078e2:	e005      	b.n	80078f0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f000 f9a7 	bl	8007c38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 f9b8 	bl	8007c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2200      	movs	r2, #0
 80078f4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	691b      	ldr	r3, [r3, #16]
 80078fc:	f003 0304 	and.w	r3, r3, #4
 8007900:	2b04      	cmp	r3, #4
 8007902:	d122      	bne.n	800794a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	68db      	ldr	r3, [r3, #12]
 800790a:	f003 0304 	and.w	r3, r3, #4
 800790e:	2b04      	cmp	r3, #4
 8007910:	d11b      	bne.n	800794a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f06f 0204 	mvn.w	r2, #4
 800791a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2202      	movs	r2, #2
 8007920:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	699b      	ldr	r3, [r3, #24]
 8007928:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800792c:	2b00      	cmp	r3, #0
 800792e:	d003      	beq.n	8007938 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f000 f98b 	bl	8007c4c <HAL_TIM_IC_CaptureCallback>
 8007936:	e005      	b.n	8007944 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f000 f97d 	bl	8007c38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 f98e 	bl	8007c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2200      	movs	r2, #0
 8007948:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	691b      	ldr	r3, [r3, #16]
 8007950:	f003 0308 	and.w	r3, r3, #8
 8007954:	2b08      	cmp	r3, #8
 8007956:	d122      	bne.n	800799e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	68db      	ldr	r3, [r3, #12]
 800795e:	f003 0308 	and.w	r3, r3, #8
 8007962:	2b08      	cmp	r3, #8
 8007964:	d11b      	bne.n	800799e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f06f 0208 	mvn.w	r2, #8
 800796e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2204      	movs	r2, #4
 8007974:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	69db      	ldr	r3, [r3, #28]
 800797c:	f003 0303 	and.w	r3, r3, #3
 8007980:	2b00      	cmp	r3, #0
 8007982:	d003      	beq.n	800798c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 f961 	bl	8007c4c <HAL_TIM_IC_CaptureCallback>
 800798a:	e005      	b.n	8007998 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f000 f953 	bl	8007c38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 f964 	bl	8007c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	691b      	ldr	r3, [r3, #16]
 80079a4:	f003 0310 	and.w	r3, r3, #16
 80079a8:	2b10      	cmp	r3, #16
 80079aa:	d122      	bne.n	80079f2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	68db      	ldr	r3, [r3, #12]
 80079b2:	f003 0310 	and.w	r3, r3, #16
 80079b6:	2b10      	cmp	r3, #16
 80079b8:	d11b      	bne.n	80079f2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f06f 0210 	mvn.w	r2, #16
 80079c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2208      	movs	r2, #8
 80079c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	69db      	ldr	r3, [r3, #28]
 80079d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d003      	beq.n	80079e0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f000 f937 	bl	8007c4c <HAL_TIM_IC_CaptureCallback>
 80079de:	e005      	b.n	80079ec <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f000 f929 	bl	8007c38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 f93a 	bl	8007c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2200      	movs	r2, #0
 80079f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	691b      	ldr	r3, [r3, #16]
 80079f8:	f003 0301 	and.w	r3, r3, #1
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d10e      	bne.n	8007a1e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	68db      	ldr	r3, [r3, #12]
 8007a06:	f003 0301 	and.w	r3, r3, #1
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	d107      	bne.n	8007a1e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f06f 0201 	mvn.w	r2, #1
 8007a16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f7f9 fb37 	bl	800108c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	691b      	ldr	r3, [r3, #16]
 8007a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a28:	2b80      	cmp	r3, #128	; 0x80
 8007a2a:	d10e      	bne.n	8007a4a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	68db      	ldr	r3, [r3, #12]
 8007a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a36:	2b80      	cmp	r3, #128	; 0x80
 8007a38:	d107      	bne.n	8007a4a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007a42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f000 fadf 	bl	8008008 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	691b      	ldr	r3, [r3, #16]
 8007a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a54:	2b40      	cmp	r3, #64	; 0x40
 8007a56:	d10e      	bne.n	8007a76 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	68db      	ldr	r3, [r3, #12]
 8007a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a62:	2b40      	cmp	r3, #64	; 0x40
 8007a64:	d107      	bne.n	8007a76 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007a6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 f8ff 	bl	8007c74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	691b      	ldr	r3, [r3, #16]
 8007a7c:	f003 0320 	and.w	r3, r3, #32
 8007a80:	2b20      	cmp	r3, #32
 8007a82:	d10e      	bne.n	8007aa2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	68db      	ldr	r3, [r3, #12]
 8007a8a:	f003 0320 	and.w	r3, r3, #32
 8007a8e:	2b20      	cmp	r3, #32
 8007a90:	d107      	bne.n	8007aa2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f06f 0220 	mvn.w	r2, #32
 8007a9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f000 faa9 	bl	8007ff4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007aa2:	bf00      	nop
 8007aa4:	3708      	adds	r7, #8
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}

08007aaa <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007aaa:	b580      	push	{r7, lr}
 8007aac:	b084      	sub	sp, #16
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	6078      	str	r0, [r7, #4]
 8007ab2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	d101      	bne.n	8007ac6 <HAL_TIM_ConfigClockSource+0x1c>
 8007ac2:	2302      	movs	r3, #2
 8007ac4:	e0b4      	b.n	8007c30 <HAL_TIM_ConfigClockSource+0x186>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2201      	movs	r2, #1
 8007aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2202      	movs	r2, #2
 8007ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007ae4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007aec:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	68ba      	ldr	r2, [r7, #8]
 8007af4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007afe:	d03e      	beq.n	8007b7e <HAL_TIM_ConfigClockSource+0xd4>
 8007b00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b04:	f200 8087 	bhi.w	8007c16 <HAL_TIM_ConfigClockSource+0x16c>
 8007b08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b0c:	f000 8086 	beq.w	8007c1c <HAL_TIM_ConfigClockSource+0x172>
 8007b10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b14:	d87f      	bhi.n	8007c16 <HAL_TIM_ConfigClockSource+0x16c>
 8007b16:	2b70      	cmp	r3, #112	; 0x70
 8007b18:	d01a      	beq.n	8007b50 <HAL_TIM_ConfigClockSource+0xa6>
 8007b1a:	2b70      	cmp	r3, #112	; 0x70
 8007b1c:	d87b      	bhi.n	8007c16 <HAL_TIM_ConfigClockSource+0x16c>
 8007b1e:	2b60      	cmp	r3, #96	; 0x60
 8007b20:	d050      	beq.n	8007bc4 <HAL_TIM_ConfigClockSource+0x11a>
 8007b22:	2b60      	cmp	r3, #96	; 0x60
 8007b24:	d877      	bhi.n	8007c16 <HAL_TIM_ConfigClockSource+0x16c>
 8007b26:	2b50      	cmp	r3, #80	; 0x50
 8007b28:	d03c      	beq.n	8007ba4 <HAL_TIM_ConfigClockSource+0xfa>
 8007b2a:	2b50      	cmp	r3, #80	; 0x50
 8007b2c:	d873      	bhi.n	8007c16 <HAL_TIM_ConfigClockSource+0x16c>
 8007b2e:	2b40      	cmp	r3, #64	; 0x40
 8007b30:	d058      	beq.n	8007be4 <HAL_TIM_ConfigClockSource+0x13a>
 8007b32:	2b40      	cmp	r3, #64	; 0x40
 8007b34:	d86f      	bhi.n	8007c16 <HAL_TIM_ConfigClockSource+0x16c>
 8007b36:	2b30      	cmp	r3, #48	; 0x30
 8007b38:	d064      	beq.n	8007c04 <HAL_TIM_ConfigClockSource+0x15a>
 8007b3a:	2b30      	cmp	r3, #48	; 0x30
 8007b3c:	d86b      	bhi.n	8007c16 <HAL_TIM_ConfigClockSource+0x16c>
 8007b3e:	2b20      	cmp	r3, #32
 8007b40:	d060      	beq.n	8007c04 <HAL_TIM_ConfigClockSource+0x15a>
 8007b42:	2b20      	cmp	r3, #32
 8007b44:	d867      	bhi.n	8007c16 <HAL_TIM_ConfigClockSource+0x16c>
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d05c      	beq.n	8007c04 <HAL_TIM_ConfigClockSource+0x15a>
 8007b4a:	2b10      	cmp	r3, #16
 8007b4c:	d05a      	beq.n	8007c04 <HAL_TIM_ConfigClockSource+0x15a>
 8007b4e:	e062      	b.n	8007c16 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6818      	ldr	r0, [r3, #0]
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	6899      	ldr	r1, [r3, #8]
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	685a      	ldr	r2, [r3, #4]
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	68db      	ldr	r3, [r3, #12]
 8007b60:	f000 f9ac 	bl	8007ebc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	689b      	ldr	r3, [r3, #8]
 8007b6a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007b72:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	68ba      	ldr	r2, [r7, #8]
 8007b7a:	609a      	str	r2, [r3, #8]
      break;
 8007b7c:	e04f      	b.n	8007c1e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6818      	ldr	r0, [r3, #0]
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	6899      	ldr	r1, [r3, #8]
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	685a      	ldr	r2, [r3, #4]
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	68db      	ldr	r3, [r3, #12]
 8007b8e:	f000 f995 	bl	8007ebc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	689a      	ldr	r2, [r3, #8]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007ba0:	609a      	str	r2, [r3, #8]
      break;
 8007ba2:	e03c      	b.n	8007c1e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6818      	ldr	r0, [r3, #0]
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	6859      	ldr	r1, [r3, #4]
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	68db      	ldr	r3, [r3, #12]
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	f000 f909 	bl	8007dc8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	2150      	movs	r1, #80	; 0x50
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f000 f962 	bl	8007e86 <TIM_ITRx_SetConfig>
      break;
 8007bc2:	e02c      	b.n	8007c1e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6818      	ldr	r0, [r3, #0]
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	6859      	ldr	r1, [r3, #4]
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	68db      	ldr	r3, [r3, #12]
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	f000 f928 	bl	8007e26 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	2160      	movs	r1, #96	; 0x60
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f000 f952 	bl	8007e86 <TIM_ITRx_SetConfig>
      break;
 8007be2:	e01c      	b.n	8007c1e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6818      	ldr	r0, [r3, #0]
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	6859      	ldr	r1, [r3, #4]
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	68db      	ldr	r3, [r3, #12]
 8007bf0:	461a      	mov	r2, r3
 8007bf2:	f000 f8e9 	bl	8007dc8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	2140      	movs	r1, #64	; 0x40
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f000 f942 	bl	8007e86 <TIM_ITRx_SetConfig>
      break;
 8007c02:	e00c      	b.n	8007c1e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681a      	ldr	r2, [r3, #0]
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4619      	mov	r1, r3
 8007c0e:	4610      	mov	r0, r2
 8007c10:	f000 f939 	bl	8007e86 <TIM_ITRx_SetConfig>
      break;
 8007c14:	e003      	b.n	8007c1e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007c16:	2301      	movs	r3, #1
 8007c18:	73fb      	strb	r3, [r7, #15]
      break;
 8007c1a:	e000      	b.n	8007c1e <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007c1c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2201      	movs	r2, #1
 8007c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3710      	adds	r7, #16
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b083      	sub	sp, #12
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007c40:	bf00      	nop
 8007c42:	370c      	adds	r7, #12
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr

08007c4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b083      	sub	sp, #12
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007c54:	bf00      	nop
 8007c56:	370c      	adds	r7, #12
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr

08007c60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b083      	sub	sp, #12
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007c68:	bf00      	nop
 8007c6a:	370c      	adds	r7, #12
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr

08007c74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b083      	sub	sp, #12
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007c7c:	bf00      	nop
 8007c7e:	370c      	adds	r7, #12
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr

08007c88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b085      	sub	sp, #20
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	4a40      	ldr	r2, [pc, #256]	; (8007d9c <TIM_Base_SetConfig+0x114>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d013      	beq.n	8007cc8 <TIM_Base_SetConfig+0x40>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ca6:	d00f      	beq.n	8007cc8 <TIM_Base_SetConfig+0x40>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	4a3d      	ldr	r2, [pc, #244]	; (8007da0 <TIM_Base_SetConfig+0x118>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d00b      	beq.n	8007cc8 <TIM_Base_SetConfig+0x40>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	4a3c      	ldr	r2, [pc, #240]	; (8007da4 <TIM_Base_SetConfig+0x11c>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d007      	beq.n	8007cc8 <TIM_Base_SetConfig+0x40>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	4a3b      	ldr	r2, [pc, #236]	; (8007da8 <TIM_Base_SetConfig+0x120>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d003      	beq.n	8007cc8 <TIM_Base_SetConfig+0x40>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	4a3a      	ldr	r2, [pc, #232]	; (8007dac <TIM_Base_SetConfig+0x124>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d108      	bne.n	8007cda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	68fa      	ldr	r2, [r7, #12]
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	4a2f      	ldr	r2, [pc, #188]	; (8007d9c <TIM_Base_SetConfig+0x114>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d02b      	beq.n	8007d3a <TIM_Base_SetConfig+0xb2>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ce8:	d027      	beq.n	8007d3a <TIM_Base_SetConfig+0xb2>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	4a2c      	ldr	r2, [pc, #176]	; (8007da0 <TIM_Base_SetConfig+0x118>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d023      	beq.n	8007d3a <TIM_Base_SetConfig+0xb2>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	4a2b      	ldr	r2, [pc, #172]	; (8007da4 <TIM_Base_SetConfig+0x11c>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d01f      	beq.n	8007d3a <TIM_Base_SetConfig+0xb2>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	4a2a      	ldr	r2, [pc, #168]	; (8007da8 <TIM_Base_SetConfig+0x120>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d01b      	beq.n	8007d3a <TIM_Base_SetConfig+0xb2>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	4a29      	ldr	r2, [pc, #164]	; (8007dac <TIM_Base_SetConfig+0x124>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d017      	beq.n	8007d3a <TIM_Base_SetConfig+0xb2>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	4a28      	ldr	r2, [pc, #160]	; (8007db0 <TIM_Base_SetConfig+0x128>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d013      	beq.n	8007d3a <TIM_Base_SetConfig+0xb2>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	4a27      	ldr	r2, [pc, #156]	; (8007db4 <TIM_Base_SetConfig+0x12c>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d00f      	beq.n	8007d3a <TIM_Base_SetConfig+0xb2>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	4a26      	ldr	r2, [pc, #152]	; (8007db8 <TIM_Base_SetConfig+0x130>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d00b      	beq.n	8007d3a <TIM_Base_SetConfig+0xb2>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	4a25      	ldr	r2, [pc, #148]	; (8007dbc <TIM_Base_SetConfig+0x134>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d007      	beq.n	8007d3a <TIM_Base_SetConfig+0xb2>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	4a24      	ldr	r2, [pc, #144]	; (8007dc0 <TIM_Base_SetConfig+0x138>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d003      	beq.n	8007d3a <TIM_Base_SetConfig+0xb2>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	4a23      	ldr	r2, [pc, #140]	; (8007dc4 <TIM_Base_SetConfig+0x13c>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d108      	bne.n	8007d4c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	68db      	ldr	r3, [r3, #12]
 8007d46:	68fa      	ldr	r2, [r7, #12]
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	695b      	ldr	r3, [r3, #20]
 8007d56:	4313      	orrs	r3, r2
 8007d58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	68fa      	ldr	r2, [r7, #12]
 8007d5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	689a      	ldr	r2, [r3, #8]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	681a      	ldr	r2, [r3, #0]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	4a0a      	ldr	r2, [pc, #40]	; (8007d9c <TIM_Base_SetConfig+0x114>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d003      	beq.n	8007d80 <TIM_Base_SetConfig+0xf8>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	4a0c      	ldr	r2, [pc, #48]	; (8007dac <TIM_Base_SetConfig+0x124>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d103      	bne.n	8007d88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	691a      	ldr	r2, [r3, #16]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	615a      	str	r2, [r3, #20]
}
 8007d8e:	bf00      	nop
 8007d90:	3714      	adds	r7, #20
 8007d92:	46bd      	mov	sp, r7
 8007d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d98:	4770      	bx	lr
 8007d9a:	bf00      	nop
 8007d9c:	40010000 	.word	0x40010000
 8007da0:	40000400 	.word	0x40000400
 8007da4:	40000800 	.word	0x40000800
 8007da8:	40000c00 	.word	0x40000c00
 8007dac:	40010400 	.word	0x40010400
 8007db0:	40014000 	.word	0x40014000
 8007db4:	40014400 	.word	0x40014400
 8007db8:	40014800 	.word	0x40014800
 8007dbc:	40001800 	.word	0x40001800
 8007dc0:	40001c00 	.word	0x40001c00
 8007dc4:	40002000 	.word	0x40002000

08007dc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b087      	sub	sp, #28
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	60f8      	str	r0, [r7, #12]
 8007dd0:	60b9      	str	r1, [r7, #8]
 8007dd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	6a1b      	ldr	r3, [r3, #32]
 8007dd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	6a1b      	ldr	r3, [r3, #32]
 8007dde:	f023 0201 	bic.w	r2, r3, #1
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	699b      	ldr	r3, [r3, #24]
 8007dea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007df2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	011b      	lsls	r3, r3, #4
 8007df8:	693a      	ldr	r2, [r7, #16]
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	f023 030a 	bic.w	r3, r3, #10
 8007e04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007e06:	697a      	ldr	r2, [r7, #20]
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	693a      	ldr	r2, [r7, #16]
 8007e12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	697a      	ldr	r2, [r7, #20]
 8007e18:	621a      	str	r2, [r3, #32]
}
 8007e1a:	bf00      	nop
 8007e1c:	371c      	adds	r7, #28
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr

08007e26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e26:	b480      	push	{r7}
 8007e28:	b087      	sub	sp, #28
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	60f8      	str	r0, [r7, #12]
 8007e2e:	60b9      	str	r1, [r7, #8]
 8007e30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	6a1b      	ldr	r3, [r3, #32]
 8007e36:	f023 0210 	bic.w	r2, r3, #16
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	699b      	ldr	r3, [r3, #24]
 8007e42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	6a1b      	ldr	r3, [r3, #32]
 8007e48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007e50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	031b      	lsls	r3, r3, #12
 8007e56:	697a      	ldr	r2, [r7, #20]
 8007e58:	4313      	orrs	r3, r2
 8007e5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007e62:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	011b      	lsls	r3, r3, #4
 8007e68:	693a      	ldr	r2, [r7, #16]
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	697a      	ldr	r2, [r7, #20]
 8007e72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	693a      	ldr	r2, [r7, #16]
 8007e78:	621a      	str	r2, [r3, #32]
}
 8007e7a:	bf00      	nop
 8007e7c:	371c      	adds	r7, #28
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e84:	4770      	bx	lr

08007e86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007e86:	b480      	push	{r7}
 8007e88:	b085      	sub	sp, #20
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	6078      	str	r0, [r7, #4]
 8007e8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e9e:	683a      	ldr	r2, [r7, #0]
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	f043 0307 	orr.w	r3, r3, #7
 8007ea8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	68fa      	ldr	r2, [r7, #12]
 8007eae:	609a      	str	r2, [r3, #8]
}
 8007eb0:	bf00      	nop
 8007eb2:	3714      	adds	r7, #20
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr

08007ebc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b087      	sub	sp, #28
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	60b9      	str	r1, [r7, #8]
 8007ec6:	607a      	str	r2, [r7, #4]
 8007ec8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	689b      	ldr	r3, [r3, #8]
 8007ece:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ed6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	021a      	lsls	r2, r3, #8
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	431a      	orrs	r2, r3
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	697a      	ldr	r2, [r7, #20]
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	697a      	ldr	r2, [r7, #20]
 8007eee:	609a      	str	r2, [r3, #8]
}
 8007ef0:	bf00      	nop
 8007ef2:	371c      	adds	r7, #28
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr

08007efc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b085      	sub	sp, #20
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d101      	bne.n	8007f14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f10:	2302      	movs	r3, #2
 8007f12:	e05a      	b.n	8007fca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2201      	movs	r2, #1
 8007f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2202      	movs	r2, #2
 8007f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	68fa      	ldr	r2, [r7, #12]
 8007f42:	4313      	orrs	r3, r2
 8007f44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	68fa      	ldr	r2, [r7, #12]
 8007f4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a21      	ldr	r2, [pc, #132]	; (8007fd8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d022      	beq.n	8007f9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f60:	d01d      	beq.n	8007f9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a1d      	ldr	r2, [pc, #116]	; (8007fdc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d018      	beq.n	8007f9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a1b      	ldr	r2, [pc, #108]	; (8007fe0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d013      	beq.n	8007f9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a1a      	ldr	r2, [pc, #104]	; (8007fe4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d00e      	beq.n	8007f9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a18      	ldr	r2, [pc, #96]	; (8007fe8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d009      	beq.n	8007f9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a17      	ldr	r2, [pc, #92]	; (8007fec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d004      	beq.n	8007f9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a15      	ldr	r2, [pc, #84]	; (8007ff0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d10c      	bne.n	8007fb8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007fa4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	68ba      	ldr	r2, [r7, #8]
 8007fac:	4313      	orrs	r3, r2
 8007fae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	68ba      	ldr	r2, [r7, #8]
 8007fb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2201      	movs	r2, #1
 8007fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007fc8:	2300      	movs	r3, #0
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3714      	adds	r7, #20
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd4:	4770      	bx	lr
 8007fd6:	bf00      	nop
 8007fd8:	40010000 	.word	0x40010000
 8007fdc:	40000400 	.word	0x40000400
 8007fe0:	40000800 	.word	0x40000800
 8007fe4:	40000c00 	.word	0x40000c00
 8007fe8:	40010400 	.word	0x40010400
 8007fec:	40014000 	.word	0x40014000
 8007ff0:	40001800 	.word	0x40001800

08007ff4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b083      	sub	sp, #12
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ffc:	bf00      	nop
 8007ffe:	370c      	adds	r7, #12
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr

08008008 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008008:	b480      	push	{r7}
 800800a:	b083      	sub	sp, #12
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008010:	bf00      	nop
 8008012:	370c      	adds	r7, #12
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr

0800801c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b082      	sub	sp, #8
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d101      	bne.n	800802e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800802a:	2301      	movs	r3, #1
 800802c:	e03f      	b.n	80080ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008034:	b2db      	uxtb	r3, r3
 8008036:	2b00      	cmp	r3, #0
 8008038:	d106      	bne.n	8008048 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2200      	movs	r2, #0
 800803e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f7fa fd52 	bl	8002aec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2224      	movs	r2, #36	; 0x24
 800804c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	68da      	ldr	r2, [r3, #12]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800805e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f000 f929 	bl	80082b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	691a      	ldr	r2, [r3, #16]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008074:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	695a      	ldr	r2, [r3, #20]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008084:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	68da      	ldr	r2, [r3, #12]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008094:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2200      	movs	r2, #0
 800809a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2220      	movs	r2, #32
 80080a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2220      	movs	r2, #32
 80080a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80080ac:	2300      	movs	r3, #0
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3708      	adds	r7, #8
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}

080080b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80080b6:	b580      	push	{r7, lr}
 80080b8:	b08a      	sub	sp, #40	; 0x28
 80080ba:	af02      	add	r7, sp, #8
 80080bc:	60f8      	str	r0, [r7, #12]
 80080be:	60b9      	str	r1, [r7, #8]
 80080c0:	603b      	str	r3, [r7, #0]
 80080c2:	4613      	mov	r3, r2
 80080c4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80080c6:	2300      	movs	r3, #0
 80080c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080d0:	b2db      	uxtb	r3, r3
 80080d2:	2b20      	cmp	r3, #32
 80080d4:	d17c      	bne.n	80081d0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d002      	beq.n	80080e2 <HAL_UART_Transmit+0x2c>
 80080dc:	88fb      	ldrh	r3, [r7, #6]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d101      	bne.n	80080e6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80080e2:	2301      	movs	r3, #1
 80080e4:	e075      	b.n	80081d2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d101      	bne.n	80080f4 <HAL_UART_Transmit+0x3e>
 80080f0:	2302      	movs	r3, #2
 80080f2:	e06e      	b.n	80081d2 <HAL_UART_Transmit+0x11c>
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2201      	movs	r2, #1
 80080f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2200      	movs	r2, #0
 8008100:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2221      	movs	r2, #33	; 0x21
 8008106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800810a:	f7fc fb69 	bl	80047e0 <HAL_GetTick>
 800810e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	88fa      	ldrh	r2, [r7, #6]
 8008114:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	88fa      	ldrh	r2, [r7, #6]
 800811a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	689b      	ldr	r3, [r3, #8]
 8008120:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008124:	d108      	bne.n	8008138 <HAL_UART_Transmit+0x82>
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	691b      	ldr	r3, [r3, #16]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d104      	bne.n	8008138 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800812e:	2300      	movs	r3, #0
 8008130:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	61bb      	str	r3, [r7, #24]
 8008136:	e003      	b.n	8008140 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800813c:	2300      	movs	r3, #0
 800813e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2200      	movs	r2, #0
 8008144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008148:	e02a      	b.n	80081a0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	9300      	str	r3, [sp, #0]
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	2200      	movs	r2, #0
 8008152:	2180      	movs	r1, #128	; 0x80
 8008154:	68f8      	ldr	r0, [r7, #12]
 8008156:	f000 f840 	bl	80081da <UART_WaitOnFlagUntilTimeout>
 800815a:	4603      	mov	r3, r0
 800815c:	2b00      	cmp	r3, #0
 800815e:	d001      	beq.n	8008164 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008160:	2303      	movs	r3, #3
 8008162:	e036      	b.n	80081d2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008164:	69fb      	ldr	r3, [r7, #28]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d10b      	bne.n	8008182 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800816a:	69bb      	ldr	r3, [r7, #24]
 800816c:	881b      	ldrh	r3, [r3, #0]
 800816e:	461a      	mov	r2, r3
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008178:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800817a:	69bb      	ldr	r3, [r7, #24]
 800817c:	3302      	adds	r3, #2
 800817e:	61bb      	str	r3, [r7, #24]
 8008180:	e007      	b.n	8008192 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008182:	69fb      	ldr	r3, [r7, #28]
 8008184:	781a      	ldrb	r2, [r3, #0]
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800818c:	69fb      	ldr	r3, [r7, #28]
 800818e:	3301      	adds	r3, #1
 8008190:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008196:	b29b      	uxth	r3, r3
 8008198:	3b01      	subs	r3, #1
 800819a:	b29a      	uxth	r2, r3
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d1cf      	bne.n	800814a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	9300      	str	r3, [sp, #0]
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	2200      	movs	r2, #0
 80081b2:	2140      	movs	r1, #64	; 0x40
 80081b4:	68f8      	ldr	r0, [r7, #12]
 80081b6:	f000 f810 	bl	80081da <UART_WaitOnFlagUntilTimeout>
 80081ba:	4603      	mov	r3, r0
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d001      	beq.n	80081c4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80081c0:	2303      	movs	r3, #3
 80081c2:	e006      	b.n	80081d2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2220      	movs	r2, #32
 80081c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80081cc:	2300      	movs	r3, #0
 80081ce:	e000      	b.n	80081d2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80081d0:	2302      	movs	r3, #2
  }
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3720      	adds	r7, #32
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}

080081da <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80081da:	b580      	push	{r7, lr}
 80081dc:	b090      	sub	sp, #64	; 0x40
 80081de:	af00      	add	r7, sp, #0
 80081e0:	60f8      	str	r0, [r7, #12]
 80081e2:	60b9      	str	r1, [r7, #8]
 80081e4:	603b      	str	r3, [r7, #0]
 80081e6:	4613      	mov	r3, r2
 80081e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081ea:	e050      	b.n	800828e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081f2:	d04c      	beq.n	800828e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80081f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d007      	beq.n	800820a <UART_WaitOnFlagUntilTimeout+0x30>
 80081fa:	f7fc faf1 	bl	80047e0 <HAL_GetTick>
 80081fe:	4602      	mov	r2, r0
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	1ad3      	subs	r3, r2, r3
 8008204:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008206:	429a      	cmp	r2, r3
 8008208:	d241      	bcs.n	800828e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	330c      	adds	r3, #12
 8008210:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008214:	e853 3f00 	ldrex	r3, [r3]
 8008218:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800821a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008220:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	330c      	adds	r3, #12
 8008228:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800822a:	637a      	str	r2, [r7, #52]	; 0x34
 800822c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800822e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008230:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008232:	e841 2300 	strex	r3, r2, [r1]
 8008236:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800823a:	2b00      	cmp	r3, #0
 800823c:	d1e5      	bne.n	800820a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	3314      	adds	r3, #20
 8008244:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	e853 3f00 	ldrex	r3, [r3]
 800824c:	613b      	str	r3, [r7, #16]
   return(result);
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	f023 0301 	bic.w	r3, r3, #1
 8008254:	63bb      	str	r3, [r7, #56]	; 0x38
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	3314      	adds	r3, #20
 800825c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800825e:	623a      	str	r2, [r7, #32]
 8008260:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008262:	69f9      	ldr	r1, [r7, #28]
 8008264:	6a3a      	ldr	r2, [r7, #32]
 8008266:	e841 2300 	strex	r3, r2, [r1]
 800826a:	61bb      	str	r3, [r7, #24]
   return(result);
 800826c:	69bb      	ldr	r3, [r7, #24]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d1e5      	bne.n	800823e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2220      	movs	r2, #32
 8008276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2220      	movs	r2, #32
 800827e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2200      	movs	r2, #0
 8008286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800828a:	2303      	movs	r3, #3
 800828c:	e00f      	b.n	80082ae <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	681a      	ldr	r2, [r3, #0]
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	4013      	ands	r3, r2
 8008298:	68ba      	ldr	r2, [r7, #8]
 800829a:	429a      	cmp	r2, r3
 800829c:	bf0c      	ite	eq
 800829e:	2301      	moveq	r3, #1
 80082a0:	2300      	movne	r3, #0
 80082a2:	b2db      	uxtb	r3, r3
 80082a4:	461a      	mov	r2, r3
 80082a6:	79fb      	ldrb	r3, [r7, #7]
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d09f      	beq.n	80081ec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80082ac:	2300      	movs	r3, #0
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3740      	adds	r7, #64	; 0x40
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
	...

080082b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80082b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082bc:	b09f      	sub	sp, #124	; 0x7c
 80082be:	af00      	add	r7, sp, #0
 80082c0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80082c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	691b      	ldr	r3, [r3, #16]
 80082c8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80082cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082ce:	68d9      	ldr	r1, [r3, #12]
 80082d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	ea40 0301 	orr.w	r3, r0, r1
 80082d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80082da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082dc:	689a      	ldr	r2, [r3, #8]
 80082de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082e0:	691b      	ldr	r3, [r3, #16]
 80082e2:	431a      	orrs	r2, r3
 80082e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082e6:	695b      	ldr	r3, [r3, #20]
 80082e8:	431a      	orrs	r2, r3
 80082ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082ec:	69db      	ldr	r3, [r3, #28]
 80082ee:	4313      	orrs	r3, r2
 80082f0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80082f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	68db      	ldr	r3, [r3, #12]
 80082f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80082fc:	f021 010c 	bic.w	r1, r1, #12
 8008300:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008302:	681a      	ldr	r2, [r3, #0]
 8008304:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008306:	430b      	orrs	r3, r1
 8008308:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800830a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	695b      	ldr	r3, [r3, #20]
 8008310:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008314:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008316:	6999      	ldr	r1, [r3, #24]
 8008318:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	ea40 0301 	orr.w	r3, r0, r1
 8008320:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008322:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008324:	681a      	ldr	r2, [r3, #0]
 8008326:	4bc5      	ldr	r3, [pc, #788]	; (800863c <UART_SetConfig+0x384>)
 8008328:	429a      	cmp	r2, r3
 800832a:	d004      	beq.n	8008336 <UART_SetConfig+0x7e>
 800832c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800832e:	681a      	ldr	r2, [r3, #0]
 8008330:	4bc3      	ldr	r3, [pc, #780]	; (8008640 <UART_SetConfig+0x388>)
 8008332:	429a      	cmp	r2, r3
 8008334:	d103      	bne.n	800833e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008336:	f7fe f941 	bl	80065bc <HAL_RCC_GetPCLK2Freq>
 800833a:	6778      	str	r0, [r7, #116]	; 0x74
 800833c:	e002      	b.n	8008344 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800833e:	f7fe f929 	bl	8006594 <HAL_RCC_GetPCLK1Freq>
 8008342:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008344:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008346:	69db      	ldr	r3, [r3, #28]
 8008348:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800834c:	f040 80b6 	bne.w	80084bc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008350:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008352:	461c      	mov	r4, r3
 8008354:	f04f 0500 	mov.w	r5, #0
 8008358:	4622      	mov	r2, r4
 800835a:	462b      	mov	r3, r5
 800835c:	1891      	adds	r1, r2, r2
 800835e:	6439      	str	r1, [r7, #64]	; 0x40
 8008360:	415b      	adcs	r3, r3
 8008362:	647b      	str	r3, [r7, #68]	; 0x44
 8008364:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008368:	1912      	adds	r2, r2, r4
 800836a:	eb45 0303 	adc.w	r3, r5, r3
 800836e:	f04f 0000 	mov.w	r0, #0
 8008372:	f04f 0100 	mov.w	r1, #0
 8008376:	00d9      	lsls	r1, r3, #3
 8008378:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800837c:	00d0      	lsls	r0, r2, #3
 800837e:	4602      	mov	r2, r0
 8008380:	460b      	mov	r3, r1
 8008382:	1911      	adds	r1, r2, r4
 8008384:	6639      	str	r1, [r7, #96]	; 0x60
 8008386:	416b      	adcs	r3, r5
 8008388:	667b      	str	r3, [r7, #100]	; 0x64
 800838a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	461a      	mov	r2, r3
 8008390:	f04f 0300 	mov.w	r3, #0
 8008394:	1891      	adds	r1, r2, r2
 8008396:	63b9      	str	r1, [r7, #56]	; 0x38
 8008398:	415b      	adcs	r3, r3
 800839a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800839c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80083a0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80083a4:	f7f8 fc42 	bl	8000c2c <__aeabi_uldivmod>
 80083a8:	4602      	mov	r2, r0
 80083aa:	460b      	mov	r3, r1
 80083ac:	4ba5      	ldr	r3, [pc, #660]	; (8008644 <UART_SetConfig+0x38c>)
 80083ae:	fba3 2302 	umull	r2, r3, r3, r2
 80083b2:	095b      	lsrs	r3, r3, #5
 80083b4:	011e      	lsls	r6, r3, #4
 80083b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80083b8:	461c      	mov	r4, r3
 80083ba:	f04f 0500 	mov.w	r5, #0
 80083be:	4622      	mov	r2, r4
 80083c0:	462b      	mov	r3, r5
 80083c2:	1891      	adds	r1, r2, r2
 80083c4:	6339      	str	r1, [r7, #48]	; 0x30
 80083c6:	415b      	adcs	r3, r3
 80083c8:	637b      	str	r3, [r7, #52]	; 0x34
 80083ca:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80083ce:	1912      	adds	r2, r2, r4
 80083d0:	eb45 0303 	adc.w	r3, r5, r3
 80083d4:	f04f 0000 	mov.w	r0, #0
 80083d8:	f04f 0100 	mov.w	r1, #0
 80083dc:	00d9      	lsls	r1, r3, #3
 80083de:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80083e2:	00d0      	lsls	r0, r2, #3
 80083e4:	4602      	mov	r2, r0
 80083e6:	460b      	mov	r3, r1
 80083e8:	1911      	adds	r1, r2, r4
 80083ea:	65b9      	str	r1, [r7, #88]	; 0x58
 80083ec:	416b      	adcs	r3, r5
 80083ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80083f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	461a      	mov	r2, r3
 80083f6:	f04f 0300 	mov.w	r3, #0
 80083fa:	1891      	adds	r1, r2, r2
 80083fc:	62b9      	str	r1, [r7, #40]	; 0x28
 80083fe:	415b      	adcs	r3, r3
 8008400:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008402:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008406:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800840a:	f7f8 fc0f 	bl	8000c2c <__aeabi_uldivmod>
 800840e:	4602      	mov	r2, r0
 8008410:	460b      	mov	r3, r1
 8008412:	4b8c      	ldr	r3, [pc, #560]	; (8008644 <UART_SetConfig+0x38c>)
 8008414:	fba3 1302 	umull	r1, r3, r3, r2
 8008418:	095b      	lsrs	r3, r3, #5
 800841a:	2164      	movs	r1, #100	; 0x64
 800841c:	fb01 f303 	mul.w	r3, r1, r3
 8008420:	1ad3      	subs	r3, r2, r3
 8008422:	00db      	lsls	r3, r3, #3
 8008424:	3332      	adds	r3, #50	; 0x32
 8008426:	4a87      	ldr	r2, [pc, #540]	; (8008644 <UART_SetConfig+0x38c>)
 8008428:	fba2 2303 	umull	r2, r3, r2, r3
 800842c:	095b      	lsrs	r3, r3, #5
 800842e:	005b      	lsls	r3, r3, #1
 8008430:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008434:	441e      	add	r6, r3
 8008436:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008438:	4618      	mov	r0, r3
 800843a:	f04f 0100 	mov.w	r1, #0
 800843e:	4602      	mov	r2, r0
 8008440:	460b      	mov	r3, r1
 8008442:	1894      	adds	r4, r2, r2
 8008444:	623c      	str	r4, [r7, #32]
 8008446:	415b      	adcs	r3, r3
 8008448:	627b      	str	r3, [r7, #36]	; 0x24
 800844a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800844e:	1812      	adds	r2, r2, r0
 8008450:	eb41 0303 	adc.w	r3, r1, r3
 8008454:	f04f 0400 	mov.w	r4, #0
 8008458:	f04f 0500 	mov.w	r5, #0
 800845c:	00dd      	lsls	r5, r3, #3
 800845e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008462:	00d4      	lsls	r4, r2, #3
 8008464:	4622      	mov	r2, r4
 8008466:	462b      	mov	r3, r5
 8008468:	1814      	adds	r4, r2, r0
 800846a:	653c      	str	r4, [r7, #80]	; 0x50
 800846c:	414b      	adcs	r3, r1
 800846e:	657b      	str	r3, [r7, #84]	; 0x54
 8008470:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	461a      	mov	r2, r3
 8008476:	f04f 0300 	mov.w	r3, #0
 800847a:	1891      	adds	r1, r2, r2
 800847c:	61b9      	str	r1, [r7, #24]
 800847e:	415b      	adcs	r3, r3
 8008480:	61fb      	str	r3, [r7, #28]
 8008482:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008486:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800848a:	f7f8 fbcf 	bl	8000c2c <__aeabi_uldivmod>
 800848e:	4602      	mov	r2, r0
 8008490:	460b      	mov	r3, r1
 8008492:	4b6c      	ldr	r3, [pc, #432]	; (8008644 <UART_SetConfig+0x38c>)
 8008494:	fba3 1302 	umull	r1, r3, r3, r2
 8008498:	095b      	lsrs	r3, r3, #5
 800849a:	2164      	movs	r1, #100	; 0x64
 800849c:	fb01 f303 	mul.w	r3, r1, r3
 80084a0:	1ad3      	subs	r3, r2, r3
 80084a2:	00db      	lsls	r3, r3, #3
 80084a4:	3332      	adds	r3, #50	; 0x32
 80084a6:	4a67      	ldr	r2, [pc, #412]	; (8008644 <UART_SetConfig+0x38c>)
 80084a8:	fba2 2303 	umull	r2, r3, r2, r3
 80084ac:	095b      	lsrs	r3, r3, #5
 80084ae:	f003 0207 	and.w	r2, r3, #7
 80084b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4432      	add	r2, r6
 80084b8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80084ba:	e0b9      	b.n	8008630 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80084bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084be:	461c      	mov	r4, r3
 80084c0:	f04f 0500 	mov.w	r5, #0
 80084c4:	4622      	mov	r2, r4
 80084c6:	462b      	mov	r3, r5
 80084c8:	1891      	adds	r1, r2, r2
 80084ca:	6139      	str	r1, [r7, #16]
 80084cc:	415b      	adcs	r3, r3
 80084ce:	617b      	str	r3, [r7, #20]
 80084d0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80084d4:	1912      	adds	r2, r2, r4
 80084d6:	eb45 0303 	adc.w	r3, r5, r3
 80084da:	f04f 0000 	mov.w	r0, #0
 80084de:	f04f 0100 	mov.w	r1, #0
 80084e2:	00d9      	lsls	r1, r3, #3
 80084e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80084e8:	00d0      	lsls	r0, r2, #3
 80084ea:	4602      	mov	r2, r0
 80084ec:	460b      	mov	r3, r1
 80084ee:	eb12 0804 	adds.w	r8, r2, r4
 80084f2:	eb43 0905 	adc.w	r9, r3, r5
 80084f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084f8:	685b      	ldr	r3, [r3, #4]
 80084fa:	4618      	mov	r0, r3
 80084fc:	f04f 0100 	mov.w	r1, #0
 8008500:	f04f 0200 	mov.w	r2, #0
 8008504:	f04f 0300 	mov.w	r3, #0
 8008508:	008b      	lsls	r3, r1, #2
 800850a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800850e:	0082      	lsls	r2, r0, #2
 8008510:	4640      	mov	r0, r8
 8008512:	4649      	mov	r1, r9
 8008514:	f7f8 fb8a 	bl	8000c2c <__aeabi_uldivmod>
 8008518:	4602      	mov	r2, r0
 800851a:	460b      	mov	r3, r1
 800851c:	4b49      	ldr	r3, [pc, #292]	; (8008644 <UART_SetConfig+0x38c>)
 800851e:	fba3 2302 	umull	r2, r3, r3, r2
 8008522:	095b      	lsrs	r3, r3, #5
 8008524:	011e      	lsls	r6, r3, #4
 8008526:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008528:	4618      	mov	r0, r3
 800852a:	f04f 0100 	mov.w	r1, #0
 800852e:	4602      	mov	r2, r0
 8008530:	460b      	mov	r3, r1
 8008532:	1894      	adds	r4, r2, r2
 8008534:	60bc      	str	r4, [r7, #8]
 8008536:	415b      	adcs	r3, r3
 8008538:	60fb      	str	r3, [r7, #12]
 800853a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800853e:	1812      	adds	r2, r2, r0
 8008540:	eb41 0303 	adc.w	r3, r1, r3
 8008544:	f04f 0400 	mov.w	r4, #0
 8008548:	f04f 0500 	mov.w	r5, #0
 800854c:	00dd      	lsls	r5, r3, #3
 800854e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008552:	00d4      	lsls	r4, r2, #3
 8008554:	4622      	mov	r2, r4
 8008556:	462b      	mov	r3, r5
 8008558:	1814      	adds	r4, r2, r0
 800855a:	64bc      	str	r4, [r7, #72]	; 0x48
 800855c:	414b      	adcs	r3, r1
 800855e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008560:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008562:	685b      	ldr	r3, [r3, #4]
 8008564:	4618      	mov	r0, r3
 8008566:	f04f 0100 	mov.w	r1, #0
 800856a:	f04f 0200 	mov.w	r2, #0
 800856e:	f04f 0300 	mov.w	r3, #0
 8008572:	008b      	lsls	r3, r1, #2
 8008574:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008578:	0082      	lsls	r2, r0, #2
 800857a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800857e:	f7f8 fb55 	bl	8000c2c <__aeabi_uldivmod>
 8008582:	4602      	mov	r2, r0
 8008584:	460b      	mov	r3, r1
 8008586:	4b2f      	ldr	r3, [pc, #188]	; (8008644 <UART_SetConfig+0x38c>)
 8008588:	fba3 1302 	umull	r1, r3, r3, r2
 800858c:	095b      	lsrs	r3, r3, #5
 800858e:	2164      	movs	r1, #100	; 0x64
 8008590:	fb01 f303 	mul.w	r3, r1, r3
 8008594:	1ad3      	subs	r3, r2, r3
 8008596:	011b      	lsls	r3, r3, #4
 8008598:	3332      	adds	r3, #50	; 0x32
 800859a:	4a2a      	ldr	r2, [pc, #168]	; (8008644 <UART_SetConfig+0x38c>)
 800859c:	fba2 2303 	umull	r2, r3, r2, r3
 80085a0:	095b      	lsrs	r3, r3, #5
 80085a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80085a6:	441e      	add	r6, r3
 80085a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085aa:	4618      	mov	r0, r3
 80085ac:	f04f 0100 	mov.w	r1, #0
 80085b0:	4602      	mov	r2, r0
 80085b2:	460b      	mov	r3, r1
 80085b4:	1894      	adds	r4, r2, r2
 80085b6:	603c      	str	r4, [r7, #0]
 80085b8:	415b      	adcs	r3, r3
 80085ba:	607b      	str	r3, [r7, #4]
 80085bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085c0:	1812      	adds	r2, r2, r0
 80085c2:	eb41 0303 	adc.w	r3, r1, r3
 80085c6:	f04f 0400 	mov.w	r4, #0
 80085ca:	f04f 0500 	mov.w	r5, #0
 80085ce:	00dd      	lsls	r5, r3, #3
 80085d0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80085d4:	00d4      	lsls	r4, r2, #3
 80085d6:	4622      	mov	r2, r4
 80085d8:	462b      	mov	r3, r5
 80085da:	eb12 0a00 	adds.w	sl, r2, r0
 80085de:	eb43 0b01 	adc.w	fp, r3, r1
 80085e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	4618      	mov	r0, r3
 80085e8:	f04f 0100 	mov.w	r1, #0
 80085ec:	f04f 0200 	mov.w	r2, #0
 80085f0:	f04f 0300 	mov.w	r3, #0
 80085f4:	008b      	lsls	r3, r1, #2
 80085f6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80085fa:	0082      	lsls	r2, r0, #2
 80085fc:	4650      	mov	r0, sl
 80085fe:	4659      	mov	r1, fp
 8008600:	f7f8 fb14 	bl	8000c2c <__aeabi_uldivmod>
 8008604:	4602      	mov	r2, r0
 8008606:	460b      	mov	r3, r1
 8008608:	4b0e      	ldr	r3, [pc, #56]	; (8008644 <UART_SetConfig+0x38c>)
 800860a:	fba3 1302 	umull	r1, r3, r3, r2
 800860e:	095b      	lsrs	r3, r3, #5
 8008610:	2164      	movs	r1, #100	; 0x64
 8008612:	fb01 f303 	mul.w	r3, r1, r3
 8008616:	1ad3      	subs	r3, r2, r3
 8008618:	011b      	lsls	r3, r3, #4
 800861a:	3332      	adds	r3, #50	; 0x32
 800861c:	4a09      	ldr	r2, [pc, #36]	; (8008644 <UART_SetConfig+0x38c>)
 800861e:	fba2 2303 	umull	r2, r3, r2, r3
 8008622:	095b      	lsrs	r3, r3, #5
 8008624:	f003 020f 	and.w	r2, r3, #15
 8008628:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4432      	add	r2, r6
 800862e:	609a      	str	r2, [r3, #8]
}
 8008630:	bf00      	nop
 8008632:	377c      	adds	r7, #124	; 0x7c
 8008634:	46bd      	mov	sp, r7
 8008636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800863a:	bf00      	nop
 800863c:	40011000 	.word	0x40011000
 8008640:	40011400 	.word	0x40011400
 8008644:	51eb851f 	.word	0x51eb851f

08008648 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008648:	b480      	push	{r7}
 800864a:	b085      	sub	sp, #20
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8008652:	2300      	movs	r3, #0
 8008654:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8008656:	2300      	movs	r3, #0
 8008658:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	2b01      	cmp	r3, #1
 8008660:	d029      	beq.n	80086b6 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800866e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008672:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800867c:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8008682:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8008688:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 800868e:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8008694:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 800869a:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 80086a0:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 80086a6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80086a8:	68fa      	ldr	r2, [r7, #12]
 80086aa:	4313      	orrs	r3, r2
 80086ac:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	68fa      	ldr	r2, [r7, #12]
 80086b2:	601a      	str	r2, [r3, #0]
 80086b4:	e034      	b.n	8008720 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80086c2:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80086cc:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80086d2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80086d4:	68fa      	ldr	r2, [r7, #12]
 80086d6:	4313      	orrs	r3, r2
 80086d8:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	685b      	ldr	r3, [r3, #4]
 80086de:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80086e6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80086ea:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80086f4:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 80086fa:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8008700:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8008706:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 800870c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800870e:	68ba      	ldr	r2, [r7, #8]
 8008710:	4313      	orrs	r3, r2
 8008712:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	68fa      	ldr	r2, [r7, #12]
 8008718:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	68ba      	ldr	r2, [r7, #8]
 800871e:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8008720:	2300      	movs	r3, #0
}
 8008722:	4618      	mov	r0, r3
 8008724:	3714      	adds	r7, #20
 8008726:	46bd      	mov	sp, r7
 8008728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872c:	4770      	bx	lr

0800872e <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800872e:	b480      	push	{r7}
 8008730:	b087      	sub	sp, #28
 8008732:	af00      	add	r7, sp, #0
 8008734:	60f8      	str	r0, [r7, #12]
 8008736:	60b9      	str	r1, [r7, #8]
 8008738:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 800873a:	2300      	movs	r3, #0
 800873c:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 800873e:	2300      	movs	r3, #0
 8008740:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2b01      	cmp	r3, #1
 8008746:	d02e      	beq.n	80087a6 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	689b      	ldr	r3, [r3, #8]
 800874c:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008754:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	3b01      	subs	r3, #1
 8008762:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008764:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	689b      	ldr	r3, [r3, #8]
 800876a:	3b01      	subs	r3, #1
 800876c:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800876e:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	68db      	ldr	r3, [r3, #12]
 8008774:	3b01      	subs	r3, #1
 8008776:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8008778:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	691b      	ldr	r3, [r3, #16]
 800877e:	3b01      	subs	r3, #1
 8008780:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008782:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	695b      	ldr	r3, [r3, #20]
 8008788:	3b01      	subs	r3, #1
 800878a:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800878c:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	699b      	ldr	r3, [r3, #24]
 8008792:	3b01      	subs	r3, #1
 8008794:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008796:	4313      	orrs	r3, r2
 8008798:	697a      	ldr	r2, [r7, #20]
 800879a:	4313      	orrs	r3, r2
 800879c:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	697a      	ldr	r2, [r7, #20]
 80087a2:	609a      	str	r2, [r3, #8]
 80087a4:	e03b      	b.n	800881e <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	689b      	ldr	r3, [r3, #8]
 80087aa:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80087b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80087b6:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	68db      	ldr	r3, [r3, #12]
 80087bc:	3b01      	subs	r3, #1
 80087be:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	695b      	ldr	r3, [r3, #20]
 80087c4:	3b01      	subs	r3, #1
 80087c6:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 80087c8:	4313      	orrs	r3, r2
 80087ca:	697a      	ldr	r2, [r7, #20]
 80087cc:	4313      	orrs	r3, r2
 80087ce:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	68db      	ldr	r3, [r3, #12]
 80087d4:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80087dc:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	3b01      	subs	r3, #1
 80087ea:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80087ec:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	689b      	ldr	r3, [r3, #8]
 80087f2:	3b01      	subs	r3, #1
 80087f4:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 80087f6:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	691b      	ldr	r3, [r3, #16]
 80087fc:	3b01      	subs	r3, #1
 80087fe:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8008800:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	699b      	ldr	r3, [r3, #24]
 8008806:	3b01      	subs	r3, #1
 8008808:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800880a:	4313      	orrs	r3, r2
 800880c:	693a      	ldr	r2, [r7, #16]
 800880e:	4313      	orrs	r3, r2
 8008810:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	697a      	ldr	r2, [r7, #20]
 8008816:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	693a      	ldr	r2, [r7, #16]
 800881c:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 800881e:	2300      	movs	r3, #0
}
 8008820:	4618      	mov	r0, r3
 8008822:	371c      	adds	r7, #28
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr

0800882c <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b086      	sub	sp, #24
 8008830:	af00      	add	r7, sp, #0
 8008832:	60f8      	str	r0, [r7, #12]
 8008834:	60b9      	str	r1, [r7, #8]
 8008836:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8008838:	2300      	movs	r3, #0
 800883a:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 800883c:	2300      	movs	r3, #0
 800883e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008848:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	689b      	ldr	r3, [r3, #8]
 800884e:	3b01      	subs	r3, #1
 8008850:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8008852:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	68db      	ldr	r3, [r3, #12]
 8008858:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800885a:	4313      	orrs	r3, r2
 800885c:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 800885e:	693a      	ldr	r2, [r7, #16]
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8008864:	f7fb ffbc 	bl	80047e0 <HAL_GetTick>
 8008868:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800886a:	e010      	b.n	800888e <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008872:	d00c      	beq.n	800888e <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d007      	beq.n	800888a <FMC_SDRAM_SendCommand+0x5e>
 800887a:	f7fb ffb1 	bl	80047e0 <HAL_GetTick>
 800887e:	4602      	mov	r2, r0
 8008880:	697b      	ldr	r3, [r7, #20]
 8008882:	1ad3      	subs	r3, r2, r3
 8008884:	687a      	ldr	r2, [r7, #4]
 8008886:	429a      	cmp	r2, r3
 8008888:	d201      	bcs.n	800888e <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 800888a:	2303      	movs	r3, #3
 800888c:	e006      	b.n	800889c <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	699b      	ldr	r3, [r3, #24]
 8008892:	f003 0320 	and.w	r3, r3, #32
 8008896:	2b20      	cmp	r3, #32
 8008898:	d0e8      	beq.n	800886c <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 800889a:	2300      	movs	r3, #0
}
 800889c:	4618      	mov	r0, r3
 800889e:	3718      	adds	r7, #24
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}

080088a4 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b083      	sub	sp, #12
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	695a      	ldr	r2, [r3, #20]
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	005b      	lsls	r3, r3, #1
 80088b6:	431a      	orrs	r2, r3
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 80088bc:	2300      	movs	r3, #0
}
 80088be:	4618      	mov	r0, r3
 80088c0:	370c      	adds	r7, #12
 80088c2:	46bd      	mov	sp, r7
 80088c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c8:	4770      	bx	lr
	...

080088cc <__NVIC_SetPriority>:
{
 80088cc:	b480      	push	{r7}
 80088ce:	b083      	sub	sp, #12
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	4603      	mov	r3, r0
 80088d4:	6039      	str	r1, [r7, #0]
 80088d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80088d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	db0a      	blt.n	80088f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	b2da      	uxtb	r2, r3
 80088e4:	490c      	ldr	r1, [pc, #48]	; (8008918 <__NVIC_SetPriority+0x4c>)
 80088e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088ea:	0112      	lsls	r2, r2, #4
 80088ec:	b2d2      	uxtb	r2, r2
 80088ee:	440b      	add	r3, r1
 80088f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80088f4:	e00a      	b.n	800890c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	b2da      	uxtb	r2, r3
 80088fa:	4908      	ldr	r1, [pc, #32]	; (800891c <__NVIC_SetPriority+0x50>)
 80088fc:	79fb      	ldrb	r3, [r7, #7]
 80088fe:	f003 030f 	and.w	r3, r3, #15
 8008902:	3b04      	subs	r3, #4
 8008904:	0112      	lsls	r2, r2, #4
 8008906:	b2d2      	uxtb	r2, r2
 8008908:	440b      	add	r3, r1
 800890a:	761a      	strb	r2, [r3, #24]
}
 800890c:	bf00      	nop
 800890e:	370c      	adds	r7, #12
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr
 8008918:	e000e100 	.word	0xe000e100
 800891c:	e000ed00 	.word	0xe000ed00

08008920 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008920:	b580      	push	{r7, lr}
 8008922:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008924:	4b05      	ldr	r3, [pc, #20]	; (800893c <SysTick_Handler+0x1c>)
 8008926:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008928:	f001 fea2 	bl	800a670 <xTaskGetSchedulerState>
 800892c:	4603      	mov	r3, r0
 800892e:	2b01      	cmp	r3, #1
 8008930:	d001      	beq.n	8008936 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008932:	f002 fc89 	bl	800b248 <xPortSysTickHandler>
  }
}
 8008936:	bf00      	nop
 8008938:	bd80      	pop	{r7, pc}
 800893a:	bf00      	nop
 800893c:	e000e010 	.word	0xe000e010

08008940 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008940:	b580      	push	{r7, lr}
 8008942:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008944:	2100      	movs	r1, #0
 8008946:	f06f 0004 	mvn.w	r0, #4
 800894a:	f7ff ffbf 	bl	80088cc <__NVIC_SetPriority>
#endif
}
 800894e:	bf00      	nop
 8008950:	bd80      	pop	{r7, pc}
	...

08008954 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008954:	b480      	push	{r7}
 8008956:	b083      	sub	sp, #12
 8008958:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800895a:	f3ef 8305 	mrs	r3, IPSR
 800895e:	603b      	str	r3, [r7, #0]
  return(result);
 8008960:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008962:	2b00      	cmp	r3, #0
 8008964:	d003      	beq.n	800896e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008966:	f06f 0305 	mvn.w	r3, #5
 800896a:	607b      	str	r3, [r7, #4]
 800896c:	e00c      	b.n	8008988 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800896e:	4b0a      	ldr	r3, [pc, #40]	; (8008998 <osKernelInitialize+0x44>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d105      	bne.n	8008982 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008976:	4b08      	ldr	r3, [pc, #32]	; (8008998 <osKernelInitialize+0x44>)
 8008978:	2201      	movs	r2, #1
 800897a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800897c:	2300      	movs	r3, #0
 800897e:	607b      	str	r3, [r7, #4]
 8008980:	e002      	b.n	8008988 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008982:	f04f 33ff 	mov.w	r3, #4294967295
 8008986:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008988:	687b      	ldr	r3, [r7, #4]
}
 800898a:	4618      	mov	r0, r3
 800898c:	370c      	adds	r7, #12
 800898e:	46bd      	mov	sp, r7
 8008990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008994:	4770      	bx	lr
 8008996:	bf00      	nop
 8008998:	200002a4 	.word	0x200002a4

0800899c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800899c:	b580      	push	{r7, lr}
 800899e:	b082      	sub	sp, #8
 80089a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80089a2:	f3ef 8305 	mrs	r3, IPSR
 80089a6:	603b      	str	r3, [r7, #0]
  return(result);
 80089a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d003      	beq.n	80089b6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80089ae:	f06f 0305 	mvn.w	r3, #5
 80089b2:	607b      	str	r3, [r7, #4]
 80089b4:	e010      	b.n	80089d8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80089b6:	4b0b      	ldr	r3, [pc, #44]	; (80089e4 <osKernelStart+0x48>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	2b01      	cmp	r3, #1
 80089bc:	d109      	bne.n	80089d2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80089be:	f7ff ffbf 	bl	8008940 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80089c2:	4b08      	ldr	r3, [pc, #32]	; (80089e4 <osKernelStart+0x48>)
 80089c4:	2202      	movs	r2, #2
 80089c6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80089c8:	f001 f9f6 	bl	8009db8 <vTaskStartScheduler>
      stat = osOK;
 80089cc:	2300      	movs	r3, #0
 80089ce:	607b      	str	r3, [r7, #4]
 80089d0:	e002      	b.n	80089d8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80089d2:	f04f 33ff 	mov.w	r3, #4294967295
 80089d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80089d8:	687b      	ldr	r3, [r7, #4]
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3708      	adds	r7, #8
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}
 80089e2:	bf00      	nop
 80089e4:	200002a4 	.word	0x200002a4

080089e8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b08e      	sub	sp, #56	; 0x38
 80089ec:	af04      	add	r7, sp, #16
 80089ee:	60f8      	str	r0, [r7, #12]
 80089f0:	60b9      	str	r1, [r7, #8]
 80089f2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80089f4:	2300      	movs	r3, #0
 80089f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80089f8:	f3ef 8305 	mrs	r3, IPSR
 80089fc:	617b      	str	r3, [r7, #20]
  return(result);
 80089fe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d17e      	bne.n	8008b02 <osThreadNew+0x11a>
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d07b      	beq.n	8008b02 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008a0a:	2380      	movs	r3, #128	; 0x80
 8008a0c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008a0e:	2318      	movs	r3, #24
 8008a10:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008a12:	2300      	movs	r3, #0
 8008a14:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008a16:	f04f 33ff 	mov.w	r3, #4294967295
 8008a1a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d045      	beq.n	8008aae <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d002      	beq.n	8008a30 <osThreadNew+0x48>
        name = attr->name;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	699b      	ldr	r3, [r3, #24]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d002      	beq.n	8008a3e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	699b      	ldr	r3, [r3, #24]
 8008a3c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008a3e:	69fb      	ldr	r3, [r7, #28]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d008      	beq.n	8008a56 <osThreadNew+0x6e>
 8008a44:	69fb      	ldr	r3, [r7, #28]
 8008a46:	2b38      	cmp	r3, #56	; 0x38
 8008a48:	d805      	bhi.n	8008a56 <osThreadNew+0x6e>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	685b      	ldr	r3, [r3, #4]
 8008a4e:	f003 0301 	and.w	r3, r3, #1
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d001      	beq.n	8008a5a <osThreadNew+0x72>
        return (NULL);
 8008a56:	2300      	movs	r3, #0
 8008a58:	e054      	b.n	8008b04 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	695b      	ldr	r3, [r3, #20]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d003      	beq.n	8008a6a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	695b      	ldr	r3, [r3, #20]
 8008a66:	089b      	lsrs	r3, r3, #2
 8008a68:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	689b      	ldr	r3, [r3, #8]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d00e      	beq.n	8008a90 <osThreadNew+0xa8>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	68db      	ldr	r3, [r3, #12]
 8008a76:	2bbb      	cmp	r3, #187	; 0xbb
 8008a78:	d90a      	bls.n	8008a90 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d006      	beq.n	8008a90 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	695b      	ldr	r3, [r3, #20]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d002      	beq.n	8008a90 <osThreadNew+0xa8>
        mem = 1;
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	61bb      	str	r3, [r7, #24]
 8008a8e:	e010      	b.n	8008ab2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	689b      	ldr	r3, [r3, #8]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d10c      	bne.n	8008ab2 <osThreadNew+0xca>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	68db      	ldr	r3, [r3, #12]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d108      	bne.n	8008ab2 <osThreadNew+0xca>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	691b      	ldr	r3, [r3, #16]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d104      	bne.n	8008ab2 <osThreadNew+0xca>
          mem = 0;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	61bb      	str	r3, [r7, #24]
 8008aac:	e001      	b.n	8008ab2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008ab2:	69bb      	ldr	r3, [r7, #24]
 8008ab4:	2b01      	cmp	r3, #1
 8008ab6:	d110      	bne.n	8008ada <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008abc:	687a      	ldr	r2, [r7, #4]
 8008abe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008ac0:	9202      	str	r2, [sp, #8]
 8008ac2:	9301      	str	r3, [sp, #4]
 8008ac4:	69fb      	ldr	r3, [r7, #28]
 8008ac6:	9300      	str	r3, [sp, #0]
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	6a3a      	ldr	r2, [r7, #32]
 8008acc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008ace:	68f8      	ldr	r0, [r7, #12]
 8008ad0:	f000 ff86 	bl	80099e0 <xTaskCreateStatic>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	613b      	str	r3, [r7, #16]
 8008ad8:	e013      	b.n	8008b02 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008ada:	69bb      	ldr	r3, [r7, #24]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d110      	bne.n	8008b02 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008ae0:	6a3b      	ldr	r3, [r7, #32]
 8008ae2:	b29a      	uxth	r2, r3
 8008ae4:	f107 0310 	add.w	r3, r7, #16
 8008ae8:	9301      	str	r3, [sp, #4]
 8008aea:	69fb      	ldr	r3, [r7, #28]
 8008aec:	9300      	str	r3, [sp, #0]
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008af2:	68f8      	ldr	r0, [r7, #12]
 8008af4:	f000 ffd1 	bl	8009a9a <xTaskCreate>
 8008af8:	4603      	mov	r3, r0
 8008afa:	2b01      	cmp	r3, #1
 8008afc:	d001      	beq.n	8008b02 <osThreadNew+0x11a>
            hTask = NULL;
 8008afe:	2300      	movs	r3, #0
 8008b00:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008b02:	693b      	ldr	r3, [r7, #16]
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3728      	adds	r7, #40	; 0x28
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}

08008b0c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b084      	sub	sp, #16
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b14:	f3ef 8305 	mrs	r3, IPSR
 8008b18:	60bb      	str	r3, [r7, #8]
  return(result);
 8008b1a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d003      	beq.n	8008b28 <osDelay+0x1c>
    stat = osErrorISR;
 8008b20:	f06f 0305 	mvn.w	r3, #5
 8008b24:	60fb      	str	r3, [r7, #12]
 8008b26:	e007      	b.n	8008b38 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d002      	beq.n	8008b38 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f001 f90c 	bl	8009d50 <vTaskDelay>
    }
  }

  return (stat);
 8008b38:	68fb      	ldr	r3, [r7, #12]
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3710      	adds	r7, #16
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}

08008b42 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008b42:	b580      	push	{r7, lr}
 8008b44:	b08a      	sub	sp, #40	; 0x28
 8008b46:	af02      	add	r7, sp, #8
 8008b48:	60f8      	str	r0, [r7, #12]
 8008b4a:	60b9      	str	r1, [r7, #8]
 8008b4c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b52:	f3ef 8305 	mrs	r3, IPSR
 8008b56:	613b      	str	r3, [r7, #16]
  return(result);
 8008b58:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d175      	bne.n	8008c4a <osSemaphoreNew+0x108>
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d072      	beq.n	8008c4a <osSemaphoreNew+0x108>
 8008b64:	68ba      	ldr	r2, [r7, #8]
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	429a      	cmp	r2, r3
 8008b6a:	d86e      	bhi.n	8008c4a <osSemaphoreNew+0x108>
    mem = -1;
 8008b6c:	f04f 33ff 	mov.w	r3, #4294967295
 8008b70:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d015      	beq.n	8008ba4 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	689b      	ldr	r3, [r3, #8]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d006      	beq.n	8008b8e <osSemaphoreNew+0x4c>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	68db      	ldr	r3, [r3, #12]
 8008b84:	2b4f      	cmp	r3, #79	; 0x4f
 8008b86:	d902      	bls.n	8008b8e <osSemaphoreNew+0x4c>
        mem = 1;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	61bb      	str	r3, [r7, #24]
 8008b8c:	e00c      	b.n	8008ba8 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	689b      	ldr	r3, [r3, #8]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d108      	bne.n	8008ba8 <osSemaphoreNew+0x66>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	68db      	ldr	r3, [r3, #12]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d104      	bne.n	8008ba8 <osSemaphoreNew+0x66>
          mem = 0;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	61bb      	str	r3, [r7, #24]
 8008ba2:	e001      	b.n	8008ba8 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8008ba8:	69bb      	ldr	r3, [r7, #24]
 8008baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bae:	d04c      	beq.n	8008c4a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	2b01      	cmp	r3, #1
 8008bb4:	d128      	bne.n	8008c08 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8008bb6:	69bb      	ldr	r3, [r7, #24]
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d10a      	bne.n	8008bd2 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	689b      	ldr	r3, [r3, #8]
 8008bc0:	2203      	movs	r2, #3
 8008bc2:	9200      	str	r2, [sp, #0]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	2100      	movs	r1, #0
 8008bc8:	2001      	movs	r0, #1
 8008bca:	f000 f993 	bl	8008ef4 <xQueueGenericCreateStatic>
 8008bce:	61f8      	str	r0, [r7, #28]
 8008bd0:	e005      	b.n	8008bde <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8008bd2:	2203      	movs	r2, #3
 8008bd4:	2100      	movs	r1, #0
 8008bd6:	2001      	movs	r0, #1
 8008bd8:	f000 fa04 	bl	8008fe4 <xQueueGenericCreate>
 8008bdc:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8008bde:	69fb      	ldr	r3, [r7, #28]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d022      	beq.n	8008c2a <osSemaphoreNew+0xe8>
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d01f      	beq.n	8008c2a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008bea:	2300      	movs	r3, #0
 8008bec:	2200      	movs	r2, #0
 8008bee:	2100      	movs	r1, #0
 8008bf0:	69f8      	ldr	r0, [r7, #28]
 8008bf2:	f000 fabf 	bl	8009174 <xQueueGenericSend>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	2b01      	cmp	r3, #1
 8008bfa:	d016      	beq.n	8008c2a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8008bfc:	69f8      	ldr	r0, [r7, #28]
 8008bfe:	f000 fd33 	bl	8009668 <vQueueDelete>
            hSemaphore = NULL;
 8008c02:	2300      	movs	r3, #0
 8008c04:	61fb      	str	r3, [r7, #28]
 8008c06:	e010      	b.n	8008c2a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8008c08:	69bb      	ldr	r3, [r7, #24]
 8008c0a:	2b01      	cmp	r3, #1
 8008c0c:	d108      	bne.n	8008c20 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	689b      	ldr	r3, [r3, #8]
 8008c12:	461a      	mov	r2, r3
 8008c14:	68b9      	ldr	r1, [r7, #8]
 8008c16:	68f8      	ldr	r0, [r7, #12]
 8008c18:	f000 fa41 	bl	800909e <xQueueCreateCountingSemaphoreStatic>
 8008c1c:	61f8      	str	r0, [r7, #28]
 8008c1e:	e004      	b.n	8008c2a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8008c20:	68b9      	ldr	r1, [r7, #8]
 8008c22:	68f8      	ldr	r0, [r7, #12]
 8008c24:	f000 fa72 	bl	800910c <xQueueCreateCountingSemaphore>
 8008c28:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8008c2a:	69fb      	ldr	r3, [r7, #28]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d00c      	beq.n	8008c4a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d003      	beq.n	8008c3e <osSemaphoreNew+0xfc>
          name = attr->name;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	617b      	str	r3, [r7, #20]
 8008c3c:	e001      	b.n	8008c42 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8008c42:	6979      	ldr	r1, [r7, #20]
 8008c44:	69f8      	ldr	r0, [r7, #28]
 8008c46:	f000 fe43 	bl	80098d0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8008c4a:	69fb      	ldr	r3, [r7, #28]
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3720      	adds	r7, #32
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}

08008c54 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008c54:	b480      	push	{r7}
 8008c56:	b085      	sub	sp, #20
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	60f8      	str	r0, [r7, #12]
 8008c5c:	60b9      	str	r1, [r7, #8]
 8008c5e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	4a07      	ldr	r2, [pc, #28]	; (8008c80 <vApplicationGetIdleTaskMemory+0x2c>)
 8008c64:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	4a06      	ldr	r2, [pc, #24]	; (8008c84 <vApplicationGetIdleTaskMemory+0x30>)
 8008c6a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2280      	movs	r2, #128	; 0x80
 8008c70:	601a      	str	r2, [r3, #0]
}
 8008c72:	bf00      	nop
 8008c74:	3714      	adds	r7, #20
 8008c76:	46bd      	mov	sp, r7
 8008c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7c:	4770      	bx	lr
 8008c7e:	bf00      	nop
 8008c80:	200002a8 	.word	0x200002a8
 8008c84:	20000364 	.word	0x20000364

08008c88 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008c88:	b480      	push	{r7}
 8008c8a:	b085      	sub	sp, #20
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	60f8      	str	r0, [r7, #12]
 8008c90:	60b9      	str	r1, [r7, #8]
 8008c92:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	4a07      	ldr	r2, [pc, #28]	; (8008cb4 <vApplicationGetTimerTaskMemory+0x2c>)
 8008c98:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	4a06      	ldr	r2, [pc, #24]	; (8008cb8 <vApplicationGetTimerTaskMemory+0x30>)
 8008c9e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008ca6:	601a      	str	r2, [r3, #0]
}
 8008ca8:	bf00      	nop
 8008caa:	3714      	adds	r7, #20
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr
 8008cb4:	20000564 	.word	0x20000564
 8008cb8:	20000620 	.word	0x20000620

08008cbc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b083      	sub	sp, #12
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f103 0208 	add.w	r2, r3, #8
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8008cd4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f103 0208 	add.w	r2, r3, #8
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f103 0208 	add.w	r2, r3, #8
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2200      	movs	r2, #0
 8008cee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008cf0:	bf00      	nop
 8008cf2:	370c      	adds	r7, #12
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr

08008cfc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b083      	sub	sp, #12
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2200      	movs	r2, #0
 8008d08:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008d0a:	bf00      	nop
 8008d0c:	370c      	adds	r7, #12
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d14:	4770      	bx	lr

08008d16 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008d16:	b480      	push	{r7}
 8008d18:	b085      	sub	sp, #20
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	6078      	str	r0, [r7, #4]
 8008d1e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	68fa      	ldr	r2, [r7, #12]
 8008d2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	689a      	ldr	r2, [r3, #8]
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	689b      	ldr	r3, [r3, #8]
 8008d38:	683a      	ldr	r2, [r7, #0]
 8008d3a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	683a      	ldr	r2, [r7, #0]
 8008d40:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	687a      	ldr	r2, [r7, #4]
 8008d46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	1c5a      	adds	r2, r3, #1
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	601a      	str	r2, [r3, #0]
}
 8008d52:	bf00      	nop
 8008d54:	3714      	adds	r7, #20
 8008d56:	46bd      	mov	sp, r7
 8008d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5c:	4770      	bx	lr

08008d5e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008d5e:	b480      	push	{r7}
 8008d60:	b085      	sub	sp, #20
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	6078      	str	r0, [r7, #4]
 8008d66:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d74:	d103      	bne.n	8008d7e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	691b      	ldr	r3, [r3, #16]
 8008d7a:	60fb      	str	r3, [r7, #12]
 8008d7c:	e00c      	b.n	8008d98 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	3308      	adds	r3, #8
 8008d82:	60fb      	str	r3, [r7, #12]
 8008d84:	e002      	b.n	8008d8c <vListInsert+0x2e>
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	60fb      	str	r3, [r7, #12]
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	68ba      	ldr	r2, [r7, #8]
 8008d94:	429a      	cmp	r2, r3
 8008d96:	d2f6      	bcs.n	8008d86 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	685a      	ldr	r2, [r3, #4]
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	685b      	ldr	r3, [r3, #4]
 8008da4:	683a      	ldr	r2, [r7, #0]
 8008da6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	68fa      	ldr	r2, [r7, #12]
 8008dac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	683a      	ldr	r2, [r7, #0]
 8008db2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	687a      	ldr	r2, [r7, #4]
 8008db8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	1c5a      	adds	r2, r3, #1
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	601a      	str	r2, [r3, #0]
}
 8008dc4:	bf00      	nop
 8008dc6:	3714      	adds	r7, #20
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr

08008dd0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b085      	sub	sp, #20
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	691b      	ldr	r3, [r3, #16]
 8008ddc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	687a      	ldr	r2, [r7, #4]
 8008de4:	6892      	ldr	r2, [r2, #8]
 8008de6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	689b      	ldr	r3, [r3, #8]
 8008dec:	687a      	ldr	r2, [r7, #4]
 8008dee:	6852      	ldr	r2, [r2, #4]
 8008df0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	685b      	ldr	r3, [r3, #4]
 8008df6:	687a      	ldr	r2, [r7, #4]
 8008df8:	429a      	cmp	r2, r3
 8008dfa:	d103      	bne.n	8008e04 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	689a      	ldr	r2, [r3, #8]
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2200      	movs	r2, #0
 8008e08:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	1e5a      	subs	r2, r3, #1
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3714      	adds	r7, #20
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e22:	4770      	bx	lr

08008e24 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b084      	sub	sp, #16
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d10a      	bne.n	8008e4e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e3c:	f383 8811 	msr	BASEPRI, r3
 8008e40:	f3bf 8f6f 	isb	sy
 8008e44:	f3bf 8f4f 	dsb	sy
 8008e48:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008e4a:	bf00      	nop
 8008e4c:	e7fe      	b.n	8008e4c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008e4e:	f002 f969 	bl	800b124 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681a      	ldr	r2, [r3, #0]
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e5a:	68f9      	ldr	r1, [r7, #12]
 8008e5c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008e5e:	fb01 f303 	mul.w	r3, r1, r3
 8008e62:	441a      	add	r2, r3
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681a      	ldr	r2, [r3, #0]
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681a      	ldr	r2, [r3, #0]
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e7e:	3b01      	subs	r3, #1
 8008e80:	68f9      	ldr	r1, [r7, #12]
 8008e82:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008e84:	fb01 f303 	mul.w	r3, r1, r3
 8008e88:	441a      	add	r2, r3
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	22ff      	movs	r2, #255	; 0xff
 8008e92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	22ff      	movs	r2, #255	; 0xff
 8008e9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d114      	bne.n	8008ece <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	691b      	ldr	r3, [r3, #16]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d01a      	beq.n	8008ee2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	3310      	adds	r3, #16
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f001 fa1b 	bl	800a2ec <xTaskRemoveFromEventList>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d012      	beq.n	8008ee2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008ebc:	4b0c      	ldr	r3, [pc, #48]	; (8008ef0 <xQueueGenericReset+0xcc>)
 8008ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ec2:	601a      	str	r2, [r3, #0]
 8008ec4:	f3bf 8f4f 	dsb	sy
 8008ec8:	f3bf 8f6f 	isb	sy
 8008ecc:	e009      	b.n	8008ee2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	3310      	adds	r3, #16
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f7ff fef2 	bl	8008cbc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	3324      	adds	r3, #36	; 0x24
 8008edc:	4618      	mov	r0, r3
 8008ede:	f7ff feed 	bl	8008cbc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008ee2:	f002 f94f 	bl	800b184 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008ee6:	2301      	movs	r3, #1
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3710      	adds	r7, #16
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}
 8008ef0:	e000ed04 	.word	0xe000ed04

08008ef4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b08e      	sub	sp, #56	; 0x38
 8008ef8:	af02      	add	r7, sp, #8
 8008efa:	60f8      	str	r0, [r7, #12]
 8008efc:	60b9      	str	r1, [r7, #8]
 8008efe:	607a      	str	r2, [r7, #4]
 8008f00:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d10a      	bne.n	8008f1e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f0c:	f383 8811 	msr	BASEPRI, r3
 8008f10:	f3bf 8f6f 	isb	sy
 8008f14:	f3bf 8f4f 	dsb	sy
 8008f18:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008f1a:	bf00      	nop
 8008f1c:	e7fe      	b.n	8008f1c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d10a      	bne.n	8008f3a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f28:	f383 8811 	msr	BASEPRI, r3
 8008f2c:	f3bf 8f6f 	isb	sy
 8008f30:	f3bf 8f4f 	dsb	sy
 8008f34:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008f36:	bf00      	nop
 8008f38:	e7fe      	b.n	8008f38 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d002      	beq.n	8008f46 <xQueueGenericCreateStatic+0x52>
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d001      	beq.n	8008f4a <xQueueGenericCreateStatic+0x56>
 8008f46:	2301      	movs	r3, #1
 8008f48:	e000      	b.n	8008f4c <xQueueGenericCreateStatic+0x58>
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d10a      	bne.n	8008f66 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f54:	f383 8811 	msr	BASEPRI, r3
 8008f58:	f3bf 8f6f 	isb	sy
 8008f5c:	f3bf 8f4f 	dsb	sy
 8008f60:	623b      	str	r3, [r7, #32]
}
 8008f62:	bf00      	nop
 8008f64:	e7fe      	b.n	8008f64 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d102      	bne.n	8008f72 <xQueueGenericCreateStatic+0x7e>
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d101      	bne.n	8008f76 <xQueueGenericCreateStatic+0x82>
 8008f72:	2301      	movs	r3, #1
 8008f74:	e000      	b.n	8008f78 <xQueueGenericCreateStatic+0x84>
 8008f76:	2300      	movs	r3, #0
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d10a      	bne.n	8008f92 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f80:	f383 8811 	msr	BASEPRI, r3
 8008f84:	f3bf 8f6f 	isb	sy
 8008f88:	f3bf 8f4f 	dsb	sy
 8008f8c:	61fb      	str	r3, [r7, #28]
}
 8008f8e:	bf00      	nop
 8008f90:	e7fe      	b.n	8008f90 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008f92:	2350      	movs	r3, #80	; 0x50
 8008f94:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	2b50      	cmp	r3, #80	; 0x50
 8008f9a:	d00a      	beq.n	8008fb2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa0:	f383 8811 	msr	BASEPRI, r3
 8008fa4:	f3bf 8f6f 	isb	sy
 8008fa8:	f3bf 8f4f 	dsb	sy
 8008fac:	61bb      	str	r3, [r7, #24]
}
 8008fae:	bf00      	nop
 8008fb0:	e7fe      	b.n	8008fb0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008fb2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d00d      	beq.n	8008fda <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fc0:	2201      	movs	r2, #1
 8008fc2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008fc6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fcc:	9300      	str	r3, [sp, #0]
 8008fce:	4613      	mov	r3, r2
 8008fd0:	687a      	ldr	r2, [r7, #4]
 8008fd2:	68b9      	ldr	r1, [r7, #8]
 8008fd4:	68f8      	ldr	r0, [r7, #12]
 8008fd6:	f000 f83f 	bl	8009058 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3730      	adds	r7, #48	; 0x30
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b08a      	sub	sp, #40	; 0x28
 8008fe8:	af02      	add	r7, sp, #8
 8008fea:	60f8      	str	r0, [r7, #12]
 8008fec:	60b9      	str	r1, [r7, #8]
 8008fee:	4613      	mov	r3, r2
 8008ff0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d10a      	bne.n	800900e <xQueueGenericCreate+0x2a>
	__asm volatile
 8008ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ffc:	f383 8811 	msr	BASEPRI, r3
 8009000:	f3bf 8f6f 	isb	sy
 8009004:	f3bf 8f4f 	dsb	sy
 8009008:	613b      	str	r3, [r7, #16]
}
 800900a:	bf00      	nop
 800900c:	e7fe      	b.n	800900c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	68ba      	ldr	r2, [r7, #8]
 8009012:	fb02 f303 	mul.w	r3, r2, r3
 8009016:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009018:	69fb      	ldr	r3, [r7, #28]
 800901a:	3350      	adds	r3, #80	; 0x50
 800901c:	4618      	mov	r0, r3
 800901e:	f002 f9a3 	bl	800b368 <pvPortMalloc>
 8009022:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009024:	69bb      	ldr	r3, [r7, #24]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d011      	beq.n	800904e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800902a:	69bb      	ldr	r3, [r7, #24]
 800902c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	3350      	adds	r3, #80	; 0x50
 8009032:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009034:	69bb      	ldr	r3, [r7, #24]
 8009036:	2200      	movs	r2, #0
 8009038:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800903c:	79fa      	ldrb	r2, [r7, #7]
 800903e:	69bb      	ldr	r3, [r7, #24]
 8009040:	9300      	str	r3, [sp, #0]
 8009042:	4613      	mov	r3, r2
 8009044:	697a      	ldr	r2, [r7, #20]
 8009046:	68b9      	ldr	r1, [r7, #8]
 8009048:	68f8      	ldr	r0, [r7, #12]
 800904a:	f000 f805 	bl	8009058 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800904e:	69bb      	ldr	r3, [r7, #24]
	}
 8009050:	4618      	mov	r0, r3
 8009052:	3720      	adds	r7, #32
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}

08009058 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b084      	sub	sp, #16
 800905c:	af00      	add	r7, sp, #0
 800905e:	60f8      	str	r0, [r7, #12]
 8009060:	60b9      	str	r1, [r7, #8]
 8009062:	607a      	str	r2, [r7, #4]
 8009064:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d103      	bne.n	8009074 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800906c:	69bb      	ldr	r3, [r7, #24]
 800906e:	69ba      	ldr	r2, [r7, #24]
 8009070:	601a      	str	r2, [r3, #0]
 8009072:	e002      	b.n	800907a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009074:	69bb      	ldr	r3, [r7, #24]
 8009076:	687a      	ldr	r2, [r7, #4]
 8009078:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800907a:	69bb      	ldr	r3, [r7, #24]
 800907c:	68fa      	ldr	r2, [r7, #12]
 800907e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009080:	69bb      	ldr	r3, [r7, #24]
 8009082:	68ba      	ldr	r2, [r7, #8]
 8009084:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009086:	2101      	movs	r1, #1
 8009088:	69b8      	ldr	r0, [r7, #24]
 800908a:	f7ff fecb 	bl	8008e24 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800908e:	69bb      	ldr	r3, [r7, #24]
 8009090:	78fa      	ldrb	r2, [r7, #3]
 8009092:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009096:	bf00      	nop
 8009098:	3710      	adds	r7, #16
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}

0800909e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800909e:	b580      	push	{r7, lr}
 80090a0:	b08a      	sub	sp, #40	; 0x28
 80090a2:	af02      	add	r7, sp, #8
 80090a4:	60f8      	str	r0, [r7, #12]
 80090a6:	60b9      	str	r1, [r7, #8]
 80090a8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d10a      	bne.n	80090c6 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80090b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b4:	f383 8811 	msr	BASEPRI, r3
 80090b8:	f3bf 8f6f 	isb	sy
 80090bc:	f3bf 8f4f 	dsb	sy
 80090c0:	61bb      	str	r3, [r7, #24]
}
 80090c2:	bf00      	nop
 80090c4:	e7fe      	b.n	80090c4 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80090c6:	68ba      	ldr	r2, [r7, #8]
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	429a      	cmp	r2, r3
 80090cc:	d90a      	bls.n	80090e4 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80090ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090d2:	f383 8811 	msr	BASEPRI, r3
 80090d6:	f3bf 8f6f 	isb	sy
 80090da:	f3bf 8f4f 	dsb	sy
 80090de:	617b      	str	r3, [r7, #20]
}
 80090e0:	bf00      	nop
 80090e2:	e7fe      	b.n	80090e2 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80090e4:	2302      	movs	r3, #2
 80090e6:	9300      	str	r3, [sp, #0]
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2200      	movs	r2, #0
 80090ec:	2100      	movs	r1, #0
 80090ee:	68f8      	ldr	r0, [r7, #12]
 80090f0:	f7ff ff00 	bl	8008ef4 <xQueueGenericCreateStatic>
 80090f4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80090f6:	69fb      	ldr	r3, [r7, #28]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d002      	beq.n	8009102 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80090fc:	69fb      	ldr	r3, [r7, #28]
 80090fe:	68ba      	ldr	r2, [r7, #8]
 8009100:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009102:	69fb      	ldr	r3, [r7, #28]
	}
 8009104:	4618      	mov	r0, r3
 8009106:	3720      	adds	r7, #32
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}

0800910c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800910c:	b580      	push	{r7, lr}
 800910e:	b086      	sub	sp, #24
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d10a      	bne.n	8009132 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800911c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009120:	f383 8811 	msr	BASEPRI, r3
 8009124:	f3bf 8f6f 	isb	sy
 8009128:	f3bf 8f4f 	dsb	sy
 800912c:	613b      	str	r3, [r7, #16]
}
 800912e:	bf00      	nop
 8009130:	e7fe      	b.n	8009130 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009132:	683a      	ldr	r2, [r7, #0]
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	429a      	cmp	r2, r3
 8009138:	d90a      	bls.n	8009150 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800913a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800913e:	f383 8811 	msr	BASEPRI, r3
 8009142:	f3bf 8f6f 	isb	sy
 8009146:	f3bf 8f4f 	dsb	sy
 800914a:	60fb      	str	r3, [r7, #12]
}
 800914c:	bf00      	nop
 800914e:	e7fe      	b.n	800914e <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009150:	2202      	movs	r2, #2
 8009152:	2100      	movs	r1, #0
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f7ff ff45 	bl	8008fe4 <xQueueGenericCreate>
 800915a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d002      	beq.n	8009168 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	683a      	ldr	r2, [r7, #0]
 8009166:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009168:	697b      	ldr	r3, [r7, #20]
	}
 800916a:	4618      	mov	r0, r3
 800916c:	3718      	adds	r7, #24
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}
	...

08009174 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b08e      	sub	sp, #56	; 0x38
 8009178:	af00      	add	r7, sp, #0
 800917a:	60f8      	str	r0, [r7, #12]
 800917c:	60b9      	str	r1, [r7, #8]
 800917e:	607a      	str	r2, [r7, #4]
 8009180:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009182:	2300      	movs	r3, #0
 8009184:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800918a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800918c:	2b00      	cmp	r3, #0
 800918e:	d10a      	bne.n	80091a6 <xQueueGenericSend+0x32>
	__asm volatile
 8009190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009194:	f383 8811 	msr	BASEPRI, r3
 8009198:	f3bf 8f6f 	isb	sy
 800919c:	f3bf 8f4f 	dsb	sy
 80091a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80091a2:	bf00      	nop
 80091a4:	e7fe      	b.n	80091a4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d103      	bne.n	80091b4 <xQueueGenericSend+0x40>
 80091ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d101      	bne.n	80091b8 <xQueueGenericSend+0x44>
 80091b4:	2301      	movs	r3, #1
 80091b6:	e000      	b.n	80091ba <xQueueGenericSend+0x46>
 80091b8:	2300      	movs	r3, #0
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d10a      	bne.n	80091d4 <xQueueGenericSend+0x60>
	__asm volatile
 80091be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c2:	f383 8811 	msr	BASEPRI, r3
 80091c6:	f3bf 8f6f 	isb	sy
 80091ca:	f3bf 8f4f 	dsb	sy
 80091ce:	627b      	str	r3, [r7, #36]	; 0x24
}
 80091d0:	bf00      	nop
 80091d2:	e7fe      	b.n	80091d2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	2b02      	cmp	r3, #2
 80091d8:	d103      	bne.n	80091e2 <xQueueGenericSend+0x6e>
 80091da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091de:	2b01      	cmp	r3, #1
 80091e0:	d101      	bne.n	80091e6 <xQueueGenericSend+0x72>
 80091e2:	2301      	movs	r3, #1
 80091e4:	e000      	b.n	80091e8 <xQueueGenericSend+0x74>
 80091e6:	2300      	movs	r3, #0
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d10a      	bne.n	8009202 <xQueueGenericSend+0x8e>
	__asm volatile
 80091ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f0:	f383 8811 	msr	BASEPRI, r3
 80091f4:	f3bf 8f6f 	isb	sy
 80091f8:	f3bf 8f4f 	dsb	sy
 80091fc:	623b      	str	r3, [r7, #32]
}
 80091fe:	bf00      	nop
 8009200:	e7fe      	b.n	8009200 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009202:	f001 fa35 	bl	800a670 <xTaskGetSchedulerState>
 8009206:	4603      	mov	r3, r0
 8009208:	2b00      	cmp	r3, #0
 800920a:	d102      	bne.n	8009212 <xQueueGenericSend+0x9e>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d101      	bne.n	8009216 <xQueueGenericSend+0xa2>
 8009212:	2301      	movs	r3, #1
 8009214:	e000      	b.n	8009218 <xQueueGenericSend+0xa4>
 8009216:	2300      	movs	r3, #0
 8009218:	2b00      	cmp	r3, #0
 800921a:	d10a      	bne.n	8009232 <xQueueGenericSend+0xbe>
	__asm volatile
 800921c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009220:	f383 8811 	msr	BASEPRI, r3
 8009224:	f3bf 8f6f 	isb	sy
 8009228:	f3bf 8f4f 	dsb	sy
 800922c:	61fb      	str	r3, [r7, #28]
}
 800922e:	bf00      	nop
 8009230:	e7fe      	b.n	8009230 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009232:	f001 ff77 	bl	800b124 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009238:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800923a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800923c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800923e:	429a      	cmp	r2, r3
 8009240:	d302      	bcc.n	8009248 <xQueueGenericSend+0xd4>
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	2b02      	cmp	r3, #2
 8009246:	d129      	bne.n	800929c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009248:	683a      	ldr	r2, [r7, #0]
 800924a:	68b9      	ldr	r1, [r7, #8]
 800924c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800924e:	f000 fa2e 	bl	80096ae <prvCopyDataToQueue>
 8009252:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009258:	2b00      	cmp	r3, #0
 800925a:	d010      	beq.n	800927e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800925c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800925e:	3324      	adds	r3, #36	; 0x24
 8009260:	4618      	mov	r0, r3
 8009262:	f001 f843 	bl	800a2ec <xTaskRemoveFromEventList>
 8009266:	4603      	mov	r3, r0
 8009268:	2b00      	cmp	r3, #0
 800926a:	d013      	beq.n	8009294 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800926c:	4b3f      	ldr	r3, [pc, #252]	; (800936c <xQueueGenericSend+0x1f8>)
 800926e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009272:	601a      	str	r2, [r3, #0]
 8009274:	f3bf 8f4f 	dsb	sy
 8009278:	f3bf 8f6f 	isb	sy
 800927c:	e00a      	b.n	8009294 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800927e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009280:	2b00      	cmp	r3, #0
 8009282:	d007      	beq.n	8009294 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009284:	4b39      	ldr	r3, [pc, #228]	; (800936c <xQueueGenericSend+0x1f8>)
 8009286:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800928a:	601a      	str	r2, [r3, #0]
 800928c:	f3bf 8f4f 	dsb	sy
 8009290:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009294:	f001 ff76 	bl	800b184 <vPortExitCritical>
				return pdPASS;
 8009298:	2301      	movs	r3, #1
 800929a:	e063      	b.n	8009364 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d103      	bne.n	80092aa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80092a2:	f001 ff6f 	bl	800b184 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80092a6:	2300      	movs	r3, #0
 80092a8:	e05c      	b.n	8009364 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80092aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d106      	bne.n	80092be <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80092b0:	f107 0314 	add.w	r3, r7, #20
 80092b4:	4618      	mov	r0, r3
 80092b6:	f001 f87d 	bl	800a3b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80092ba:	2301      	movs	r3, #1
 80092bc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80092be:	f001 ff61 	bl	800b184 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80092c2:	f000 fde9 	bl	8009e98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80092c6:	f001 ff2d 	bl	800b124 <vPortEnterCritical>
 80092ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80092d0:	b25b      	sxtb	r3, r3
 80092d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092d6:	d103      	bne.n	80092e0 <xQueueGenericSend+0x16c>
 80092d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092da:	2200      	movs	r2, #0
 80092dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80092e6:	b25b      	sxtb	r3, r3
 80092e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092ec:	d103      	bne.n	80092f6 <xQueueGenericSend+0x182>
 80092ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092f0:	2200      	movs	r2, #0
 80092f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80092f6:	f001 ff45 	bl	800b184 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80092fa:	1d3a      	adds	r2, r7, #4
 80092fc:	f107 0314 	add.w	r3, r7, #20
 8009300:	4611      	mov	r1, r2
 8009302:	4618      	mov	r0, r3
 8009304:	f001 f86c 	bl	800a3e0 <xTaskCheckForTimeOut>
 8009308:	4603      	mov	r3, r0
 800930a:	2b00      	cmp	r3, #0
 800930c:	d124      	bne.n	8009358 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800930e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009310:	f000 fac5 	bl	800989e <prvIsQueueFull>
 8009314:	4603      	mov	r3, r0
 8009316:	2b00      	cmp	r3, #0
 8009318:	d018      	beq.n	800934c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800931a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800931c:	3310      	adds	r3, #16
 800931e:	687a      	ldr	r2, [r7, #4]
 8009320:	4611      	mov	r1, r2
 8009322:	4618      	mov	r0, r3
 8009324:	f000 ff92 	bl	800a24c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009328:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800932a:	f000 fa50 	bl	80097ce <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800932e:	f000 fdc1 	bl	8009eb4 <xTaskResumeAll>
 8009332:	4603      	mov	r3, r0
 8009334:	2b00      	cmp	r3, #0
 8009336:	f47f af7c 	bne.w	8009232 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800933a:	4b0c      	ldr	r3, [pc, #48]	; (800936c <xQueueGenericSend+0x1f8>)
 800933c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009340:	601a      	str	r2, [r3, #0]
 8009342:	f3bf 8f4f 	dsb	sy
 8009346:	f3bf 8f6f 	isb	sy
 800934a:	e772      	b.n	8009232 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800934c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800934e:	f000 fa3e 	bl	80097ce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009352:	f000 fdaf 	bl	8009eb4 <xTaskResumeAll>
 8009356:	e76c      	b.n	8009232 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009358:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800935a:	f000 fa38 	bl	80097ce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800935e:	f000 fda9 	bl	8009eb4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009362:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009364:	4618      	mov	r0, r3
 8009366:	3738      	adds	r7, #56	; 0x38
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}
 800936c:	e000ed04 	.word	0xe000ed04

08009370 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b090      	sub	sp, #64	; 0x40
 8009374:	af00      	add	r7, sp, #0
 8009376:	60f8      	str	r0, [r7, #12]
 8009378:	60b9      	str	r1, [r7, #8]
 800937a:	607a      	str	r2, [r7, #4]
 800937c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009384:	2b00      	cmp	r3, #0
 8009386:	d10a      	bne.n	800939e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800938c:	f383 8811 	msr	BASEPRI, r3
 8009390:	f3bf 8f6f 	isb	sy
 8009394:	f3bf 8f4f 	dsb	sy
 8009398:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800939a:	bf00      	nop
 800939c:	e7fe      	b.n	800939c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d103      	bne.n	80093ac <xQueueGenericSendFromISR+0x3c>
 80093a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d101      	bne.n	80093b0 <xQueueGenericSendFromISR+0x40>
 80093ac:	2301      	movs	r3, #1
 80093ae:	e000      	b.n	80093b2 <xQueueGenericSendFromISR+0x42>
 80093b0:	2300      	movs	r3, #0
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d10a      	bne.n	80093cc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80093b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ba:	f383 8811 	msr	BASEPRI, r3
 80093be:	f3bf 8f6f 	isb	sy
 80093c2:	f3bf 8f4f 	dsb	sy
 80093c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80093c8:	bf00      	nop
 80093ca:	e7fe      	b.n	80093ca <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	2b02      	cmp	r3, #2
 80093d0:	d103      	bne.n	80093da <xQueueGenericSendFromISR+0x6a>
 80093d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093d6:	2b01      	cmp	r3, #1
 80093d8:	d101      	bne.n	80093de <xQueueGenericSendFromISR+0x6e>
 80093da:	2301      	movs	r3, #1
 80093dc:	e000      	b.n	80093e0 <xQueueGenericSendFromISR+0x70>
 80093de:	2300      	movs	r3, #0
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d10a      	bne.n	80093fa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80093e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e8:	f383 8811 	msr	BASEPRI, r3
 80093ec:	f3bf 8f6f 	isb	sy
 80093f0:	f3bf 8f4f 	dsb	sy
 80093f4:	623b      	str	r3, [r7, #32]
}
 80093f6:	bf00      	nop
 80093f8:	e7fe      	b.n	80093f8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80093fa:	f001 ff75 	bl	800b2e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80093fe:	f3ef 8211 	mrs	r2, BASEPRI
 8009402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009406:	f383 8811 	msr	BASEPRI, r3
 800940a:	f3bf 8f6f 	isb	sy
 800940e:	f3bf 8f4f 	dsb	sy
 8009412:	61fa      	str	r2, [r7, #28]
 8009414:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009416:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009418:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800941a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800941c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800941e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009422:	429a      	cmp	r2, r3
 8009424:	d302      	bcc.n	800942c <xQueueGenericSendFromISR+0xbc>
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	2b02      	cmp	r3, #2
 800942a:	d12f      	bne.n	800948c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800942c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800942e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009432:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800943a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800943c:	683a      	ldr	r2, [r7, #0]
 800943e:	68b9      	ldr	r1, [r7, #8]
 8009440:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009442:	f000 f934 	bl	80096ae <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009446:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800944a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800944e:	d112      	bne.n	8009476 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009454:	2b00      	cmp	r3, #0
 8009456:	d016      	beq.n	8009486 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800945a:	3324      	adds	r3, #36	; 0x24
 800945c:	4618      	mov	r0, r3
 800945e:	f000 ff45 	bl	800a2ec <xTaskRemoveFromEventList>
 8009462:	4603      	mov	r3, r0
 8009464:	2b00      	cmp	r3, #0
 8009466:	d00e      	beq.n	8009486 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d00b      	beq.n	8009486 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2201      	movs	r2, #1
 8009472:	601a      	str	r2, [r3, #0]
 8009474:	e007      	b.n	8009486 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009476:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800947a:	3301      	adds	r3, #1
 800947c:	b2db      	uxtb	r3, r3
 800947e:	b25a      	sxtb	r2, r3
 8009480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009482:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009486:	2301      	movs	r3, #1
 8009488:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800948a:	e001      	b.n	8009490 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800948c:	2300      	movs	r3, #0
 800948e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009492:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800949a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800949c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3740      	adds	r7, #64	; 0x40
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}
	...

080094a8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b08c      	sub	sp, #48	; 0x30
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	60f8      	str	r0, [r7, #12]
 80094b0:	60b9      	str	r1, [r7, #8]
 80094b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80094b4:	2300      	movs	r3, #0
 80094b6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80094bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d10a      	bne.n	80094d8 <xQueueReceive+0x30>
	__asm volatile
 80094c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c6:	f383 8811 	msr	BASEPRI, r3
 80094ca:	f3bf 8f6f 	isb	sy
 80094ce:	f3bf 8f4f 	dsb	sy
 80094d2:	623b      	str	r3, [r7, #32]
}
 80094d4:	bf00      	nop
 80094d6:	e7fe      	b.n	80094d6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d103      	bne.n	80094e6 <xQueueReceive+0x3e>
 80094de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d101      	bne.n	80094ea <xQueueReceive+0x42>
 80094e6:	2301      	movs	r3, #1
 80094e8:	e000      	b.n	80094ec <xQueueReceive+0x44>
 80094ea:	2300      	movs	r3, #0
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d10a      	bne.n	8009506 <xQueueReceive+0x5e>
	__asm volatile
 80094f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094f4:	f383 8811 	msr	BASEPRI, r3
 80094f8:	f3bf 8f6f 	isb	sy
 80094fc:	f3bf 8f4f 	dsb	sy
 8009500:	61fb      	str	r3, [r7, #28]
}
 8009502:	bf00      	nop
 8009504:	e7fe      	b.n	8009504 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009506:	f001 f8b3 	bl	800a670 <xTaskGetSchedulerState>
 800950a:	4603      	mov	r3, r0
 800950c:	2b00      	cmp	r3, #0
 800950e:	d102      	bne.n	8009516 <xQueueReceive+0x6e>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d101      	bne.n	800951a <xQueueReceive+0x72>
 8009516:	2301      	movs	r3, #1
 8009518:	e000      	b.n	800951c <xQueueReceive+0x74>
 800951a:	2300      	movs	r3, #0
 800951c:	2b00      	cmp	r3, #0
 800951e:	d10a      	bne.n	8009536 <xQueueReceive+0x8e>
	__asm volatile
 8009520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009524:	f383 8811 	msr	BASEPRI, r3
 8009528:	f3bf 8f6f 	isb	sy
 800952c:	f3bf 8f4f 	dsb	sy
 8009530:	61bb      	str	r3, [r7, #24]
}
 8009532:	bf00      	nop
 8009534:	e7fe      	b.n	8009534 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009536:	f001 fdf5 	bl	800b124 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800953a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800953c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800953e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009542:	2b00      	cmp	r3, #0
 8009544:	d01f      	beq.n	8009586 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009546:	68b9      	ldr	r1, [r7, #8]
 8009548:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800954a:	f000 f91a 	bl	8009782 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800954e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009550:	1e5a      	subs	r2, r3, #1
 8009552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009554:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009558:	691b      	ldr	r3, [r3, #16]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d00f      	beq.n	800957e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800955e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009560:	3310      	adds	r3, #16
 8009562:	4618      	mov	r0, r3
 8009564:	f000 fec2 	bl	800a2ec <xTaskRemoveFromEventList>
 8009568:	4603      	mov	r3, r0
 800956a:	2b00      	cmp	r3, #0
 800956c:	d007      	beq.n	800957e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800956e:	4b3d      	ldr	r3, [pc, #244]	; (8009664 <xQueueReceive+0x1bc>)
 8009570:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009574:	601a      	str	r2, [r3, #0]
 8009576:	f3bf 8f4f 	dsb	sy
 800957a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800957e:	f001 fe01 	bl	800b184 <vPortExitCritical>
				return pdPASS;
 8009582:	2301      	movs	r3, #1
 8009584:	e069      	b.n	800965a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d103      	bne.n	8009594 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800958c:	f001 fdfa 	bl	800b184 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009590:	2300      	movs	r3, #0
 8009592:	e062      	b.n	800965a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009596:	2b00      	cmp	r3, #0
 8009598:	d106      	bne.n	80095a8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800959a:	f107 0310 	add.w	r3, r7, #16
 800959e:	4618      	mov	r0, r3
 80095a0:	f000 ff08 	bl	800a3b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80095a4:	2301      	movs	r3, #1
 80095a6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80095a8:	f001 fdec 	bl	800b184 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80095ac:	f000 fc74 	bl	8009e98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80095b0:	f001 fdb8 	bl	800b124 <vPortEnterCritical>
 80095b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80095ba:	b25b      	sxtb	r3, r3
 80095bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095c0:	d103      	bne.n	80095ca <xQueueReceive+0x122>
 80095c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095c4:	2200      	movs	r2, #0
 80095c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80095ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80095d0:	b25b      	sxtb	r3, r3
 80095d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095d6:	d103      	bne.n	80095e0 <xQueueReceive+0x138>
 80095d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095da:	2200      	movs	r2, #0
 80095dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80095e0:	f001 fdd0 	bl	800b184 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80095e4:	1d3a      	adds	r2, r7, #4
 80095e6:	f107 0310 	add.w	r3, r7, #16
 80095ea:	4611      	mov	r1, r2
 80095ec:	4618      	mov	r0, r3
 80095ee:	f000 fef7 	bl	800a3e0 <xTaskCheckForTimeOut>
 80095f2:	4603      	mov	r3, r0
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d123      	bne.n	8009640 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80095f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095fa:	f000 f93a 	bl	8009872 <prvIsQueueEmpty>
 80095fe:	4603      	mov	r3, r0
 8009600:	2b00      	cmp	r3, #0
 8009602:	d017      	beq.n	8009634 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009606:	3324      	adds	r3, #36	; 0x24
 8009608:	687a      	ldr	r2, [r7, #4]
 800960a:	4611      	mov	r1, r2
 800960c:	4618      	mov	r0, r3
 800960e:	f000 fe1d 	bl	800a24c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009612:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009614:	f000 f8db 	bl	80097ce <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009618:	f000 fc4c 	bl	8009eb4 <xTaskResumeAll>
 800961c:	4603      	mov	r3, r0
 800961e:	2b00      	cmp	r3, #0
 8009620:	d189      	bne.n	8009536 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009622:	4b10      	ldr	r3, [pc, #64]	; (8009664 <xQueueReceive+0x1bc>)
 8009624:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009628:	601a      	str	r2, [r3, #0]
 800962a:	f3bf 8f4f 	dsb	sy
 800962e:	f3bf 8f6f 	isb	sy
 8009632:	e780      	b.n	8009536 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009634:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009636:	f000 f8ca 	bl	80097ce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800963a:	f000 fc3b 	bl	8009eb4 <xTaskResumeAll>
 800963e:	e77a      	b.n	8009536 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009640:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009642:	f000 f8c4 	bl	80097ce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009646:	f000 fc35 	bl	8009eb4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800964a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800964c:	f000 f911 	bl	8009872 <prvIsQueueEmpty>
 8009650:	4603      	mov	r3, r0
 8009652:	2b00      	cmp	r3, #0
 8009654:	f43f af6f 	beq.w	8009536 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009658:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800965a:	4618      	mov	r0, r3
 800965c:	3730      	adds	r7, #48	; 0x30
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}
 8009662:	bf00      	nop
 8009664:	e000ed04 	.word	0xe000ed04

08009668 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b084      	sub	sp, #16
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d10a      	bne.n	8009690 <vQueueDelete+0x28>
	__asm volatile
 800967a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800967e:	f383 8811 	msr	BASEPRI, r3
 8009682:	f3bf 8f6f 	isb	sy
 8009686:	f3bf 8f4f 	dsb	sy
 800968a:	60bb      	str	r3, [r7, #8]
}
 800968c:	bf00      	nop
 800968e:	e7fe      	b.n	800968e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009690:	68f8      	ldr	r0, [r7, #12]
 8009692:	f000 f947 	bl	8009924 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800969c:	2b00      	cmp	r3, #0
 800969e:	d102      	bne.n	80096a6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80096a0:	68f8      	ldr	r0, [r7, #12]
 80096a2:	f001 ff2d 	bl	800b500 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80096a6:	bf00      	nop
 80096a8:	3710      	adds	r7, #16
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}

080096ae <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80096ae:	b580      	push	{r7, lr}
 80096b0:	b086      	sub	sp, #24
 80096b2:	af00      	add	r7, sp, #0
 80096b4:	60f8      	str	r0, [r7, #12]
 80096b6:	60b9      	str	r1, [r7, #8]
 80096b8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80096ba:	2300      	movs	r3, #0
 80096bc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096c2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d10d      	bne.n	80096e8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d14d      	bne.n	8009770 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	689b      	ldr	r3, [r3, #8]
 80096d8:	4618      	mov	r0, r3
 80096da:	f000 ffe7 	bl	800a6ac <xTaskPriorityDisinherit>
 80096de:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	2200      	movs	r2, #0
 80096e4:	609a      	str	r2, [r3, #8]
 80096e6:	e043      	b.n	8009770 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d119      	bne.n	8009722 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	6858      	ldr	r0, [r3, #4]
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096f6:	461a      	mov	r2, r3
 80096f8:	68b9      	ldr	r1, [r7, #8]
 80096fa:	f002 f875 	bl	800b7e8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	685a      	ldr	r2, [r3, #4]
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009706:	441a      	add	r2, r3
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	685a      	ldr	r2, [r3, #4]
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	689b      	ldr	r3, [r3, #8]
 8009714:	429a      	cmp	r2, r3
 8009716:	d32b      	bcc.n	8009770 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681a      	ldr	r2, [r3, #0]
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	605a      	str	r2, [r3, #4]
 8009720:	e026      	b.n	8009770 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	68d8      	ldr	r0, [r3, #12]
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800972a:	461a      	mov	r2, r3
 800972c:	68b9      	ldr	r1, [r7, #8]
 800972e:	f002 f85b 	bl	800b7e8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	68da      	ldr	r2, [r3, #12]
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800973a:	425b      	negs	r3, r3
 800973c:	441a      	add	r2, r3
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	68da      	ldr	r2, [r3, #12]
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	429a      	cmp	r2, r3
 800974c:	d207      	bcs.n	800975e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	689a      	ldr	r2, [r3, #8]
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009756:	425b      	negs	r3, r3
 8009758:	441a      	add	r2, r3
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2b02      	cmp	r3, #2
 8009762:	d105      	bne.n	8009770 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009764:	693b      	ldr	r3, [r7, #16]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d002      	beq.n	8009770 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	3b01      	subs	r3, #1
 800976e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	1c5a      	adds	r2, r3, #1
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009778:	697b      	ldr	r3, [r7, #20]
}
 800977a:	4618      	mov	r0, r3
 800977c:	3718      	adds	r7, #24
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}

08009782 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009782:	b580      	push	{r7, lr}
 8009784:	b082      	sub	sp, #8
 8009786:	af00      	add	r7, sp, #0
 8009788:	6078      	str	r0, [r7, #4]
 800978a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009790:	2b00      	cmp	r3, #0
 8009792:	d018      	beq.n	80097c6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	68da      	ldr	r2, [r3, #12]
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800979c:	441a      	add	r2, r3
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	68da      	ldr	r2, [r3, #12]
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	689b      	ldr	r3, [r3, #8]
 80097aa:	429a      	cmp	r2, r3
 80097ac:	d303      	bcc.n	80097b6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681a      	ldr	r2, [r3, #0]
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	68d9      	ldr	r1, [r3, #12]
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097be:	461a      	mov	r2, r3
 80097c0:	6838      	ldr	r0, [r7, #0]
 80097c2:	f002 f811 	bl	800b7e8 <memcpy>
	}
}
 80097c6:	bf00      	nop
 80097c8:	3708      	adds	r7, #8
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}

080097ce <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80097ce:	b580      	push	{r7, lr}
 80097d0:	b084      	sub	sp, #16
 80097d2:	af00      	add	r7, sp, #0
 80097d4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80097d6:	f001 fca5 	bl	800b124 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80097e0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80097e2:	e011      	b.n	8009808 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d012      	beq.n	8009812 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	3324      	adds	r3, #36	; 0x24
 80097f0:	4618      	mov	r0, r3
 80097f2:	f000 fd7b 	bl	800a2ec <xTaskRemoveFromEventList>
 80097f6:	4603      	mov	r3, r0
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d001      	beq.n	8009800 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80097fc:	f000 fe52 	bl	800a4a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009800:	7bfb      	ldrb	r3, [r7, #15]
 8009802:	3b01      	subs	r3, #1
 8009804:	b2db      	uxtb	r3, r3
 8009806:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009808:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800980c:	2b00      	cmp	r3, #0
 800980e:	dce9      	bgt.n	80097e4 <prvUnlockQueue+0x16>
 8009810:	e000      	b.n	8009814 <prvUnlockQueue+0x46>
					break;
 8009812:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	22ff      	movs	r2, #255	; 0xff
 8009818:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800981c:	f001 fcb2 	bl	800b184 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009820:	f001 fc80 	bl	800b124 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800982a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800982c:	e011      	b.n	8009852 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	691b      	ldr	r3, [r3, #16]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d012      	beq.n	800985c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	3310      	adds	r3, #16
 800983a:	4618      	mov	r0, r3
 800983c:	f000 fd56 	bl	800a2ec <xTaskRemoveFromEventList>
 8009840:	4603      	mov	r3, r0
 8009842:	2b00      	cmp	r3, #0
 8009844:	d001      	beq.n	800984a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009846:	f000 fe2d 	bl	800a4a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800984a:	7bbb      	ldrb	r3, [r7, #14]
 800984c:	3b01      	subs	r3, #1
 800984e:	b2db      	uxtb	r3, r3
 8009850:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009852:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009856:	2b00      	cmp	r3, #0
 8009858:	dce9      	bgt.n	800982e <prvUnlockQueue+0x60>
 800985a:	e000      	b.n	800985e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800985c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	22ff      	movs	r2, #255	; 0xff
 8009862:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009866:	f001 fc8d 	bl	800b184 <vPortExitCritical>
}
 800986a:	bf00      	nop
 800986c:	3710      	adds	r7, #16
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}

08009872 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009872:	b580      	push	{r7, lr}
 8009874:	b084      	sub	sp, #16
 8009876:	af00      	add	r7, sp, #0
 8009878:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800987a:	f001 fc53 	bl	800b124 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009882:	2b00      	cmp	r3, #0
 8009884:	d102      	bne.n	800988c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009886:	2301      	movs	r3, #1
 8009888:	60fb      	str	r3, [r7, #12]
 800988a:	e001      	b.n	8009890 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800988c:	2300      	movs	r3, #0
 800988e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009890:	f001 fc78 	bl	800b184 <vPortExitCritical>

	return xReturn;
 8009894:	68fb      	ldr	r3, [r7, #12]
}
 8009896:	4618      	mov	r0, r3
 8009898:	3710      	adds	r7, #16
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}

0800989e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800989e:	b580      	push	{r7, lr}
 80098a0:	b084      	sub	sp, #16
 80098a2:	af00      	add	r7, sp, #0
 80098a4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80098a6:	f001 fc3d 	bl	800b124 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098b2:	429a      	cmp	r2, r3
 80098b4:	d102      	bne.n	80098bc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80098b6:	2301      	movs	r3, #1
 80098b8:	60fb      	str	r3, [r7, #12]
 80098ba:	e001      	b.n	80098c0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80098bc:	2300      	movs	r3, #0
 80098be:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80098c0:	f001 fc60 	bl	800b184 <vPortExitCritical>

	return xReturn;
 80098c4:	68fb      	ldr	r3, [r7, #12]
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	3710      	adds	r7, #16
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}
	...

080098d0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80098d0:	b480      	push	{r7}
 80098d2:	b085      	sub	sp, #20
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
 80098d8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80098da:	2300      	movs	r3, #0
 80098dc:	60fb      	str	r3, [r7, #12]
 80098de:	e014      	b.n	800990a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80098e0:	4a0f      	ldr	r2, [pc, #60]	; (8009920 <vQueueAddToRegistry+0x50>)
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d10b      	bne.n	8009904 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80098ec:	490c      	ldr	r1, [pc, #48]	; (8009920 <vQueueAddToRegistry+0x50>)
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	683a      	ldr	r2, [r7, #0]
 80098f2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80098f6:	4a0a      	ldr	r2, [pc, #40]	; (8009920 <vQueueAddToRegistry+0x50>)
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	00db      	lsls	r3, r3, #3
 80098fc:	4413      	add	r3, r2
 80098fe:	687a      	ldr	r2, [r7, #4]
 8009900:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009902:	e006      	b.n	8009912 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	3301      	adds	r3, #1
 8009908:	60fb      	str	r3, [r7, #12]
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	2b07      	cmp	r3, #7
 800990e:	d9e7      	bls.n	80098e0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009910:	bf00      	nop
 8009912:	bf00      	nop
 8009914:	3714      	adds	r7, #20
 8009916:	46bd      	mov	sp, r7
 8009918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991c:	4770      	bx	lr
 800991e:	bf00      	nop
 8009920:	20004ea8 	.word	0x20004ea8

08009924 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009924:	b480      	push	{r7}
 8009926:	b085      	sub	sp, #20
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800992c:	2300      	movs	r3, #0
 800992e:	60fb      	str	r3, [r7, #12]
 8009930:	e016      	b.n	8009960 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009932:	4a10      	ldr	r2, [pc, #64]	; (8009974 <vQueueUnregisterQueue+0x50>)
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	00db      	lsls	r3, r3, #3
 8009938:	4413      	add	r3, r2
 800993a:	685b      	ldr	r3, [r3, #4]
 800993c:	687a      	ldr	r2, [r7, #4]
 800993e:	429a      	cmp	r2, r3
 8009940:	d10b      	bne.n	800995a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009942:	4a0c      	ldr	r2, [pc, #48]	; (8009974 <vQueueUnregisterQueue+0x50>)
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	2100      	movs	r1, #0
 8009948:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800994c:	4a09      	ldr	r2, [pc, #36]	; (8009974 <vQueueUnregisterQueue+0x50>)
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	00db      	lsls	r3, r3, #3
 8009952:	4413      	add	r3, r2
 8009954:	2200      	movs	r2, #0
 8009956:	605a      	str	r2, [r3, #4]
				break;
 8009958:	e006      	b.n	8009968 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	3301      	adds	r3, #1
 800995e:	60fb      	str	r3, [r7, #12]
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	2b07      	cmp	r3, #7
 8009964:	d9e5      	bls.n	8009932 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009966:	bf00      	nop
 8009968:	bf00      	nop
 800996a:	3714      	adds	r7, #20
 800996c:	46bd      	mov	sp, r7
 800996e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009972:	4770      	bx	lr
 8009974:	20004ea8 	.word	0x20004ea8

08009978 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009978:	b580      	push	{r7, lr}
 800997a:	b086      	sub	sp, #24
 800997c:	af00      	add	r7, sp, #0
 800997e:	60f8      	str	r0, [r7, #12]
 8009980:	60b9      	str	r1, [r7, #8]
 8009982:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009988:	f001 fbcc 	bl	800b124 <vPortEnterCritical>
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009992:	b25b      	sxtb	r3, r3
 8009994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009998:	d103      	bne.n	80099a2 <vQueueWaitForMessageRestricted+0x2a>
 800999a:	697b      	ldr	r3, [r7, #20]
 800999c:	2200      	movs	r2, #0
 800999e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80099a8:	b25b      	sxtb	r3, r3
 80099aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099ae:	d103      	bne.n	80099b8 <vQueueWaitForMessageRestricted+0x40>
 80099b0:	697b      	ldr	r3, [r7, #20]
 80099b2:	2200      	movs	r2, #0
 80099b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80099b8:	f001 fbe4 	bl	800b184 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d106      	bne.n	80099d2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	3324      	adds	r3, #36	; 0x24
 80099c8:	687a      	ldr	r2, [r7, #4]
 80099ca:	68b9      	ldr	r1, [r7, #8]
 80099cc:	4618      	mov	r0, r3
 80099ce:	f000 fc61 	bl	800a294 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80099d2:	6978      	ldr	r0, [r7, #20]
 80099d4:	f7ff fefb 	bl	80097ce <prvUnlockQueue>
	}
 80099d8:	bf00      	nop
 80099da:	3718      	adds	r7, #24
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}

080099e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b08e      	sub	sp, #56	; 0x38
 80099e4:	af04      	add	r7, sp, #16
 80099e6:	60f8      	str	r0, [r7, #12]
 80099e8:	60b9      	str	r1, [r7, #8]
 80099ea:	607a      	str	r2, [r7, #4]
 80099ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80099ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d10a      	bne.n	8009a0a <xTaskCreateStatic+0x2a>
	__asm volatile
 80099f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099f8:	f383 8811 	msr	BASEPRI, r3
 80099fc:	f3bf 8f6f 	isb	sy
 8009a00:	f3bf 8f4f 	dsb	sy
 8009a04:	623b      	str	r3, [r7, #32]
}
 8009a06:	bf00      	nop
 8009a08:	e7fe      	b.n	8009a08 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d10a      	bne.n	8009a26 <xTaskCreateStatic+0x46>
	__asm volatile
 8009a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a14:	f383 8811 	msr	BASEPRI, r3
 8009a18:	f3bf 8f6f 	isb	sy
 8009a1c:	f3bf 8f4f 	dsb	sy
 8009a20:	61fb      	str	r3, [r7, #28]
}
 8009a22:	bf00      	nop
 8009a24:	e7fe      	b.n	8009a24 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009a26:	23bc      	movs	r3, #188	; 0xbc
 8009a28:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009a2a:	693b      	ldr	r3, [r7, #16]
 8009a2c:	2bbc      	cmp	r3, #188	; 0xbc
 8009a2e:	d00a      	beq.n	8009a46 <xTaskCreateStatic+0x66>
	__asm volatile
 8009a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a34:	f383 8811 	msr	BASEPRI, r3
 8009a38:	f3bf 8f6f 	isb	sy
 8009a3c:	f3bf 8f4f 	dsb	sy
 8009a40:	61bb      	str	r3, [r7, #24]
}
 8009a42:	bf00      	nop
 8009a44:	e7fe      	b.n	8009a44 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009a46:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d01e      	beq.n	8009a8c <xTaskCreateStatic+0xac>
 8009a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d01b      	beq.n	8009a8c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a56:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a5c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a60:	2202      	movs	r2, #2
 8009a62:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009a66:	2300      	movs	r3, #0
 8009a68:	9303      	str	r3, [sp, #12]
 8009a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a6c:	9302      	str	r3, [sp, #8]
 8009a6e:	f107 0314 	add.w	r3, r7, #20
 8009a72:	9301      	str	r3, [sp, #4]
 8009a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a76:	9300      	str	r3, [sp, #0]
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	687a      	ldr	r2, [r7, #4]
 8009a7c:	68b9      	ldr	r1, [r7, #8]
 8009a7e:	68f8      	ldr	r0, [r7, #12]
 8009a80:	f000 f850 	bl	8009b24 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009a84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009a86:	f000 f8f3 	bl	8009c70 <prvAddNewTaskToReadyList>
 8009a8a:	e001      	b.n	8009a90 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009a90:	697b      	ldr	r3, [r7, #20]
	}
 8009a92:	4618      	mov	r0, r3
 8009a94:	3728      	adds	r7, #40	; 0x28
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}

08009a9a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009a9a:	b580      	push	{r7, lr}
 8009a9c:	b08c      	sub	sp, #48	; 0x30
 8009a9e:	af04      	add	r7, sp, #16
 8009aa0:	60f8      	str	r0, [r7, #12]
 8009aa2:	60b9      	str	r1, [r7, #8]
 8009aa4:	603b      	str	r3, [r7, #0]
 8009aa6:	4613      	mov	r3, r2
 8009aa8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009aaa:	88fb      	ldrh	r3, [r7, #6]
 8009aac:	009b      	lsls	r3, r3, #2
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f001 fc5a 	bl	800b368 <pvPortMalloc>
 8009ab4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d00e      	beq.n	8009ada <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009abc:	20bc      	movs	r0, #188	; 0xbc
 8009abe:	f001 fc53 	bl	800b368 <pvPortMalloc>
 8009ac2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009ac4:	69fb      	ldr	r3, [r7, #28]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d003      	beq.n	8009ad2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009aca:	69fb      	ldr	r3, [r7, #28]
 8009acc:	697a      	ldr	r2, [r7, #20]
 8009ace:	631a      	str	r2, [r3, #48]	; 0x30
 8009ad0:	e005      	b.n	8009ade <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009ad2:	6978      	ldr	r0, [r7, #20]
 8009ad4:	f001 fd14 	bl	800b500 <vPortFree>
 8009ad8:	e001      	b.n	8009ade <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009ada:	2300      	movs	r3, #0
 8009adc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009ade:	69fb      	ldr	r3, [r7, #28]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d017      	beq.n	8009b14 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009ae4:	69fb      	ldr	r3, [r7, #28]
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009aec:	88fa      	ldrh	r2, [r7, #6]
 8009aee:	2300      	movs	r3, #0
 8009af0:	9303      	str	r3, [sp, #12]
 8009af2:	69fb      	ldr	r3, [r7, #28]
 8009af4:	9302      	str	r3, [sp, #8]
 8009af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009af8:	9301      	str	r3, [sp, #4]
 8009afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009afc:	9300      	str	r3, [sp, #0]
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	68b9      	ldr	r1, [r7, #8]
 8009b02:	68f8      	ldr	r0, [r7, #12]
 8009b04:	f000 f80e 	bl	8009b24 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009b08:	69f8      	ldr	r0, [r7, #28]
 8009b0a:	f000 f8b1 	bl	8009c70 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009b0e:	2301      	movs	r3, #1
 8009b10:	61bb      	str	r3, [r7, #24]
 8009b12:	e002      	b.n	8009b1a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009b14:	f04f 33ff 	mov.w	r3, #4294967295
 8009b18:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009b1a:	69bb      	ldr	r3, [r7, #24]
	}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	3720      	adds	r7, #32
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}

08009b24 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b088      	sub	sp, #32
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	60f8      	str	r0, [r7, #12]
 8009b2c:	60b9      	str	r1, [r7, #8]
 8009b2e:	607a      	str	r2, [r7, #4]
 8009b30:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b34:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	009b      	lsls	r3, r3, #2
 8009b3a:	461a      	mov	r2, r3
 8009b3c:	21a5      	movs	r1, #165	; 0xa5
 8009b3e:	f001 fe61 	bl	800b804 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009b4c:	3b01      	subs	r3, #1
 8009b4e:	009b      	lsls	r3, r3, #2
 8009b50:	4413      	add	r3, r2
 8009b52:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009b54:	69bb      	ldr	r3, [r7, #24]
 8009b56:	f023 0307 	bic.w	r3, r3, #7
 8009b5a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009b5c:	69bb      	ldr	r3, [r7, #24]
 8009b5e:	f003 0307 	and.w	r3, r3, #7
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d00a      	beq.n	8009b7c <prvInitialiseNewTask+0x58>
	__asm volatile
 8009b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b6a:	f383 8811 	msr	BASEPRI, r3
 8009b6e:	f3bf 8f6f 	isb	sy
 8009b72:	f3bf 8f4f 	dsb	sy
 8009b76:	617b      	str	r3, [r7, #20]
}
 8009b78:	bf00      	nop
 8009b7a:	e7fe      	b.n	8009b7a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d01f      	beq.n	8009bc2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009b82:	2300      	movs	r3, #0
 8009b84:	61fb      	str	r3, [r7, #28]
 8009b86:	e012      	b.n	8009bae <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009b88:	68ba      	ldr	r2, [r7, #8]
 8009b8a:	69fb      	ldr	r3, [r7, #28]
 8009b8c:	4413      	add	r3, r2
 8009b8e:	7819      	ldrb	r1, [r3, #0]
 8009b90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b92:	69fb      	ldr	r3, [r7, #28]
 8009b94:	4413      	add	r3, r2
 8009b96:	3334      	adds	r3, #52	; 0x34
 8009b98:	460a      	mov	r2, r1
 8009b9a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009b9c:	68ba      	ldr	r2, [r7, #8]
 8009b9e:	69fb      	ldr	r3, [r7, #28]
 8009ba0:	4413      	add	r3, r2
 8009ba2:	781b      	ldrb	r3, [r3, #0]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d006      	beq.n	8009bb6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009ba8:	69fb      	ldr	r3, [r7, #28]
 8009baa:	3301      	adds	r3, #1
 8009bac:	61fb      	str	r3, [r7, #28]
 8009bae:	69fb      	ldr	r3, [r7, #28]
 8009bb0:	2b0f      	cmp	r3, #15
 8009bb2:	d9e9      	bls.n	8009b88 <prvInitialiseNewTask+0x64>
 8009bb4:	e000      	b.n	8009bb8 <prvInitialiseNewTask+0x94>
			{
				break;
 8009bb6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bba:	2200      	movs	r2, #0
 8009bbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009bc0:	e003      	b.n	8009bca <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bcc:	2b37      	cmp	r3, #55	; 0x37
 8009bce:	d901      	bls.n	8009bd4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009bd0:	2337      	movs	r3, #55	; 0x37
 8009bd2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009bd8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009bde:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009be2:	2200      	movs	r2, #0
 8009be4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009be8:	3304      	adds	r3, #4
 8009bea:	4618      	mov	r0, r3
 8009bec:	f7ff f886 	bl	8008cfc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bf2:	3318      	adds	r3, #24
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	f7ff f881 	bl	8008cfc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bfe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c02:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c08:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c0e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c12:	2200      	movs	r2, #0
 8009c14:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c22:	3354      	adds	r3, #84	; 0x54
 8009c24:	2260      	movs	r2, #96	; 0x60
 8009c26:	2100      	movs	r1, #0
 8009c28:	4618      	mov	r0, r3
 8009c2a:	f001 fdeb 	bl	800b804 <memset>
 8009c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c30:	4a0c      	ldr	r2, [pc, #48]	; (8009c64 <prvInitialiseNewTask+0x140>)
 8009c32:	659a      	str	r2, [r3, #88]	; 0x58
 8009c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c36:	4a0c      	ldr	r2, [pc, #48]	; (8009c68 <prvInitialiseNewTask+0x144>)
 8009c38:	65da      	str	r2, [r3, #92]	; 0x5c
 8009c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c3c:	4a0b      	ldr	r2, [pc, #44]	; (8009c6c <prvInitialiseNewTask+0x148>)
 8009c3e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009c40:	683a      	ldr	r2, [r7, #0]
 8009c42:	68f9      	ldr	r1, [r7, #12]
 8009c44:	69b8      	ldr	r0, [r7, #24]
 8009c46:	f001 f941 	bl	800aecc <pxPortInitialiseStack>
 8009c4a:	4602      	mov	r2, r0
 8009c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c4e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d002      	beq.n	8009c5c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c5a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009c5c:	bf00      	nop
 8009c5e:	3720      	adds	r7, #32
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}
 8009c64:	0800f994 	.word	0x0800f994
 8009c68:	0800f9b4 	.word	0x0800f9b4
 8009c6c:	0800f974 	.word	0x0800f974

08009c70 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b082      	sub	sp, #8
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009c78:	f001 fa54 	bl	800b124 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009c7c:	4b2d      	ldr	r3, [pc, #180]	; (8009d34 <prvAddNewTaskToReadyList+0xc4>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	3301      	adds	r3, #1
 8009c82:	4a2c      	ldr	r2, [pc, #176]	; (8009d34 <prvAddNewTaskToReadyList+0xc4>)
 8009c84:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009c86:	4b2c      	ldr	r3, [pc, #176]	; (8009d38 <prvAddNewTaskToReadyList+0xc8>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d109      	bne.n	8009ca2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009c8e:	4a2a      	ldr	r2, [pc, #168]	; (8009d38 <prvAddNewTaskToReadyList+0xc8>)
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009c94:	4b27      	ldr	r3, [pc, #156]	; (8009d34 <prvAddNewTaskToReadyList+0xc4>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	2b01      	cmp	r3, #1
 8009c9a:	d110      	bne.n	8009cbe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009c9c:	f000 fc26 	bl	800a4ec <prvInitialiseTaskLists>
 8009ca0:	e00d      	b.n	8009cbe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009ca2:	4b26      	ldr	r3, [pc, #152]	; (8009d3c <prvAddNewTaskToReadyList+0xcc>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d109      	bne.n	8009cbe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009caa:	4b23      	ldr	r3, [pc, #140]	; (8009d38 <prvAddNewTaskToReadyList+0xc8>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cb4:	429a      	cmp	r2, r3
 8009cb6:	d802      	bhi.n	8009cbe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009cb8:	4a1f      	ldr	r2, [pc, #124]	; (8009d38 <prvAddNewTaskToReadyList+0xc8>)
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009cbe:	4b20      	ldr	r3, [pc, #128]	; (8009d40 <prvAddNewTaskToReadyList+0xd0>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	3301      	adds	r3, #1
 8009cc4:	4a1e      	ldr	r2, [pc, #120]	; (8009d40 <prvAddNewTaskToReadyList+0xd0>)
 8009cc6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009cc8:	4b1d      	ldr	r3, [pc, #116]	; (8009d40 <prvAddNewTaskToReadyList+0xd0>)
 8009cca:	681a      	ldr	r2, [r3, #0]
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cd4:	4b1b      	ldr	r3, [pc, #108]	; (8009d44 <prvAddNewTaskToReadyList+0xd4>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	429a      	cmp	r2, r3
 8009cda:	d903      	bls.n	8009ce4 <prvAddNewTaskToReadyList+0x74>
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ce0:	4a18      	ldr	r2, [pc, #96]	; (8009d44 <prvAddNewTaskToReadyList+0xd4>)
 8009ce2:	6013      	str	r3, [r2, #0]
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ce8:	4613      	mov	r3, r2
 8009cea:	009b      	lsls	r3, r3, #2
 8009cec:	4413      	add	r3, r2
 8009cee:	009b      	lsls	r3, r3, #2
 8009cf0:	4a15      	ldr	r2, [pc, #84]	; (8009d48 <prvAddNewTaskToReadyList+0xd8>)
 8009cf2:	441a      	add	r2, r3
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	3304      	adds	r3, #4
 8009cf8:	4619      	mov	r1, r3
 8009cfa:	4610      	mov	r0, r2
 8009cfc:	f7ff f80b 	bl	8008d16 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009d00:	f001 fa40 	bl	800b184 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009d04:	4b0d      	ldr	r3, [pc, #52]	; (8009d3c <prvAddNewTaskToReadyList+0xcc>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d00e      	beq.n	8009d2a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009d0c:	4b0a      	ldr	r3, [pc, #40]	; (8009d38 <prvAddNewTaskToReadyList+0xc8>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d16:	429a      	cmp	r2, r3
 8009d18:	d207      	bcs.n	8009d2a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009d1a:	4b0c      	ldr	r3, [pc, #48]	; (8009d4c <prvAddNewTaskToReadyList+0xdc>)
 8009d1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d20:	601a      	str	r2, [r3, #0]
 8009d22:	f3bf 8f4f 	dsb	sy
 8009d26:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009d2a:	bf00      	nop
 8009d2c:	3708      	adds	r7, #8
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}
 8009d32:	bf00      	nop
 8009d34:	20000ef4 	.word	0x20000ef4
 8009d38:	20000a20 	.word	0x20000a20
 8009d3c:	20000f00 	.word	0x20000f00
 8009d40:	20000f10 	.word	0x20000f10
 8009d44:	20000efc 	.word	0x20000efc
 8009d48:	20000a24 	.word	0x20000a24
 8009d4c:	e000ed04 	.word	0xe000ed04

08009d50 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b084      	sub	sp, #16
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d017      	beq.n	8009d92 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009d62:	4b13      	ldr	r3, [pc, #76]	; (8009db0 <vTaskDelay+0x60>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d00a      	beq.n	8009d80 <vTaskDelay+0x30>
	__asm volatile
 8009d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d6e:	f383 8811 	msr	BASEPRI, r3
 8009d72:	f3bf 8f6f 	isb	sy
 8009d76:	f3bf 8f4f 	dsb	sy
 8009d7a:	60bb      	str	r3, [r7, #8]
}
 8009d7c:	bf00      	nop
 8009d7e:	e7fe      	b.n	8009d7e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009d80:	f000 f88a 	bl	8009e98 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009d84:	2100      	movs	r1, #0
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f000 fcfe 	bl	800a788 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009d8c:	f000 f892 	bl	8009eb4 <xTaskResumeAll>
 8009d90:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d107      	bne.n	8009da8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009d98:	4b06      	ldr	r3, [pc, #24]	; (8009db4 <vTaskDelay+0x64>)
 8009d9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d9e:	601a      	str	r2, [r3, #0]
 8009da0:	f3bf 8f4f 	dsb	sy
 8009da4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009da8:	bf00      	nop
 8009daa:	3710      	adds	r7, #16
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}
 8009db0:	20000f1c 	.word	0x20000f1c
 8009db4:	e000ed04 	.word	0xe000ed04

08009db8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b08a      	sub	sp, #40	; 0x28
 8009dbc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009dc6:	463a      	mov	r2, r7
 8009dc8:	1d39      	adds	r1, r7, #4
 8009dca:	f107 0308 	add.w	r3, r7, #8
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f7fe ff40 	bl	8008c54 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009dd4:	6839      	ldr	r1, [r7, #0]
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	68ba      	ldr	r2, [r7, #8]
 8009dda:	9202      	str	r2, [sp, #8]
 8009ddc:	9301      	str	r3, [sp, #4]
 8009dde:	2300      	movs	r3, #0
 8009de0:	9300      	str	r3, [sp, #0]
 8009de2:	2300      	movs	r3, #0
 8009de4:	460a      	mov	r2, r1
 8009de6:	4924      	ldr	r1, [pc, #144]	; (8009e78 <vTaskStartScheduler+0xc0>)
 8009de8:	4824      	ldr	r0, [pc, #144]	; (8009e7c <vTaskStartScheduler+0xc4>)
 8009dea:	f7ff fdf9 	bl	80099e0 <xTaskCreateStatic>
 8009dee:	4603      	mov	r3, r0
 8009df0:	4a23      	ldr	r2, [pc, #140]	; (8009e80 <vTaskStartScheduler+0xc8>)
 8009df2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009df4:	4b22      	ldr	r3, [pc, #136]	; (8009e80 <vTaskStartScheduler+0xc8>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d002      	beq.n	8009e02 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	617b      	str	r3, [r7, #20]
 8009e00:	e001      	b.n	8009e06 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009e02:	2300      	movs	r3, #0
 8009e04:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009e06:	697b      	ldr	r3, [r7, #20]
 8009e08:	2b01      	cmp	r3, #1
 8009e0a:	d102      	bne.n	8009e12 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009e0c:	f000 fd10 	bl	800a830 <xTimerCreateTimerTask>
 8009e10:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009e12:	697b      	ldr	r3, [r7, #20]
 8009e14:	2b01      	cmp	r3, #1
 8009e16:	d11b      	bne.n	8009e50 <vTaskStartScheduler+0x98>
	__asm volatile
 8009e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e1c:	f383 8811 	msr	BASEPRI, r3
 8009e20:	f3bf 8f6f 	isb	sy
 8009e24:	f3bf 8f4f 	dsb	sy
 8009e28:	613b      	str	r3, [r7, #16]
}
 8009e2a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009e2c:	4b15      	ldr	r3, [pc, #84]	; (8009e84 <vTaskStartScheduler+0xcc>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	3354      	adds	r3, #84	; 0x54
 8009e32:	4a15      	ldr	r2, [pc, #84]	; (8009e88 <vTaskStartScheduler+0xd0>)
 8009e34:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009e36:	4b15      	ldr	r3, [pc, #84]	; (8009e8c <vTaskStartScheduler+0xd4>)
 8009e38:	f04f 32ff 	mov.w	r2, #4294967295
 8009e3c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009e3e:	4b14      	ldr	r3, [pc, #80]	; (8009e90 <vTaskStartScheduler+0xd8>)
 8009e40:	2201      	movs	r2, #1
 8009e42:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009e44:	4b13      	ldr	r3, [pc, #76]	; (8009e94 <vTaskStartScheduler+0xdc>)
 8009e46:	2200      	movs	r2, #0
 8009e48:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009e4a:	f001 f8c9 	bl	800afe0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009e4e:	e00e      	b.n	8009e6e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e56:	d10a      	bne.n	8009e6e <vTaskStartScheduler+0xb6>
	__asm volatile
 8009e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e5c:	f383 8811 	msr	BASEPRI, r3
 8009e60:	f3bf 8f6f 	isb	sy
 8009e64:	f3bf 8f4f 	dsb	sy
 8009e68:	60fb      	str	r3, [r7, #12]
}
 8009e6a:	bf00      	nop
 8009e6c:	e7fe      	b.n	8009e6c <vTaskStartScheduler+0xb4>
}
 8009e6e:	bf00      	nop
 8009e70:	3718      	adds	r7, #24
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}
 8009e76:	bf00      	nop
 8009e78:	0800cdc4 	.word	0x0800cdc4
 8009e7c:	0800a4bd 	.word	0x0800a4bd
 8009e80:	20000f18 	.word	0x20000f18
 8009e84:	20000a20 	.word	0x20000a20
 8009e88:	20000070 	.word	0x20000070
 8009e8c:	20000f14 	.word	0x20000f14
 8009e90:	20000f00 	.word	0x20000f00
 8009e94:	20000ef8 	.word	0x20000ef8

08009e98 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009e98:	b480      	push	{r7}
 8009e9a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009e9c:	4b04      	ldr	r3, [pc, #16]	; (8009eb0 <vTaskSuspendAll+0x18>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	3301      	adds	r3, #1
 8009ea2:	4a03      	ldr	r2, [pc, #12]	; (8009eb0 <vTaskSuspendAll+0x18>)
 8009ea4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009ea6:	bf00      	nop
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eae:	4770      	bx	lr
 8009eb0:	20000f1c 	.word	0x20000f1c

08009eb4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b084      	sub	sp, #16
 8009eb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009eba:	2300      	movs	r3, #0
 8009ebc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009ec2:	4b42      	ldr	r3, [pc, #264]	; (8009fcc <xTaskResumeAll+0x118>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d10a      	bne.n	8009ee0 <xTaskResumeAll+0x2c>
	__asm volatile
 8009eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ece:	f383 8811 	msr	BASEPRI, r3
 8009ed2:	f3bf 8f6f 	isb	sy
 8009ed6:	f3bf 8f4f 	dsb	sy
 8009eda:	603b      	str	r3, [r7, #0]
}
 8009edc:	bf00      	nop
 8009ede:	e7fe      	b.n	8009ede <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009ee0:	f001 f920 	bl	800b124 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009ee4:	4b39      	ldr	r3, [pc, #228]	; (8009fcc <xTaskResumeAll+0x118>)
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	3b01      	subs	r3, #1
 8009eea:	4a38      	ldr	r2, [pc, #224]	; (8009fcc <xTaskResumeAll+0x118>)
 8009eec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009eee:	4b37      	ldr	r3, [pc, #220]	; (8009fcc <xTaskResumeAll+0x118>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d162      	bne.n	8009fbc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009ef6:	4b36      	ldr	r3, [pc, #216]	; (8009fd0 <xTaskResumeAll+0x11c>)
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d05e      	beq.n	8009fbc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009efe:	e02f      	b.n	8009f60 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f00:	4b34      	ldr	r3, [pc, #208]	; (8009fd4 <xTaskResumeAll+0x120>)
 8009f02:	68db      	ldr	r3, [r3, #12]
 8009f04:	68db      	ldr	r3, [r3, #12]
 8009f06:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	3318      	adds	r3, #24
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	f7fe ff5f 	bl	8008dd0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	3304      	adds	r3, #4
 8009f16:	4618      	mov	r0, r3
 8009f18:	f7fe ff5a 	bl	8008dd0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f20:	4b2d      	ldr	r3, [pc, #180]	; (8009fd8 <xTaskResumeAll+0x124>)
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	429a      	cmp	r2, r3
 8009f26:	d903      	bls.n	8009f30 <xTaskResumeAll+0x7c>
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f2c:	4a2a      	ldr	r2, [pc, #168]	; (8009fd8 <xTaskResumeAll+0x124>)
 8009f2e:	6013      	str	r3, [r2, #0]
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f34:	4613      	mov	r3, r2
 8009f36:	009b      	lsls	r3, r3, #2
 8009f38:	4413      	add	r3, r2
 8009f3a:	009b      	lsls	r3, r3, #2
 8009f3c:	4a27      	ldr	r2, [pc, #156]	; (8009fdc <xTaskResumeAll+0x128>)
 8009f3e:	441a      	add	r2, r3
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	3304      	adds	r3, #4
 8009f44:	4619      	mov	r1, r3
 8009f46:	4610      	mov	r0, r2
 8009f48:	f7fe fee5 	bl	8008d16 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f50:	4b23      	ldr	r3, [pc, #140]	; (8009fe0 <xTaskResumeAll+0x12c>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f56:	429a      	cmp	r2, r3
 8009f58:	d302      	bcc.n	8009f60 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009f5a:	4b22      	ldr	r3, [pc, #136]	; (8009fe4 <xTaskResumeAll+0x130>)
 8009f5c:	2201      	movs	r2, #1
 8009f5e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009f60:	4b1c      	ldr	r3, [pc, #112]	; (8009fd4 <xTaskResumeAll+0x120>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d1cb      	bne.n	8009f00 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d001      	beq.n	8009f72 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009f6e:	f000 fb5f 	bl	800a630 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009f72:	4b1d      	ldr	r3, [pc, #116]	; (8009fe8 <xTaskResumeAll+0x134>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d010      	beq.n	8009fa0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009f7e:	f000 f847 	bl	800a010 <xTaskIncrementTick>
 8009f82:	4603      	mov	r3, r0
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d002      	beq.n	8009f8e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009f88:	4b16      	ldr	r3, [pc, #88]	; (8009fe4 <xTaskResumeAll+0x130>)
 8009f8a:	2201      	movs	r2, #1
 8009f8c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	3b01      	subs	r3, #1
 8009f92:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d1f1      	bne.n	8009f7e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009f9a:	4b13      	ldr	r3, [pc, #76]	; (8009fe8 <xTaskResumeAll+0x134>)
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009fa0:	4b10      	ldr	r3, [pc, #64]	; (8009fe4 <xTaskResumeAll+0x130>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d009      	beq.n	8009fbc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009fa8:	2301      	movs	r3, #1
 8009faa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009fac:	4b0f      	ldr	r3, [pc, #60]	; (8009fec <xTaskResumeAll+0x138>)
 8009fae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fb2:	601a      	str	r2, [r3, #0]
 8009fb4:	f3bf 8f4f 	dsb	sy
 8009fb8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009fbc:	f001 f8e2 	bl	800b184 <vPortExitCritical>

	return xAlreadyYielded;
 8009fc0:	68bb      	ldr	r3, [r7, #8]
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	3710      	adds	r7, #16
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}
 8009fca:	bf00      	nop
 8009fcc:	20000f1c 	.word	0x20000f1c
 8009fd0:	20000ef4 	.word	0x20000ef4
 8009fd4:	20000eb4 	.word	0x20000eb4
 8009fd8:	20000efc 	.word	0x20000efc
 8009fdc:	20000a24 	.word	0x20000a24
 8009fe0:	20000a20 	.word	0x20000a20
 8009fe4:	20000f08 	.word	0x20000f08
 8009fe8:	20000f04 	.word	0x20000f04
 8009fec:	e000ed04 	.word	0xe000ed04

08009ff0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b083      	sub	sp, #12
 8009ff4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009ff6:	4b05      	ldr	r3, [pc, #20]	; (800a00c <xTaskGetTickCount+0x1c>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009ffc:	687b      	ldr	r3, [r7, #4]
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	370c      	adds	r7, #12
 800a002:	46bd      	mov	sp, r7
 800a004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a008:	4770      	bx	lr
 800a00a:	bf00      	nop
 800a00c:	20000ef8 	.word	0x20000ef8

0800a010 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b086      	sub	sp, #24
 800a014:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a016:	2300      	movs	r3, #0
 800a018:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a01a:	4b4f      	ldr	r3, [pc, #316]	; (800a158 <xTaskIncrementTick+0x148>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	f040 808f 	bne.w	800a142 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a024:	4b4d      	ldr	r3, [pc, #308]	; (800a15c <xTaskIncrementTick+0x14c>)
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	3301      	adds	r3, #1
 800a02a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a02c:	4a4b      	ldr	r2, [pc, #300]	; (800a15c <xTaskIncrementTick+0x14c>)
 800a02e:	693b      	ldr	r3, [r7, #16]
 800a030:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a032:	693b      	ldr	r3, [r7, #16]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d120      	bne.n	800a07a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a038:	4b49      	ldr	r3, [pc, #292]	; (800a160 <xTaskIncrementTick+0x150>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d00a      	beq.n	800a058 <xTaskIncrementTick+0x48>
	__asm volatile
 800a042:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a046:	f383 8811 	msr	BASEPRI, r3
 800a04a:	f3bf 8f6f 	isb	sy
 800a04e:	f3bf 8f4f 	dsb	sy
 800a052:	603b      	str	r3, [r7, #0]
}
 800a054:	bf00      	nop
 800a056:	e7fe      	b.n	800a056 <xTaskIncrementTick+0x46>
 800a058:	4b41      	ldr	r3, [pc, #260]	; (800a160 <xTaskIncrementTick+0x150>)
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	60fb      	str	r3, [r7, #12]
 800a05e:	4b41      	ldr	r3, [pc, #260]	; (800a164 <xTaskIncrementTick+0x154>)
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	4a3f      	ldr	r2, [pc, #252]	; (800a160 <xTaskIncrementTick+0x150>)
 800a064:	6013      	str	r3, [r2, #0]
 800a066:	4a3f      	ldr	r2, [pc, #252]	; (800a164 <xTaskIncrementTick+0x154>)
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	6013      	str	r3, [r2, #0]
 800a06c:	4b3e      	ldr	r3, [pc, #248]	; (800a168 <xTaskIncrementTick+0x158>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	3301      	adds	r3, #1
 800a072:	4a3d      	ldr	r2, [pc, #244]	; (800a168 <xTaskIncrementTick+0x158>)
 800a074:	6013      	str	r3, [r2, #0]
 800a076:	f000 fadb 	bl	800a630 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a07a:	4b3c      	ldr	r3, [pc, #240]	; (800a16c <xTaskIncrementTick+0x15c>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	693a      	ldr	r2, [r7, #16]
 800a080:	429a      	cmp	r2, r3
 800a082:	d349      	bcc.n	800a118 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a084:	4b36      	ldr	r3, [pc, #216]	; (800a160 <xTaskIncrementTick+0x150>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d104      	bne.n	800a098 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a08e:	4b37      	ldr	r3, [pc, #220]	; (800a16c <xTaskIncrementTick+0x15c>)
 800a090:	f04f 32ff 	mov.w	r2, #4294967295
 800a094:	601a      	str	r2, [r3, #0]
					break;
 800a096:	e03f      	b.n	800a118 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a098:	4b31      	ldr	r3, [pc, #196]	; (800a160 <xTaskIncrementTick+0x150>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	68db      	ldr	r3, [r3, #12]
 800a09e:	68db      	ldr	r3, [r3, #12]
 800a0a0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a0a2:	68bb      	ldr	r3, [r7, #8]
 800a0a4:	685b      	ldr	r3, [r3, #4]
 800a0a6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a0a8:	693a      	ldr	r2, [r7, #16]
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	429a      	cmp	r2, r3
 800a0ae:	d203      	bcs.n	800a0b8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a0b0:	4a2e      	ldr	r2, [pc, #184]	; (800a16c <xTaskIncrementTick+0x15c>)
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a0b6:	e02f      	b.n	800a118 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	3304      	adds	r3, #4
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f7fe fe87 	bl	8008dd0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d004      	beq.n	800a0d4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	3318      	adds	r3, #24
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f7fe fe7e 	bl	8008dd0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0d8:	4b25      	ldr	r3, [pc, #148]	; (800a170 <xTaskIncrementTick+0x160>)
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	429a      	cmp	r2, r3
 800a0de:	d903      	bls.n	800a0e8 <xTaskIncrementTick+0xd8>
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0e4:	4a22      	ldr	r2, [pc, #136]	; (800a170 <xTaskIncrementTick+0x160>)
 800a0e6:	6013      	str	r3, [r2, #0]
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0ec:	4613      	mov	r3, r2
 800a0ee:	009b      	lsls	r3, r3, #2
 800a0f0:	4413      	add	r3, r2
 800a0f2:	009b      	lsls	r3, r3, #2
 800a0f4:	4a1f      	ldr	r2, [pc, #124]	; (800a174 <xTaskIncrementTick+0x164>)
 800a0f6:	441a      	add	r2, r3
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	3304      	adds	r3, #4
 800a0fc:	4619      	mov	r1, r3
 800a0fe:	4610      	mov	r0, r2
 800a100:	f7fe fe09 	bl	8008d16 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a108:	4b1b      	ldr	r3, [pc, #108]	; (800a178 <xTaskIncrementTick+0x168>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a10e:	429a      	cmp	r2, r3
 800a110:	d3b8      	bcc.n	800a084 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a112:	2301      	movs	r3, #1
 800a114:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a116:	e7b5      	b.n	800a084 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a118:	4b17      	ldr	r3, [pc, #92]	; (800a178 <xTaskIncrementTick+0x168>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a11e:	4915      	ldr	r1, [pc, #84]	; (800a174 <xTaskIncrementTick+0x164>)
 800a120:	4613      	mov	r3, r2
 800a122:	009b      	lsls	r3, r3, #2
 800a124:	4413      	add	r3, r2
 800a126:	009b      	lsls	r3, r3, #2
 800a128:	440b      	add	r3, r1
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	2b01      	cmp	r3, #1
 800a12e:	d901      	bls.n	800a134 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a130:	2301      	movs	r3, #1
 800a132:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a134:	4b11      	ldr	r3, [pc, #68]	; (800a17c <xTaskIncrementTick+0x16c>)
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d007      	beq.n	800a14c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a13c:	2301      	movs	r3, #1
 800a13e:	617b      	str	r3, [r7, #20]
 800a140:	e004      	b.n	800a14c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a142:	4b0f      	ldr	r3, [pc, #60]	; (800a180 <xTaskIncrementTick+0x170>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	3301      	adds	r3, #1
 800a148:	4a0d      	ldr	r2, [pc, #52]	; (800a180 <xTaskIncrementTick+0x170>)
 800a14a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a14c:	697b      	ldr	r3, [r7, #20]
}
 800a14e:	4618      	mov	r0, r3
 800a150:	3718      	adds	r7, #24
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}
 800a156:	bf00      	nop
 800a158:	20000f1c 	.word	0x20000f1c
 800a15c:	20000ef8 	.word	0x20000ef8
 800a160:	20000eac 	.word	0x20000eac
 800a164:	20000eb0 	.word	0x20000eb0
 800a168:	20000f0c 	.word	0x20000f0c
 800a16c:	20000f14 	.word	0x20000f14
 800a170:	20000efc 	.word	0x20000efc
 800a174:	20000a24 	.word	0x20000a24
 800a178:	20000a20 	.word	0x20000a20
 800a17c:	20000f08 	.word	0x20000f08
 800a180:	20000f04 	.word	0x20000f04

0800a184 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a184:	b480      	push	{r7}
 800a186:	b085      	sub	sp, #20
 800a188:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a18a:	4b2a      	ldr	r3, [pc, #168]	; (800a234 <vTaskSwitchContext+0xb0>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d003      	beq.n	800a19a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a192:	4b29      	ldr	r3, [pc, #164]	; (800a238 <vTaskSwitchContext+0xb4>)
 800a194:	2201      	movs	r2, #1
 800a196:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a198:	e046      	b.n	800a228 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800a19a:	4b27      	ldr	r3, [pc, #156]	; (800a238 <vTaskSwitchContext+0xb4>)
 800a19c:	2200      	movs	r2, #0
 800a19e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1a0:	4b26      	ldr	r3, [pc, #152]	; (800a23c <vTaskSwitchContext+0xb8>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	60fb      	str	r3, [r7, #12]
 800a1a6:	e010      	b.n	800a1ca <vTaskSwitchContext+0x46>
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d10a      	bne.n	800a1c4 <vTaskSwitchContext+0x40>
	__asm volatile
 800a1ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1b2:	f383 8811 	msr	BASEPRI, r3
 800a1b6:	f3bf 8f6f 	isb	sy
 800a1ba:	f3bf 8f4f 	dsb	sy
 800a1be:	607b      	str	r3, [r7, #4]
}
 800a1c0:	bf00      	nop
 800a1c2:	e7fe      	b.n	800a1c2 <vTaskSwitchContext+0x3e>
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	3b01      	subs	r3, #1
 800a1c8:	60fb      	str	r3, [r7, #12]
 800a1ca:	491d      	ldr	r1, [pc, #116]	; (800a240 <vTaskSwitchContext+0xbc>)
 800a1cc:	68fa      	ldr	r2, [r7, #12]
 800a1ce:	4613      	mov	r3, r2
 800a1d0:	009b      	lsls	r3, r3, #2
 800a1d2:	4413      	add	r3, r2
 800a1d4:	009b      	lsls	r3, r3, #2
 800a1d6:	440b      	add	r3, r1
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d0e4      	beq.n	800a1a8 <vTaskSwitchContext+0x24>
 800a1de:	68fa      	ldr	r2, [r7, #12]
 800a1e0:	4613      	mov	r3, r2
 800a1e2:	009b      	lsls	r3, r3, #2
 800a1e4:	4413      	add	r3, r2
 800a1e6:	009b      	lsls	r3, r3, #2
 800a1e8:	4a15      	ldr	r2, [pc, #84]	; (800a240 <vTaskSwitchContext+0xbc>)
 800a1ea:	4413      	add	r3, r2
 800a1ec:	60bb      	str	r3, [r7, #8]
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	685b      	ldr	r3, [r3, #4]
 800a1f2:	685a      	ldr	r2, [r3, #4]
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	605a      	str	r2, [r3, #4]
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	685a      	ldr	r2, [r3, #4]
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	3308      	adds	r3, #8
 800a200:	429a      	cmp	r2, r3
 800a202:	d104      	bne.n	800a20e <vTaskSwitchContext+0x8a>
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	685b      	ldr	r3, [r3, #4]
 800a208:	685a      	ldr	r2, [r3, #4]
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	605a      	str	r2, [r3, #4]
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	685b      	ldr	r3, [r3, #4]
 800a212:	68db      	ldr	r3, [r3, #12]
 800a214:	4a0b      	ldr	r2, [pc, #44]	; (800a244 <vTaskSwitchContext+0xc0>)
 800a216:	6013      	str	r3, [r2, #0]
 800a218:	4a08      	ldr	r2, [pc, #32]	; (800a23c <vTaskSwitchContext+0xb8>)
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a21e:	4b09      	ldr	r3, [pc, #36]	; (800a244 <vTaskSwitchContext+0xc0>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	3354      	adds	r3, #84	; 0x54
 800a224:	4a08      	ldr	r2, [pc, #32]	; (800a248 <vTaskSwitchContext+0xc4>)
 800a226:	6013      	str	r3, [r2, #0]
}
 800a228:	bf00      	nop
 800a22a:	3714      	adds	r7, #20
 800a22c:	46bd      	mov	sp, r7
 800a22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a232:	4770      	bx	lr
 800a234:	20000f1c 	.word	0x20000f1c
 800a238:	20000f08 	.word	0x20000f08
 800a23c:	20000efc 	.word	0x20000efc
 800a240:	20000a24 	.word	0x20000a24
 800a244:	20000a20 	.word	0x20000a20
 800a248:	20000070 	.word	0x20000070

0800a24c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b084      	sub	sp, #16
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d10a      	bne.n	800a272 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a25c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a260:	f383 8811 	msr	BASEPRI, r3
 800a264:	f3bf 8f6f 	isb	sy
 800a268:	f3bf 8f4f 	dsb	sy
 800a26c:	60fb      	str	r3, [r7, #12]
}
 800a26e:	bf00      	nop
 800a270:	e7fe      	b.n	800a270 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a272:	4b07      	ldr	r3, [pc, #28]	; (800a290 <vTaskPlaceOnEventList+0x44>)
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	3318      	adds	r3, #24
 800a278:	4619      	mov	r1, r3
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f7fe fd6f 	bl	8008d5e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a280:	2101      	movs	r1, #1
 800a282:	6838      	ldr	r0, [r7, #0]
 800a284:	f000 fa80 	bl	800a788 <prvAddCurrentTaskToDelayedList>
}
 800a288:	bf00      	nop
 800a28a:	3710      	adds	r7, #16
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}
 800a290:	20000a20 	.word	0x20000a20

0800a294 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a294:	b580      	push	{r7, lr}
 800a296:	b086      	sub	sp, #24
 800a298:	af00      	add	r7, sp, #0
 800a29a:	60f8      	str	r0, [r7, #12]
 800a29c:	60b9      	str	r1, [r7, #8]
 800a29e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d10a      	bne.n	800a2bc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a2a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2aa:	f383 8811 	msr	BASEPRI, r3
 800a2ae:	f3bf 8f6f 	isb	sy
 800a2b2:	f3bf 8f4f 	dsb	sy
 800a2b6:	617b      	str	r3, [r7, #20]
}
 800a2b8:	bf00      	nop
 800a2ba:	e7fe      	b.n	800a2ba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a2bc:	4b0a      	ldr	r3, [pc, #40]	; (800a2e8 <vTaskPlaceOnEventListRestricted+0x54>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	3318      	adds	r3, #24
 800a2c2:	4619      	mov	r1, r3
 800a2c4:	68f8      	ldr	r0, [r7, #12]
 800a2c6:	f7fe fd26 	bl	8008d16 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d002      	beq.n	800a2d6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a2d0:	f04f 33ff 	mov.w	r3, #4294967295
 800a2d4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a2d6:	6879      	ldr	r1, [r7, #4]
 800a2d8:	68b8      	ldr	r0, [r7, #8]
 800a2da:	f000 fa55 	bl	800a788 <prvAddCurrentTaskToDelayedList>
	}
 800a2de:	bf00      	nop
 800a2e0:	3718      	adds	r7, #24
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}
 800a2e6:	bf00      	nop
 800a2e8:	20000a20 	.word	0x20000a20

0800a2ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b086      	sub	sp, #24
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	68db      	ldr	r3, [r3, #12]
 800a2f8:	68db      	ldr	r3, [r3, #12]
 800a2fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a2fc:	693b      	ldr	r3, [r7, #16]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d10a      	bne.n	800a318 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a302:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a306:	f383 8811 	msr	BASEPRI, r3
 800a30a:	f3bf 8f6f 	isb	sy
 800a30e:	f3bf 8f4f 	dsb	sy
 800a312:	60fb      	str	r3, [r7, #12]
}
 800a314:	bf00      	nop
 800a316:	e7fe      	b.n	800a316 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	3318      	adds	r3, #24
 800a31c:	4618      	mov	r0, r3
 800a31e:	f7fe fd57 	bl	8008dd0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a322:	4b1e      	ldr	r3, [pc, #120]	; (800a39c <xTaskRemoveFromEventList+0xb0>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d11d      	bne.n	800a366 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a32a:	693b      	ldr	r3, [r7, #16]
 800a32c:	3304      	adds	r3, #4
 800a32e:	4618      	mov	r0, r3
 800a330:	f7fe fd4e 	bl	8008dd0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a338:	4b19      	ldr	r3, [pc, #100]	; (800a3a0 <xTaskRemoveFromEventList+0xb4>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	429a      	cmp	r2, r3
 800a33e:	d903      	bls.n	800a348 <xTaskRemoveFromEventList+0x5c>
 800a340:	693b      	ldr	r3, [r7, #16]
 800a342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a344:	4a16      	ldr	r2, [pc, #88]	; (800a3a0 <xTaskRemoveFromEventList+0xb4>)
 800a346:	6013      	str	r3, [r2, #0]
 800a348:	693b      	ldr	r3, [r7, #16]
 800a34a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a34c:	4613      	mov	r3, r2
 800a34e:	009b      	lsls	r3, r3, #2
 800a350:	4413      	add	r3, r2
 800a352:	009b      	lsls	r3, r3, #2
 800a354:	4a13      	ldr	r2, [pc, #76]	; (800a3a4 <xTaskRemoveFromEventList+0xb8>)
 800a356:	441a      	add	r2, r3
 800a358:	693b      	ldr	r3, [r7, #16]
 800a35a:	3304      	adds	r3, #4
 800a35c:	4619      	mov	r1, r3
 800a35e:	4610      	mov	r0, r2
 800a360:	f7fe fcd9 	bl	8008d16 <vListInsertEnd>
 800a364:	e005      	b.n	800a372 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a366:	693b      	ldr	r3, [r7, #16]
 800a368:	3318      	adds	r3, #24
 800a36a:	4619      	mov	r1, r3
 800a36c:	480e      	ldr	r0, [pc, #56]	; (800a3a8 <xTaskRemoveFromEventList+0xbc>)
 800a36e:	f7fe fcd2 	bl	8008d16 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a372:	693b      	ldr	r3, [r7, #16]
 800a374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a376:	4b0d      	ldr	r3, [pc, #52]	; (800a3ac <xTaskRemoveFromEventList+0xc0>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a37c:	429a      	cmp	r2, r3
 800a37e:	d905      	bls.n	800a38c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a380:	2301      	movs	r3, #1
 800a382:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a384:	4b0a      	ldr	r3, [pc, #40]	; (800a3b0 <xTaskRemoveFromEventList+0xc4>)
 800a386:	2201      	movs	r2, #1
 800a388:	601a      	str	r2, [r3, #0]
 800a38a:	e001      	b.n	800a390 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a38c:	2300      	movs	r3, #0
 800a38e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a390:	697b      	ldr	r3, [r7, #20]
}
 800a392:	4618      	mov	r0, r3
 800a394:	3718      	adds	r7, #24
 800a396:	46bd      	mov	sp, r7
 800a398:	bd80      	pop	{r7, pc}
 800a39a:	bf00      	nop
 800a39c:	20000f1c 	.word	0x20000f1c
 800a3a0:	20000efc 	.word	0x20000efc
 800a3a4:	20000a24 	.word	0x20000a24
 800a3a8:	20000eb4 	.word	0x20000eb4
 800a3ac:	20000a20 	.word	0x20000a20
 800a3b0:	20000f08 	.word	0x20000f08

0800a3b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a3b4:	b480      	push	{r7}
 800a3b6:	b083      	sub	sp, #12
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a3bc:	4b06      	ldr	r3, [pc, #24]	; (800a3d8 <vTaskInternalSetTimeOutState+0x24>)
 800a3be:	681a      	ldr	r2, [r3, #0]
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a3c4:	4b05      	ldr	r3, [pc, #20]	; (800a3dc <vTaskInternalSetTimeOutState+0x28>)
 800a3c6:	681a      	ldr	r2, [r3, #0]
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	605a      	str	r2, [r3, #4]
}
 800a3cc:	bf00      	nop
 800a3ce:	370c      	adds	r7, #12
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d6:	4770      	bx	lr
 800a3d8:	20000f0c 	.word	0x20000f0c
 800a3dc:	20000ef8 	.word	0x20000ef8

0800a3e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b088      	sub	sp, #32
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
 800a3e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d10a      	bne.n	800a406 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a3f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3f4:	f383 8811 	msr	BASEPRI, r3
 800a3f8:	f3bf 8f6f 	isb	sy
 800a3fc:	f3bf 8f4f 	dsb	sy
 800a400:	613b      	str	r3, [r7, #16]
}
 800a402:	bf00      	nop
 800a404:	e7fe      	b.n	800a404 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d10a      	bne.n	800a422 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a40c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a410:	f383 8811 	msr	BASEPRI, r3
 800a414:	f3bf 8f6f 	isb	sy
 800a418:	f3bf 8f4f 	dsb	sy
 800a41c:	60fb      	str	r3, [r7, #12]
}
 800a41e:	bf00      	nop
 800a420:	e7fe      	b.n	800a420 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a422:	f000 fe7f 	bl	800b124 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a426:	4b1d      	ldr	r3, [pc, #116]	; (800a49c <xTaskCheckForTimeOut+0xbc>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	685b      	ldr	r3, [r3, #4]
 800a430:	69ba      	ldr	r2, [r7, #24]
 800a432:	1ad3      	subs	r3, r2, r3
 800a434:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a43e:	d102      	bne.n	800a446 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a440:	2300      	movs	r3, #0
 800a442:	61fb      	str	r3, [r7, #28]
 800a444:	e023      	b.n	800a48e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681a      	ldr	r2, [r3, #0]
 800a44a:	4b15      	ldr	r3, [pc, #84]	; (800a4a0 <xTaskCheckForTimeOut+0xc0>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	429a      	cmp	r2, r3
 800a450:	d007      	beq.n	800a462 <xTaskCheckForTimeOut+0x82>
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	685b      	ldr	r3, [r3, #4]
 800a456:	69ba      	ldr	r2, [r7, #24]
 800a458:	429a      	cmp	r2, r3
 800a45a:	d302      	bcc.n	800a462 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a45c:	2301      	movs	r3, #1
 800a45e:	61fb      	str	r3, [r7, #28]
 800a460:	e015      	b.n	800a48e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	697a      	ldr	r2, [r7, #20]
 800a468:	429a      	cmp	r2, r3
 800a46a:	d20b      	bcs.n	800a484 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	681a      	ldr	r2, [r3, #0]
 800a470:	697b      	ldr	r3, [r7, #20]
 800a472:	1ad2      	subs	r2, r2, r3
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f7ff ff9b 	bl	800a3b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a47e:	2300      	movs	r3, #0
 800a480:	61fb      	str	r3, [r7, #28]
 800a482:	e004      	b.n	800a48e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	2200      	movs	r2, #0
 800a488:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a48a:	2301      	movs	r3, #1
 800a48c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a48e:	f000 fe79 	bl	800b184 <vPortExitCritical>

	return xReturn;
 800a492:	69fb      	ldr	r3, [r7, #28]
}
 800a494:	4618      	mov	r0, r3
 800a496:	3720      	adds	r7, #32
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}
 800a49c:	20000ef8 	.word	0x20000ef8
 800a4a0:	20000f0c 	.word	0x20000f0c

0800a4a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a4a4:	b480      	push	{r7}
 800a4a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a4a8:	4b03      	ldr	r3, [pc, #12]	; (800a4b8 <vTaskMissedYield+0x14>)
 800a4aa:	2201      	movs	r2, #1
 800a4ac:	601a      	str	r2, [r3, #0]
}
 800a4ae:	bf00      	nop
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b6:	4770      	bx	lr
 800a4b8:	20000f08 	.word	0x20000f08

0800a4bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b082      	sub	sp, #8
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a4c4:	f000 f852 	bl	800a56c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a4c8:	4b06      	ldr	r3, [pc, #24]	; (800a4e4 <prvIdleTask+0x28>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	2b01      	cmp	r3, #1
 800a4ce:	d9f9      	bls.n	800a4c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a4d0:	4b05      	ldr	r3, [pc, #20]	; (800a4e8 <prvIdleTask+0x2c>)
 800a4d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4d6:	601a      	str	r2, [r3, #0]
 800a4d8:	f3bf 8f4f 	dsb	sy
 800a4dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a4e0:	e7f0      	b.n	800a4c4 <prvIdleTask+0x8>
 800a4e2:	bf00      	nop
 800a4e4:	20000a24 	.word	0x20000a24
 800a4e8:	e000ed04 	.word	0xe000ed04

0800a4ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b082      	sub	sp, #8
 800a4f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	607b      	str	r3, [r7, #4]
 800a4f6:	e00c      	b.n	800a512 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a4f8:	687a      	ldr	r2, [r7, #4]
 800a4fa:	4613      	mov	r3, r2
 800a4fc:	009b      	lsls	r3, r3, #2
 800a4fe:	4413      	add	r3, r2
 800a500:	009b      	lsls	r3, r3, #2
 800a502:	4a12      	ldr	r2, [pc, #72]	; (800a54c <prvInitialiseTaskLists+0x60>)
 800a504:	4413      	add	r3, r2
 800a506:	4618      	mov	r0, r3
 800a508:	f7fe fbd8 	bl	8008cbc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	3301      	adds	r3, #1
 800a510:	607b      	str	r3, [r7, #4]
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2b37      	cmp	r3, #55	; 0x37
 800a516:	d9ef      	bls.n	800a4f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a518:	480d      	ldr	r0, [pc, #52]	; (800a550 <prvInitialiseTaskLists+0x64>)
 800a51a:	f7fe fbcf 	bl	8008cbc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a51e:	480d      	ldr	r0, [pc, #52]	; (800a554 <prvInitialiseTaskLists+0x68>)
 800a520:	f7fe fbcc 	bl	8008cbc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a524:	480c      	ldr	r0, [pc, #48]	; (800a558 <prvInitialiseTaskLists+0x6c>)
 800a526:	f7fe fbc9 	bl	8008cbc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a52a:	480c      	ldr	r0, [pc, #48]	; (800a55c <prvInitialiseTaskLists+0x70>)
 800a52c:	f7fe fbc6 	bl	8008cbc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a530:	480b      	ldr	r0, [pc, #44]	; (800a560 <prvInitialiseTaskLists+0x74>)
 800a532:	f7fe fbc3 	bl	8008cbc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a536:	4b0b      	ldr	r3, [pc, #44]	; (800a564 <prvInitialiseTaskLists+0x78>)
 800a538:	4a05      	ldr	r2, [pc, #20]	; (800a550 <prvInitialiseTaskLists+0x64>)
 800a53a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a53c:	4b0a      	ldr	r3, [pc, #40]	; (800a568 <prvInitialiseTaskLists+0x7c>)
 800a53e:	4a05      	ldr	r2, [pc, #20]	; (800a554 <prvInitialiseTaskLists+0x68>)
 800a540:	601a      	str	r2, [r3, #0]
}
 800a542:	bf00      	nop
 800a544:	3708      	adds	r7, #8
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}
 800a54a:	bf00      	nop
 800a54c:	20000a24 	.word	0x20000a24
 800a550:	20000e84 	.word	0x20000e84
 800a554:	20000e98 	.word	0x20000e98
 800a558:	20000eb4 	.word	0x20000eb4
 800a55c:	20000ec8 	.word	0x20000ec8
 800a560:	20000ee0 	.word	0x20000ee0
 800a564:	20000eac 	.word	0x20000eac
 800a568:	20000eb0 	.word	0x20000eb0

0800a56c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b082      	sub	sp, #8
 800a570:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a572:	e019      	b.n	800a5a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a574:	f000 fdd6 	bl	800b124 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a578:	4b10      	ldr	r3, [pc, #64]	; (800a5bc <prvCheckTasksWaitingTermination+0x50>)
 800a57a:	68db      	ldr	r3, [r3, #12]
 800a57c:	68db      	ldr	r3, [r3, #12]
 800a57e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	3304      	adds	r3, #4
 800a584:	4618      	mov	r0, r3
 800a586:	f7fe fc23 	bl	8008dd0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a58a:	4b0d      	ldr	r3, [pc, #52]	; (800a5c0 <prvCheckTasksWaitingTermination+0x54>)
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	3b01      	subs	r3, #1
 800a590:	4a0b      	ldr	r2, [pc, #44]	; (800a5c0 <prvCheckTasksWaitingTermination+0x54>)
 800a592:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a594:	4b0b      	ldr	r3, [pc, #44]	; (800a5c4 <prvCheckTasksWaitingTermination+0x58>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	3b01      	subs	r3, #1
 800a59a:	4a0a      	ldr	r2, [pc, #40]	; (800a5c4 <prvCheckTasksWaitingTermination+0x58>)
 800a59c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a59e:	f000 fdf1 	bl	800b184 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	f000 f810 	bl	800a5c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a5a8:	4b06      	ldr	r3, [pc, #24]	; (800a5c4 <prvCheckTasksWaitingTermination+0x58>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d1e1      	bne.n	800a574 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a5b0:	bf00      	nop
 800a5b2:	bf00      	nop
 800a5b4:	3708      	adds	r7, #8
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}
 800a5ba:	bf00      	nop
 800a5bc:	20000ec8 	.word	0x20000ec8
 800a5c0:	20000ef4 	.word	0x20000ef4
 800a5c4:	20000edc 	.word	0x20000edc

0800a5c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b084      	sub	sp, #16
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	3354      	adds	r3, #84	; 0x54
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	f001 f9d5 	bl	800b984 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d108      	bne.n	800a5f6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	f000 ff89 	bl	800b500 <vPortFree>
				vPortFree( pxTCB );
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f000 ff86 	bl	800b500 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a5f4:	e018      	b.n	800a628 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a5fc:	2b01      	cmp	r3, #1
 800a5fe:	d103      	bne.n	800a608 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	f000 ff7d 	bl	800b500 <vPortFree>
	}
 800a606:	e00f      	b.n	800a628 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a60e:	2b02      	cmp	r3, #2
 800a610:	d00a      	beq.n	800a628 <prvDeleteTCB+0x60>
	__asm volatile
 800a612:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a616:	f383 8811 	msr	BASEPRI, r3
 800a61a:	f3bf 8f6f 	isb	sy
 800a61e:	f3bf 8f4f 	dsb	sy
 800a622:	60fb      	str	r3, [r7, #12]
}
 800a624:	bf00      	nop
 800a626:	e7fe      	b.n	800a626 <prvDeleteTCB+0x5e>
	}
 800a628:	bf00      	nop
 800a62a:	3710      	adds	r7, #16
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}

0800a630 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a630:	b480      	push	{r7}
 800a632:	b083      	sub	sp, #12
 800a634:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a636:	4b0c      	ldr	r3, [pc, #48]	; (800a668 <prvResetNextTaskUnblockTime+0x38>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d104      	bne.n	800a64a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a640:	4b0a      	ldr	r3, [pc, #40]	; (800a66c <prvResetNextTaskUnblockTime+0x3c>)
 800a642:	f04f 32ff 	mov.w	r2, #4294967295
 800a646:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a648:	e008      	b.n	800a65c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a64a:	4b07      	ldr	r3, [pc, #28]	; (800a668 <prvResetNextTaskUnblockTime+0x38>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	68db      	ldr	r3, [r3, #12]
 800a650:	68db      	ldr	r3, [r3, #12]
 800a652:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	685b      	ldr	r3, [r3, #4]
 800a658:	4a04      	ldr	r2, [pc, #16]	; (800a66c <prvResetNextTaskUnblockTime+0x3c>)
 800a65a:	6013      	str	r3, [r2, #0]
}
 800a65c:	bf00      	nop
 800a65e:	370c      	adds	r7, #12
 800a660:	46bd      	mov	sp, r7
 800a662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a666:	4770      	bx	lr
 800a668:	20000eac 	.word	0x20000eac
 800a66c:	20000f14 	.word	0x20000f14

0800a670 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a670:	b480      	push	{r7}
 800a672:	b083      	sub	sp, #12
 800a674:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a676:	4b0b      	ldr	r3, [pc, #44]	; (800a6a4 <xTaskGetSchedulerState+0x34>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d102      	bne.n	800a684 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a67e:	2301      	movs	r3, #1
 800a680:	607b      	str	r3, [r7, #4]
 800a682:	e008      	b.n	800a696 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a684:	4b08      	ldr	r3, [pc, #32]	; (800a6a8 <xTaskGetSchedulerState+0x38>)
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d102      	bne.n	800a692 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a68c:	2302      	movs	r3, #2
 800a68e:	607b      	str	r3, [r7, #4]
 800a690:	e001      	b.n	800a696 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a692:	2300      	movs	r3, #0
 800a694:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a696:	687b      	ldr	r3, [r7, #4]
	}
 800a698:	4618      	mov	r0, r3
 800a69a:	370c      	adds	r7, #12
 800a69c:	46bd      	mov	sp, r7
 800a69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a2:	4770      	bx	lr
 800a6a4:	20000f00 	.word	0x20000f00
 800a6a8:	20000f1c 	.word	0x20000f1c

0800a6ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b086      	sub	sp, #24
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d056      	beq.n	800a770 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a6c2:	4b2e      	ldr	r3, [pc, #184]	; (800a77c <xTaskPriorityDisinherit+0xd0>)
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	693a      	ldr	r2, [r7, #16]
 800a6c8:	429a      	cmp	r2, r3
 800a6ca:	d00a      	beq.n	800a6e2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a6cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6d0:	f383 8811 	msr	BASEPRI, r3
 800a6d4:	f3bf 8f6f 	isb	sy
 800a6d8:	f3bf 8f4f 	dsb	sy
 800a6dc:	60fb      	str	r3, [r7, #12]
}
 800a6de:	bf00      	nop
 800a6e0:	e7fe      	b.n	800a6e0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a6e2:	693b      	ldr	r3, [r7, #16]
 800a6e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d10a      	bne.n	800a700 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a6ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ee:	f383 8811 	msr	BASEPRI, r3
 800a6f2:	f3bf 8f6f 	isb	sy
 800a6f6:	f3bf 8f4f 	dsb	sy
 800a6fa:	60bb      	str	r3, [r7, #8]
}
 800a6fc:	bf00      	nop
 800a6fe:	e7fe      	b.n	800a6fe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a700:	693b      	ldr	r3, [r7, #16]
 800a702:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a704:	1e5a      	subs	r2, r3, #1
 800a706:	693b      	ldr	r3, [r7, #16]
 800a708:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a70a:	693b      	ldr	r3, [r7, #16]
 800a70c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a70e:	693b      	ldr	r3, [r7, #16]
 800a710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a712:	429a      	cmp	r2, r3
 800a714:	d02c      	beq.n	800a770 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a716:	693b      	ldr	r3, [r7, #16]
 800a718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d128      	bne.n	800a770 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a71e:	693b      	ldr	r3, [r7, #16]
 800a720:	3304      	adds	r3, #4
 800a722:	4618      	mov	r0, r3
 800a724:	f7fe fb54 	bl	8008dd0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a728:	693b      	ldr	r3, [r7, #16]
 800a72a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a72c:	693b      	ldr	r3, [r7, #16]
 800a72e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a730:	693b      	ldr	r3, [r7, #16]
 800a732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a734:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a738:	693b      	ldr	r3, [r7, #16]
 800a73a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a73c:	693b      	ldr	r3, [r7, #16]
 800a73e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a740:	4b0f      	ldr	r3, [pc, #60]	; (800a780 <xTaskPriorityDisinherit+0xd4>)
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	429a      	cmp	r2, r3
 800a746:	d903      	bls.n	800a750 <xTaskPriorityDisinherit+0xa4>
 800a748:	693b      	ldr	r3, [r7, #16]
 800a74a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a74c:	4a0c      	ldr	r2, [pc, #48]	; (800a780 <xTaskPriorityDisinherit+0xd4>)
 800a74e:	6013      	str	r3, [r2, #0]
 800a750:	693b      	ldr	r3, [r7, #16]
 800a752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a754:	4613      	mov	r3, r2
 800a756:	009b      	lsls	r3, r3, #2
 800a758:	4413      	add	r3, r2
 800a75a:	009b      	lsls	r3, r3, #2
 800a75c:	4a09      	ldr	r2, [pc, #36]	; (800a784 <xTaskPriorityDisinherit+0xd8>)
 800a75e:	441a      	add	r2, r3
 800a760:	693b      	ldr	r3, [r7, #16]
 800a762:	3304      	adds	r3, #4
 800a764:	4619      	mov	r1, r3
 800a766:	4610      	mov	r0, r2
 800a768:	f7fe fad5 	bl	8008d16 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a76c:	2301      	movs	r3, #1
 800a76e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a770:	697b      	ldr	r3, [r7, #20]
	}
 800a772:	4618      	mov	r0, r3
 800a774:	3718      	adds	r7, #24
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}
 800a77a:	bf00      	nop
 800a77c:	20000a20 	.word	0x20000a20
 800a780:	20000efc 	.word	0x20000efc
 800a784:	20000a24 	.word	0x20000a24

0800a788 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b084      	sub	sp, #16
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
 800a790:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a792:	4b21      	ldr	r3, [pc, #132]	; (800a818 <prvAddCurrentTaskToDelayedList+0x90>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a798:	4b20      	ldr	r3, [pc, #128]	; (800a81c <prvAddCurrentTaskToDelayedList+0x94>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	3304      	adds	r3, #4
 800a79e:	4618      	mov	r0, r3
 800a7a0:	f7fe fb16 	bl	8008dd0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7aa:	d10a      	bne.n	800a7c2 <prvAddCurrentTaskToDelayedList+0x3a>
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d007      	beq.n	800a7c2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a7b2:	4b1a      	ldr	r3, [pc, #104]	; (800a81c <prvAddCurrentTaskToDelayedList+0x94>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	3304      	adds	r3, #4
 800a7b8:	4619      	mov	r1, r3
 800a7ba:	4819      	ldr	r0, [pc, #100]	; (800a820 <prvAddCurrentTaskToDelayedList+0x98>)
 800a7bc:	f7fe faab 	bl	8008d16 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a7c0:	e026      	b.n	800a810 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a7c2:	68fa      	ldr	r2, [r7, #12]
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	4413      	add	r3, r2
 800a7c8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a7ca:	4b14      	ldr	r3, [pc, #80]	; (800a81c <prvAddCurrentTaskToDelayedList+0x94>)
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	68ba      	ldr	r2, [r7, #8]
 800a7d0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a7d2:	68ba      	ldr	r2, [r7, #8]
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	429a      	cmp	r2, r3
 800a7d8:	d209      	bcs.n	800a7ee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a7da:	4b12      	ldr	r3, [pc, #72]	; (800a824 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a7dc:	681a      	ldr	r2, [r3, #0]
 800a7de:	4b0f      	ldr	r3, [pc, #60]	; (800a81c <prvAddCurrentTaskToDelayedList+0x94>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	3304      	adds	r3, #4
 800a7e4:	4619      	mov	r1, r3
 800a7e6:	4610      	mov	r0, r2
 800a7e8:	f7fe fab9 	bl	8008d5e <vListInsert>
}
 800a7ec:	e010      	b.n	800a810 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a7ee:	4b0e      	ldr	r3, [pc, #56]	; (800a828 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a7f0:	681a      	ldr	r2, [r3, #0]
 800a7f2:	4b0a      	ldr	r3, [pc, #40]	; (800a81c <prvAddCurrentTaskToDelayedList+0x94>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	3304      	adds	r3, #4
 800a7f8:	4619      	mov	r1, r3
 800a7fa:	4610      	mov	r0, r2
 800a7fc:	f7fe faaf 	bl	8008d5e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a800:	4b0a      	ldr	r3, [pc, #40]	; (800a82c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	68ba      	ldr	r2, [r7, #8]
 800a806:	429a      	cmp	r2, r3
 800a808:	d202      	bcs.n	800a810 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a80a:	4a08      	ldr	r2, [pc, #32]	; (800a82c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a80c:	68bb      	ldr	r3, [r7, #8]
 800a80e:	6013      	str	r3, [r2, #0]
}
 800a810:	bf00      	nop
 800a812:	3710      	adds	r7, #16
 800a814:	46bd      	mov	sp, r7
 800a816:	bd80      	pop	{r7, pc}
 800a818:	20000ef8 	.word	0x20000ef8
 800a81c:	20000a20 	.word	0x20000a20
 800a820:	20000ee0 	.word	0x20000ee0
 800a824:	20000eb0 	.word	0x20000eb0
 800a828:	20000eac 	.word	0x20000eac
 800a82c:	20000f14 	.word	0x20000f14

0800a830 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b08a      	sub	sp, #40	; 0x28
 800a834:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a836:	2300      	movs	r3, #0
 800a838:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a83a:	f000 fb07 	bl	800ae4c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a83e:	4b1c      	ldr	r3, [pc, #112]	; (800a8b0 <xTimerCreateTimerTask+0x80>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d021      	beq.n	800a88a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a846:	2300      	movs	r3, #0
 800a848:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a84a:	2300      	movs	r3, #0
 800a84c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a84e:	1d3a      	adds	r2, r7, #4
 800a850:	f107 0108 	add.w	r1, r7, #8
 800a854:	f107 030c 	add.w	r3, r7, #12
 800a858:	4618      	mov	r0, r3
 800a85a:	f7fe fa15 	bl	8008c88 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a85e:	6879      	ldr	r1, [r7, #4]
 800a860:	68bb      	ldr	r3, [r7, #8]
 800a862:	68fa      	ldr	r2, [r7, #12]
 800a864:	9202      	str	r2, [sp, #8]
 800a866:	9301      	str	r3, [sp, #4]
 800a868:	2302      	movs	r3, #2
 800a86a:	9300      	str	r3, [sp, #0]
 800a86c:	2300      	movs	r3, #0
 800a86e:	460a      	mov	r2, r1
 800a870:	4910      	ldr	r1, [pc, #64]	; (800a8b4 <xTimerCreateTimerTask+0x84>)
 800a872:	4811      	ldr	r0, [pc, #68]	; (800a8b8 <xTimerCreateTimerTask+0x88>)
 800a874:	f7ff f8b4 	bl	80099e0 <xTaskCreateStatic>
 800a878:	4603      	mov	r3, r0
 800a87a:	4a10      	ldr	r2, [pc, #64]	; (800a8bc <xTimerCreateTimerTask+0x8c>)
 800a87c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a87e:	4b0f      	ldr	r3, [pc, #60]	; (800a8bc <xTimerCreateTimerTask+0x8c>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d001      	beq.n	800a88a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a886:	2301      	movs	r3, #1
 800a888:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a88a:	697b      	ldr	r3, [r7, #20]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d10a      	bne.n	800a8a6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a890:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a894:	f383 8811 	msr	BASEPRI, r3
 800a898:	f3bf 8f6f 	isb	sy
 800a89c:	f3bf 8f4f 	dsb	sy
 800a8a0:	613b      	str	r3, [r7, #16]
}
 800a8a2:	bf00      	nop
 800a8a4:	e7fe      	b.n	800a8a4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a8a6:	697b      	ldr	r3, [r7, #20]
}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	3718      	adds	r7, #24
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bd80      	pop	{r7, pc}
 800a8b0:	20000f50 	.word	0x20000f50
 800a8b4:	0800cdcc 	.word	0x0800cdcc
 800a8b8:	0800a9f5 	.word	0x0800a9f5
 800a8bc:	20000f54 	.word	0x20000f54

0800a8c0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b08a      	sub	sp, #40	; 0x28
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	60f8      	str	r0, [r7, #12]
 800a8c8:	60b9      	str	r1, [r7, #8]
 800a8ca:	607a      	str	r2, [r7, #4]
 800a8cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d10a      	bne.n	800a8ee <xTimerGenericCommand+0x2e>
	__asm volatile
 800a8d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8dc:	f383 8811 	msr	BASEPRI, r3
 800a8e0:	f3bf 8f6f 	isb	sy
 800a8e4:	f3bf 8f4f 	dsb	sy
 800a8e8:	623b      	str	r3, [r7, #32]
}
 800a8ea:	bf00      	nop
 800a8ec:	e7fe      	b.n	800a8ec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a8ee:	4b1a      	ldr	r3, [pc, #104]	; (800a958 <xTimerGenericCommand+0x98>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d02a      	beq.n	800a94c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a8f6:	68bb      	ldr	r3, [r7, #8]
 800a8f8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	2b05      	cmp	r3, #5
 800a906:	dc18      	bgt.n	800a93a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a908:	f7ff feb2 	bl	800a670 <xTaskGetSchedulerState>
 800a90c:	4603      	mov	r3, r0
 800a90e:	2b02      	cmp	r3, #2
 800a910:	d109      	bne.n	800a926 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a912:	4b11      	ldr	r3, [pc, #68]	; (800a958 <xTimerGenericCommand+0x98>)
 800a914:	6818      	ldr	r0, [r3, #0]
 800a916:	f107 0110 	add.w	r1, r7, #16
 800a91a:	2300      	movs	r3, #0
 800a91c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a91e:	f7fe fc29 	bl	8009174 <xQueueGenericSend>
 800a922:	6278      	str	r0, [r7, #36]	; 0x24
 800a924:	e012      	b.n	800a94c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a926:	4b0c      	ldr	r3, [pc, #48]	; (800a958 <xTimerGenericCommand+0x98>)
 800a928:	6818      	ldr	r0, [r3, #0]
 800a92a:	f107 0110 	add.w	r1, r7, #16
 800a92e:	2300      	movs	r3, #0
 800a930:	2200      	movs	r2, #0
 800a932:	f7fe fc1f 	bl	8009174 <xQueueGenericSend>
 800a936:	6278      	str	r0, [r7, #36]	; 0x24
 800a938:	e008      	b.n	800a94c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a93a:	4b07      	ldr	r3, [pc, #28]	; (800a958 <xTimerGenericCommand+0x98>)
 800a93c:	6818      	ldr	r0, [r3, #0]
 800a93e:	f107 0110 	add.w	r1, r7, #16
 800a942:	2300      	movs	r3, #0
 800a944:	683a      	ldr	r2, [r7, #0]
 800a946:	f7fe fd13 	bl	8009370 <xQueueGenericSendFromISR>
 800a94a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a94e:	4618      	mov	r0, r3
 800a950:	3728      	adds	r7, #40	; 0x28
 800a952:	46bd      	mov	sp, r7
 800a954:	bd80      	pop	{r7, pc}
 800a956:	bf00      	nop
 800a958:	20000f50 	.word	0x20000f50

0800a95c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b088      	sub	sp, #32
 800a960:	af02      	add	r7, sp, #8
 800a962:	6078      	str	r0, [r7, #4]
 800a964:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a966:	4b22      	ldr	r3, [pc, #136]	; (800a9f0 <prvProcessExpiredTimer+0x94>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	68db      	ldr	r3, [r3, #12]
 800a96c:	68db      	ldr	r3, [r3, #12]
 800a96e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a970:	697b      	ldr	r3, [r7, #20]
 800a972:	3304      	adds	r3, #4
 800a974:	4618      	mov	r0, r3
 800a976:	f7fe fa2b 	bl	8008dd0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a97a:	697b      	ldr	r3, [r7, #20]
 800a97c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a980:	f003 0304 	and.w	r3, r3, #4
 800a984:	2b00      	cmp	r3, #0
 800a986:	d022      	beq.n	800a9ce <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a988:	697b      	ldr	r3, [r7, #20]
 800a98a:	699a      	ldr	r2, [r3, #24]
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	18d1      	adds	r1, r2, r3
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	683a      	ldr	r2, [r7, #0]
 800a994:	6978      	ldr	r0, [r7, #20]
 800a996:	f000 f8d1 	bl	800ab3c <prvInsertTimerInActiveList>
 800a99a:	4603      	mov	r3, r0
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d01f      	beq.n	800a9e0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	9300      	str	r3, [sp, #0]
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	687a      	ldr	r2, [r7, #4]
 800a9a8:	2100      	movs	r1, #0
 800a9aa:	6978      	ldr	r0, [r7, #20]
 800a9ac:	f7ff ff88 	bl	800a8c0 <xTimerGenericCommand>
 800a9b0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a9b2:	693b      	ldr	r3, [r7, #16]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d113      	bne.n	800a9e0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a9b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9bc:	f383 8811 	msr	BASEPRI, r3
 800a9c0:	f3bf 8f6f 	isb	sy
 800a9c4:	f3bf 8f4f 	dsb	sy
 800a9c8:	60fb      	str	r3, [r7, #12]
}
 800a9ca:	bf00      	nop
 800a9cc:	e7fe      	b.n	800a9cc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a9ce:	697b      	ldr	r3, [r7, #20]
 800a9d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a9d4:	f023 0301 	bic.w	r3, r3, #1
 800a9d8:	b2da      	uxtb	r2, r3
 800a9da:	697b      	ldr	r3, [r7, #20]
 800a9dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a9e0:	697b      	ldr	r3, [r7, #20]
 800a9e2:	6a1b      	ldr	r3, [r3, #32]
 800a9e4:	6978      	ldr	r0, [r7, #20]
 800a9e6:	4798      	blx	r3
}
 800a9e8:	bf00      	nop
 800a9ea:	3718      	adds	r7, #24
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bd80      	pop	{r7, pc}
 800a9f0:	20000f48 	.word	0x20000f48

0800a9f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b084      	sub	sp, #16
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a9fc:	f107 0308 	add.w	r3, r7, #8
 800aa00:	4618      	mov	r0, r3
 800aa02:	f000 f857 	bl	800aab4 <prvGetNextExpireTime>
 800aa06:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800aa08:	68bb      	ldr	r3, [r7, #8]
 800aa0a:	4619      	mov	r1, r3
 800aa0c:	68f8      	ldr	r0, [r7, #12]
 800aa0e:	f000 f803 	bl	800aa18 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800aa12:	f000 f8d5 	bl	800abc0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aa16:	e7f1      	b.n	800a9fc <prvTimerTask+0x8>

0800aa18 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b084      	sub	sp, #16
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
 800aa20:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800aa22:	f7ff fa39 	bl	8009e98 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aa26:	f107 0308 	add.w	r3, r7, #8
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	f000 f866 	bl	800aafc <prvSampleTimeNow>
 800aa30:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800aa32:	68bb      	ldr	r3, [r7, #8]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d130      	bne.n	800aa9a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d10a      	bne.n	800aa54 <prvProcessTimerOrBlockTask+0x3c>
 800aa3e:	687a      	ldr	r2, [r7, #4]
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	429a      	cmp	r2, r3
 800aa44:	d806      	bhi.n	800aa54 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800aa46:	f7ff fa35 	bl	8009eb4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800aa4a:	68f9      	ldr	r1, [r7, #12]
 800aa4c:	6878      	ldr	r0, [r7, #4]
 800aa4e:	f7ff ff85 	bl	800a95c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800aa52:	e024      	b.n	800aa9e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d008      	beq.n	800aa6c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800aa5a:	4b13      	ldr	r3, [pc, #76]	; (800aaa8 <prvProcessTimerOrBlockTask+0x90>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d101      	bne.n	800aa68 <prvProcessTimerOrBlockTask+0x50>
 800aa64:	2301      	movs	r3, #1
 800aa66:	e000      	b.n	800aa6a <prvProcessTimerOrBlockTask+0x52>
 800aa68:	2300      	movs	r3, #0
 800aa6a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800aa6c:	4b0f      	ldr	r3, [pc, #60]	; (800aaac <prvProcessTimerOrBlockTask+0x94>)
 800aa6e:	6818      	ldr	r0, [r3, #0]
 800aa70:	687a      	ldr	r2, [r7, #4]
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	1ad3      	subs	r3, r2, r3
 800aa76:	683a      	ldr	r2, [r7, #0]
 800aa78:	4619      	mov	r1, r3
 800aa7a:	f7fe ff7d 	bl	8009978 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800aa7e:	f7ff fa19 	bl	8009eb4 <xTaskResumeAll>
 800aa82:	4603      	mov	r3, r0
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d10a      	bne.n	800aa9e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800aa88:	4b09      	ldr	r3, [pc, #36]	; (800aab0 <prvProcessTimerOrBlockTask+0x98>)
 800aa8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa8e:	601a      	str	r2, [r3, #0]
 800aa90:	f3bf 8f4f 	dsb	sy
 800aa94:	f3bf 8f6f 	isb	sy
}
 800aa98:	e001      	b.n	800aa9e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800aa9a:	f7ff fa0b 	bl	8009eb4 <xTaskResumeAll>
}
 800aa9e:	bf00      	nop
 800aaa0:	3710      	adds	r7, #16
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bd80      	pop	{r7, pc}
 800aaa6:	bf00      	nop
 800aaa8:	20000f4c 	.word	0x20000f4c
 800aaac:	20000f50 	.word	0x20000f50
 800aab0:	e000ed04 	.word	0xe000ed04

0800aab4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800aab4:	b480      	push	{r7}
 800aab6:	b085      	sub	sp, #20
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800aabc:	4b0e      	ldr	r3, [pc, #56]	; (800aaf8 <prvGetNextExpireTime+0x44>)
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d101      	bne.n	800aaca <prvGetNextExpireTime+0x16>
 800aac6:	2201      	movs	r2, #1
 800aac8:	e000      	b.n	800aacc <prvGetNextExpireTime+0x18>
 800aaca:	2200      	movs	r2, #0
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d105      	bne.n	800aae4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aad8:	4b07      	ldr	r3, [pc, #28]	; (800aaf8 <prvGetNextExpireTime+0x44>)
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	68db      	ldr	r3, [r3, #12]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	60fb      	str	r3, [r7, #12]
 800aae2:	e001      	b.n	800aae8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800aae4:	2300      	movs	r3, #0
 800aae6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800aae8:	68fb      	ldr	r3, [r7, #12]
}
 800aaea:	4618      	mov	r0, r3
 800aaec:	3714      	adds	r7, #20
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf4:	4770      	bx	lr
 800aaf6:	bf00      	nop
 800aaf8:	20000f48 	.word	0x20000f48

0800aafc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b084      	sub	sp, #16
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ab04:	f7ff fa74 	bl	8009ff0 <xTaskGetTickCount>
 800ab08:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ab0a:	4b0b      	ldr	r3, [pc, #44]	; (800ab38 <prvSampleTimeNow+0x3c>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	68fa      	ldr	r2, [r7, #12]
 800ab10:	429a      	cmp	r2, r3
 800ab12:	d205      	bcs.n	800ab20 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ab14:	f000 f936 	bl	800ad84 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2201      	movs	r2, #1
 800ab1c:	601a      	str	r2, [r3, #0]
 800ab1e:	e002      	b.n	800ab26 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2200      	movs	r2, #0
 800ab24:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ab26:	4a04      	ldr	r2, [pc, #16]	; (800ab38 <prvSampleTimeNow+0x3c>)
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
}
 800ab2e:	4618      	mov	r0, r3
 800ab30:	3710      	adds	r7, #16
 800ab32:	46bd      	mov	sp, r7
 800ab34:	bd80      	pop	{r7, pc}
 800ab36:	bf00      	nop
 800ab38:	20000f58 	.word	0x20000f58

0800ab3c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b086      	sub	sp, #24
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	60f8      	str	r0, [r7, #12]
 800ab44:	60b9      	str	r1, [r7, #8]
 800ab46:	607a      	str	r2, [r7, #4]
 800ab48:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	68ba      	ldr	r2, [r7, #8]
 800ab52:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	68fa      	ldr	r2, [r7, #12]
 800ab58:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ab5a:	68ba      	ldr	r2, [r7, #8]
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	429a      	cmp	r2, r3
 800ab60:	d812      	bhi.n	800ab88 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab62:	687a      	ldr	r2, [r7, #4]
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	1ad2      	subs	r2, r2, r3
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	699b      	ldr	r3, [r3, #24]
 800ab6c:	429a      	cmp	r2, r3
 800ab6e:	d302      	bcc.n	800ab76 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ab70:	2301      	movs	r3, #1
 800ab72:	617b      	str	r3, [r7, #20]
 800ab74:	e01b      	b.n	800abae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ab76:	4b10      	ldr	r3, [pc, #64]	; (800abb8 <prvInsertTimerInActiveList+0x7c>)
 800ab78:	681a      	ldr	r2, [r3, #0]
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	3304      	adds	r3, #4
 800ab7e:	4619      	mov	r1, r3
 800ab80:	4610      	mov	r0, r2
 800ab82:	f7fe f8ec 	bl	8008d5e <vListInsert>
 800ab86:	e012      	b.n	800abae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ab88:	687a      	ldr	r2, [r7, #4]
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	429a      	cmp	r2, r3
 800ab8e:	d206      	bcs.n	800ab9e <prvInsertTimerInActiveList+0x62>
 800ab90:	68ba      	ldr	r2, [r7, #8]
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	429a      	cmp	r2, r3
 800ab96:	d302      	bcc.n	800ab9e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ab98:	2301      	movs	r3, #1
 800ab9a:	617b      	str	r3, [r7, #20]
 800ab9c:	e007      	b.n	800abae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ab9e:	4b07      	ldr	r3, [pc, #28]	; (800abbc <prvInsertTimerInActiveList+0x80>)
 800aba0:	681a      	ldr	r2, [r3, #0]
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	3304      	adds	r3, #4
 800aba6:	4619      	mov	r1, r3
 800aba8:	4610      	mov	r0, r2
 800abaa:	f7fe f8d8 	bl	8008d5e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800abae:	697b      	ldr	r3, [r7, #20]
}
 800abb0:	4618      	mov	r0, r3
 800abb2:	3718      	adds	r7, #24
 800abb4:	46bd      	mov	sp, r7
 800abb6:	bd80      	pop	{r7, pc}
 800abb8:	20000f4c 	.word	0x20000f4c
 800abbc:	20000f48 	.word	0x20000f48

0800abc0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b08e      	sub	sp, #56	; 0x38
 800abc4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800abc6:	e0ca      	b.n	800ad5e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	da18      	bge.n	800ac00 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800abce:	1d3b      	adds	r3, r7, #4
 800abd0:	3304      	adds	r3, #4
 800abd2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800abd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d10a      	bne.n	800abf0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800abda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abde:	f383 8811 	msr	BASEPRI, r3
 800abe2:	f3bf 8f6f 	isb	sy
 800abe6:	f3bf 8f4f 	dsb	sy
 800abea:	61fb      	str	r3, [r7, #28]
}
 800abec:	bf00      	nop
 800abee:	e7fe      	b.n	800abee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800abf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800abf6:	6850      	ldr	r0, [r2, #4]
 800abf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800abfa:	6892      	ldr	r2, [r2, #8]
 800abfc:	4611      	mov	r1, r2
 800abfe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	f2c0 80aa 	blt.w	800ad5c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ac0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac0e:	695b      	ldr	r3, [r3, #20]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d004      	beq.n	800ac1e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ac14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac16:	3304      	adds	r3, #4
 800ac18:	4618      	mov	r0, r3
 800ac1a:	f7fe f8d9 	bl	8008dd0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ac1e:	463b      	mov	r3, r7
 800ac20:	4618      	mov	r0, r3
 800ac22:	f7ff ff6b 	bl	800aafc <prvSampleTimeNow>
 800ac26:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2b09      	cmp	r3, #9
 800ac2c:	f200 8097 	bhi.w	800ad5e <prvProcessReceivedCommands+0x19e>
 800ac30:	a201      	add	r2, pc, #4	; (adr r2, 800ac38 <prvProcessReceivedCommands+0x78>)
 800ac32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac36:	bf00      	nop
 800ac38:	0800ac61 	.word	0x0800ac61
 800ac3c:	0800ac61 	.word	0x0800ac61
 800ac40:	0800ac61 	.word	0x0800ac61
 800ac44:	0800acd5 	.word	0x0800acd5
 800ac48:	0800ace9 	.word	0x0800ace9
 800ac4c:	0800ad33 	.word	0x0800ad33
 800ac50:	0800ac61 	.word	0x0800ac61
 800ac54:	0800ac61 	.word	0x0800ac61
 800ac58:	0800acd5 	.word	0x0800acd5
 800ac5c:	0800ace9 	.word	0x0800ace9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ac60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac66:	f043 0301 	orr.w	r3, r3, #1
 800ac6a:	b2da      	uxtb	r2, r3
 800ac6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ac72:	68ba      	ldr	r2, [r7, #8]
 800ac74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac76:	699b      	ldr	r3, [r3, #24]
 800ac78:	18d1      	adds	r1, r2, r3
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac80:	f7ff ff5c 	bl	800ab3c <prvInsertTimerInActiveList>
 800ac84:	4603      	mov	r3, r0
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d069      	beq.n	800ad5e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ac8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac8c:	6a1b      	ldr	r3, [r3, #32]
 800ac8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac90:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ac92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac98:	f003 0304 	and.w	r3, r3, #4
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d05e      	beq.n	800ad5e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800aca0:	68ba      	ldr	r2, [r7, #8]
 800aca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aca4:	699b      	ldr	r3, [r3, #24]
 800aca6:	441a      	add	r2, r3
 800aca8:	2300      	movs	r3, #0
 800acaa:	9300      	str	r3, [sp, #0]
 800acac:	2300      	movs	r3, #0
 800acae:	2100      	movs	r1, #0
 800acb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800acb2:	f7ff fe05 	bl	800a8c0 <xTimerGenericCommand>
 800acb6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800acb8:	6a3b      	ldr	r3, [r7, #32]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d14f      	bne.n	800ad5e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800acbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acc2:	f383 8811 	msr	BASEPRI, r3
 800acc6:	f3bf 8f6f 	isb	sy
 800acca:	f3bf 8f4f 	dsb	sy
 800acce:	61bb      	str	r3, [r7, #24]
}
 800acd0:	bf00      	nop
 800acd2:	e7fe      	b.n	800acd2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800acd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acd6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800acda:	f023 0301 	bic.w	r3, r3, #1
 800acde:	b2da      	uxtb	r2, r3
 800ace0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ace2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ace6:	e03a      	b.n	800ad5e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ace8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800acee:	f043 0301 	orr.w	r3, r3, #1
 800acf2:	b2da      	uxtb	r2, r3
 800acf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acf6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800acfa:	68ba      	ldr	r2, [r7, #8]
 800acfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acfe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ad00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad02:	699b      	ldr	r3, [r3, #24]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d10a      	bne.n	800ad1e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ad08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad0c:	f383 8811 	msr	BASEPRI, r3
 800ad10:	f3bf 8f6f 	isb	sy
 800ad14:	f3bf 8f4f 	dsb	sy
 800ad18:	617b      	str	r3, [r7, #20]
}
 800ad1a:	bf00      	nop
 800ad1c:	e7fe      	b.n	800ad1c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ad1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad20:	699a      	ldr	r2, [r3, #24]
 800ad22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad24:	18d1      	adds	r1, r2, r3
 800ad26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad2c:	f7ff ff06 	bl	800ab3c <prvInsertTimerInActiveList>
					break;
 800ad30:	e015      	b.n	800ad5e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ad32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad38:	f003 0302 	and.w	r3, r3, #2
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d103      	bne.n	800ad48 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ad40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad42:	f000 fbdd 	bl	800b500 <vPortFree>
 800ad46:	e00a      	b.n	800ad5e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ad48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad4e:	f023 0301 	bic.w	r3, r3, #1
 800ad52:	b2da      	uxtb	r2, r3
 800ad54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ad5a:	e000      	b.n	800ad5e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ad5c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ad5e:	4b08      	ldr	r3, [pc, #32]	; (800ad80 <prvProcessReceivedCommands+0x1c0>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	1d39      	adds	r1, r7, #4
 800ad64:	2200      	movs	r2, #0
 800ad66:	4618      	mov	r0, r3
 800ad68:	f7fe fb9e 	bl	80094a8 <xQueueReceive>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	f47f af2a 	bne.w	800abc8 <prvProcessReceivedCommands+0x8>
	}
}
 800ad74:	bf00      	nop
 800ad76:	bf00      	nop
 800ad78:	3730      	adds	r7, #48	; 0x30
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}
 800ad7e:	bf00      	nop
 800ad80:	20000f50 	.word	0x20000f50

0800ad84 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b088      	sub	sp, #32
 800ad88:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ad8a:	e048      	b.n	800ae1e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ad8c:	4b2d      	ldr	r3, [pc, #180]	; (800ae44 <prvSwitchTimerLists+0xc0>)
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	68db      	ldr	r3, [r3, #12]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad96:	4b2b      	ldr	r3, [pc, #172]	; (800ae44 <prvSwitchTimerLists+0xc0>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	68db      	ldr	r3, [r3, #12]
 800ad9c:	68db      	ldr	r3, [r3, #12]
 800ad9e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	3304      	adds	r3, #4
 800ada4:	4618      	mov	r0, r3
 800ada6:	f7fe f813 	bl	8008dd0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	6a1b      	ldr	r3, [r3, #32]
 800adae:	68f8      	ldr	r0, [r7, #12]
 800adb0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800adb8:	f003 0304 	and.w	r3, r3, #4
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d02e      	beq.n	800ae1e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	699b      	ldr	r3, [r3, #24]
 800adc4:	693a      	ldr	r2, [r7, #16]
 800adc6:	4413      	add	r3, r2
 800adc8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800adca:	68ba      	ldr	r2, [r7, #8]
 800adcc:	693b      	ldr	r3, [r7, #16]
 800adce:	429a      	cmp	r2, r3
 800add0:	d90e      	bls.n	800adf0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	68ba      	ldr	r2, [r7, #8]
 800add6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	68fa      	ldr	r2, [r7, #12]
 800addc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800adde:	4b19      	ldr	r3, [pc, #100]	; (800ae44 <prvSwitchTimerLists+0xc0>)
 800ade0:	681a      	ldr	r2, [r3, #0]
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	3304      	adds	r3, #4
 800ade6:	4619      	mov	r1, r3
 800ade8:	4610      	mov	r0, r2
 800adea:	f7fd ffb8 	bl	8008d5e <vListInsert>
 800adee:	e016      	b.n	800ae1e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800adf0:	2300      	movs	r3, #0
 800adf2:	9300      	str	r3, [sp, #0]
 800adf4:	2300      	movs	r3, #0
 800adf6:	693a      	ldr	r2, [r7, #16]
 800adf8:	2100      	movs	r1, #0
 800adfa:	68f8      	ldr	r0, [r7, #12]
 800adfc:	f7ff fd60 	bl	800a8c0 <xTimerGenericCommand>
 800ae00:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d10a      	bne.n	800ae1e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ae08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae0c:	f383 8811 	msr	BASEPRI, r3
 800ae10:	f3bf 8f6f 	isb	sy
 800ae14:	f3bf 8f4f 	dsb	sy
 800ae18:	603b      	str	r3, [r7, #0]
}
 800ae1a:	bf00      	nop
 800ae1c:	e7fe      	b.n	800ae1c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ae1e:	4b09      	ldr	r3, [pc, #36]	; (800ae44 <prvSwitchTimerLists+0xc0>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d1b1      	bne.n	800ad8c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ae28:	4b06      	ldr	r3, [pc, #24]	; (800ae44 <prvSwitchTimerLists+0xc0>)
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ae2e:	4b06      	ldr	r3, [pc, #24]	; (800ae48 <prvSwitchTimerLists+0xc4>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	4a04      	ldr	r2, [pc, #16]	; (800ae44 <prvSwitchTimerLists+0xc0>)
 800ae34:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ae36:	4a04      	ldr	r2, [pc, #16]	; (800ae48 <prvSwitchTimerLists+0xc4>)
 800ae38:	697b      	ldr	r3, [r7, #20]
 800ae3a:	6013      	str	r3, [r2, #0]
}
 800ae3c:	bf00      	nop
 800ae3e:	3718      	adds	r7, #24
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd80      	pop	{r7, pc}
 800ae44:	20000f48 	.word	0x20000f48
 800ae48:	20000f4c 	.word	0x20000f4c

0800ae4c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b082      	sub	sp, #8
 800ae50:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ae52:	f000 f967 	bl	800b124 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ae56:	4b15      	ldr	r3, [pc, #84]	; (800aeac <prvCheckForValidListAndQueue+0x60>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d120      	bne.n	800aea0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ae5e:	4814      	ldr	r0, [pc, #80]	; (800aeb0 <prvCheckForValidListAndQueue+0x64>)
 800ae60:	f7fd ff2c 	bl	8008cbc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ae64:	4813      	ldr	r0, [pc, #76]	; (800aeb4 <prvCheckForValidListAndQueue+0x68>)
 800ae66:	f7fd ff29 	bl	8008cbc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ae6a:	4b13      	ldr	r3, [pc, #76]	; (800aeb8 <prvCheckForValidListAndQueue+0x6c>)
 800ae6c:	4a10      	ldr	r2, [pc, #64]	; (800aeb0 <prvCheckForValidListAndQueue+0x64>)
 800ae6e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ae70:	4b12      	ldr	r3, [pc, #72]	; (800aebc <prvCheckForValidListAndQueue+0x70>)
 800ae72:	4a10      	ldr	r2, [pc, #64]	; (800aeb4 <prvCheckForValidListAndQueue+0x68>)
 800ae74:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ae76:	2300      	movs	r3, #0
 800ae78:	9300      	str	r3, [sp, #0]
 800ae7a:	4b11      	ldr	r3, [pc, #68]	; (800aec0 <prvCheckForValidListAndQueue+0x74>)
 800ae7c:	4a11      	ldr	r2, [pc, #68]	; (800aec4 <prvCheckForValidListAndQueue+0x78>)
 800ae7e:	2110      	movs	r1, #16
 800ae80:	200a      	movs	r0, #10
 800ae82:	f7fe f837 	bl	8008ef4 <xQueueGenericCreateStatic>
 800ae86:	4603      	mov	r3, r0
 800ae88:	4a08      	ldr	r2, [pc, #32]	; (800aeac <prvCheckForValidListAndQueue+0x60>)
 800ae8a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ae8c:	4b07      	ldr	r3, [pc, #28]	; (800aeac <prvCheckForValidListAndQueue+0x60>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d005      	beq.n	800aea0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ae94:	4b05      	ldr	r3, [pc, #20]	; (800aeac <prvCheckForValidListAndQueue+0x60>)
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	490b      	ldr	r1, [pc, #44]	; (800aec8 <prvCheckForValidListAndQueue+0x7c>)
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	f7fe fd18 	bl	80098d0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aea0:	f000 f970 	bl	800b184 <vPortExitCritical>
}
 800aea4:	bf00      	nop
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bd80      	pop	{r7, pc}
 800aeaa:	bf00      	nop
 800aeac:	20000f50 	.word	0x20000f50
 800aeb0:	20000f20 	.word	0x20000f20
 800aeb4:	20000f34 	.word	0x20000f34
 800aeb8:	20000f48 	.word	0x20000f48
 800aebc:	20000f4c 	.word	0x20000f4c
 800aec0:	20000ffc 	.word	0x20000ffc
 800aec4:	20000f5c 	.word	0x20000f5c
 800aec8:	0800cdd4 	.word	0x0800cdd4

0800aecc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800aecc:	b480      	push	{r7}
 800aece:	b085      	sub	sp, #20
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	60f8      	str	r0, [r7, #12]
 800aed4:	60b9      	str	r1, [r7, #8]
 800aed6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	3b04      	subs	r3, #4
 800aedc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800aee4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	3b04      	subs	r3, #4
 800aeea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	f023 0201 	bic.w	r2, r3, #1
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	3b04      	subs	r3, #4
 800aefa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800aefc:	4a0c      	ldr	r2, [pc, #48]	; (800af30 <pxPortInitialiseStack+0x64>)
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	3b14      	subs	r3, #20
 800af06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800af08:	687a      	ldr	r2, [r7, #4]
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	3b04      	subs	r3, #4
 800af12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	f06f 0202 	mvn.w	r2, #2
 800af1a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	3b20      	subs	r3, #32
 800af20:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800af22:	68fb      	ldr	r3, [r7, #12]
}
 800af24:	4618      	mov	r0, r3
 800af26:	3714      	adds	r7, #20
 800af28:	46bd      	mov	sp, r7
 800af2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2e:	4770      	bx	lr
 800af30:	0800af35 	.word	0x0800af35

0800af34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800af34:	b480      	push	{r7}
 800af36:	b085      	sub	sp, #20
 800af38:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800af3a:	2300      	movs	r3, #0
 800af3c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800af3e:	4b12      	ldr	r3, [pc, #72]	; (800af88 <prvTaskExitError+0x54>)
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af46:	d00a      	beq.n	800af5e <prvTaskExitError+0x2a>
	__asm volatile
 800af48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af4c:	f383 8811 	msr	BASEPRI, r3
 800af50:	f3bf 8f6f 	isb	sy
 800af54:	f3bf 8f4f 	dsb	sy
 800af58:	60fb      	str	r3, [r7, #12]
}
 800af5a:	bf00      	nop
 800af5c:	e7fe      	b.n	800af5c <prvTaskExitError+0x28>
	__asm volatile
 800af5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af62:	f383 8811 	msr	BASEPRI, r3
 800af66:	f3bf 8f6f 	isb	sy
 800af6a:	f3bf 8f4f 	dsb	sy
 800af6e:	60bb      	str	r3, [r7, #8]
}
 800af70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800af72:	bf00      	nop
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d0fc      	beq.n	800af74 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800af7a:	bf00      	nop
 800af7c:	bf00      	nop
 800af7e:	3714      	adds	r7, #20
 800af80:	46bd      	mov	sp, r7
 800af82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af86:	4770      	bx	lr
 800af88:	2000006c 	.word	0x2000006c
 800af8c:	00000000 	.word	0x00000000

0800af90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800af90:	4b07      	ldr	r3, [pc, #28]	; (800afb0 <pxCurrentTCBConst2>)
 800af92:	6819      	ldr	r1, [r3, #0]
 800af94:	6808      	ldr	r0, [r1, #0]
 800af96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af9a:	f380 8809 	msr	PSP, r0
 800af9e:	f3bf 8f6f 	isb	sy
 800afa2:	f04f 0000 	mov.w	r0, #0
 800afa6:	f380 8811 	msr	BASEPRI, r0
 800afaa:	4770      	bx	lr
 800afac:	f3af 8000 	nop.w

0800afb0 <pxCurrentTCBConst2>:
 800afb0:	20000a20 	.word	0x20000a20
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800afb4:	bf00      	nop
 800afb6:	bf00      	nop

0800afb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800afb8:	4808      	ldr	r0, [pc, #32]	; (800afdc <prvPortStartFirstTask+0x24>)
 800afba:	6800      	ldr	r0, [r0, #0]
 800afbc:	6800      	ldr	r0, [r0, #0]
 800afbe:	f380 8808 	msr	MSP, r0
 800afc2:	f04f 0000 	mov.w	r0, #0
 800afc6:	f380 8814 	msr	CONTROL, r0
 800afca:	b662      	cpsie	i
 800afcc:	b661      	cpsie	f
 800afce:	f3bf 8f4f 	dsb	sy
 800afd2:	f3bf 8f6f 	isb	sy
 800afd6:	df00      	svc	0
 800afd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800afda:	bf00      	nop
 800afdc:	e000ed08 	.word	0xe000ed08

0800afe0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b086      	sub	sp, #24
 800afe4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800afe6:	4b46      	ldr	r3, [pc, #280]	; (800b100 <xPortStartScheduler+0x120>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	4a46      	ldr	r2, [pc, #280]	; (800b104 <xPortStartScheduler+0x124>)
 800afec:	4293      	cmp	r3, r2
 800afee:	d10a      	bne.n	800b006 <xPortStartScheduler+0x26>
	__asm volatile
 800aff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aff4:	f383 8811 	msr	BASEPRI, r3
 800aff8:	f3bf 8f6f 	isb	sy
 800affc:	f3bf 8f4f 	dsb	sy
 800b000:	613b      	str	r3, [r7, #16]
}
 800b002:	bf00      	nop
 800b004:	e7fe      	b.n	800b004 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b006:	4b3e      	ldr	r3, [pc, #248]	; (800b100 <xPortStartScheduler+0x120>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	4a3f      	ldr	r2, [pc, #252]	; (800b108 <xPortStartScheduler+0x128>)
 800b00c:	4293      	cmp	r3, r2
 800b00e:	d10a      	bne.n	800b026 <xPortStartScheduler+0x46>
	__asm volatile
 800b010:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b014:	f383 8811 	msr	BASEPRI, r3
 800b018:	f3bf 8f6f 	isb	sy
 800b01c:	f3bf 8f4f 	dsb	sy
 800b020:	60fb      	str	r3, [r7, #12]
}
 800b022:	bf00      	nop
 800b024:	e7fe      	b.n	800b024 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b026:	4b39      	ldr	r3, [pc, #228]	; (800b10c <xPortStartScheduler+0x12c>)
 800b028:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b02a:	697b      	ldr	r3, [r7, #20]
 800b02c:	781b      	ldrb	r3, [r3, #0]
 800b02e:	b2db      	uxtb	r3, r3
 800b030:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b032:	697b      	ldr	r3, [r7, #20]
 800b034:	22ff      	movs	r2, #255	; 0xff
 800b036:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b038:	697b      	ldr	r3, [r7, #20]
 800b03a:	781b      	ldrb	r3, [r3, #0]
 800b03c:	b2db      	uxtb	r3, r3
 800b03e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b040:	78fb      	ldrb	r3, [r7, #3]
 800b042:	b2db      	uxtb	r3, r3
 800b044:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b048:	b2da      	uxtb	r2, r3
 800b04a:	4b31      	ldr	r3, [pc, #196]	; (800b110 <xPortStartScheduler+0x130>)
 800b04c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b04e:	4b31      	ldr	r3, [pc, #196]	; (800b114 <xPortStartScheduler+0x134>)
 800b050:	2207      	movs	r2, #7
 800b052:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b054:	e009      	b.n	800b06a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b056:	4b2f      	ldr	r3, [pc, #188]	; (800b114 <xPortStartScheduler+0x134>)
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	3b01      	subs	r3, #1
 800b05c:	4a2d      	ldr	r2, [pc, #180]	; (800b114 <xPortStartScheduler+0x134>)
 800b05e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b060:	78fb      	ldrb	r3, [r7, #3]
 800b062:	b2db      	uxtb	r3, r3
 800b064:	005b      	lsls	r3, r3, #1
 800b066:	b2db      	uxtb	r3, r3
 800b068:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b06a:	78fb      	ldrb	r3, [r7, #3]
 800b06c:	b2db      	uxtb	r3, r3
 800b06e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b072:	2b80      	cmp	r3, #128	; 0x80
 800b074:	d0ef      	beq.n	800b056 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b076:	4b27      	ldr	r3, [pc, #156]	; (800b114 <xPortStartScheduler+0x134>)
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	f1c3 0307 	rsb	r3, r3, #7
 800b07e:	2b04      	cmp	r3, #4
 800b080:	d00a      	beq.n	800b098 <xPortStartScheduler+0xb8>
	__asm volatile
 800b082:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b086:	f383 8811 	msr	BASEPRI, r3
 800b08a:	f3bf 8f6f 	isb	sy
 800b08e:	f3bf 8f4f 	dsb	sy
 800b092:	60bb      	str	r3, [r7, #8]
}
 800b094:	bf00      	nop
 800b096:	e7fe      	b.n	800b096 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b098:	4b1e      	ldr	r3, [pc, #120]	; (800b114 <xPortStartScheduler+0x134>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	021b      	lsls	r3, r3, #8
 800b09e:	4a1d      	ldr	r2, [pc, #116]	; (800b114 <xPortStartScheduler+0x134>)
 800b0a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b0a2:	4b1c      	ldr	r3, [pc, #112]	; (800b114 <xPortStartScheduler+0x134>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b0aa:	4a1a      	ldr	r2, [pc, #104]	; (800b114 <xPortStartScheduler+0x134>)
 800b0ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	b2da      	uxtb	r2, r3
 800b0b2:	697b      	ldr	r3, [r7, #20]
 800b0b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b0b6:	4b18      	ldr	r3, [pc, #96]	; (800b118 <xPortStartScheduler+0x138>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	4a17      	ldr	r2, [pc, #92]	; (800b118 <xPortStartScheduler+0x138>)
 800b0bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b0c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b0c2:	4b15      	ldr	r3, [pc, #84]	; (800b118 <xPortStartScheduler+0x138>)
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	4a14      	ldr	r2, [pc, #80]	; (800b118 <xPortStartScheduler+0x138>)
 800b0c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b0cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b0ce:	f000 f8dd 	bl	800b28c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b0d2:	4b12      	ldr	r3, [pc, #72]	; (800b11c <xPortStartScheduler+0x13c>)
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b0d8:	f000 f8fc 	bl	800b2d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b0dc:	4b10      	ldr	r3, [pc, #64]	; (800b120 <xPortStartScheduler+0x140>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	4a0f      	ldr	r2, [pc, #60]	; (800b120 <xPortStartScheduler+0x140>)
 800b0e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b0e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b0e8:	f7ff ff66 	bl	800afb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b0ec:	f7ff f84a 	bl	800a184 <vTaskSwitchContext>
	prvTaskExitError();
 800b0f0:	f7ff ff20 	bl	800af34 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b0f4:	2300      	movs	r3, #0
}
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	3718      	adds	r7, #24
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd80      	pop	{r7, pc}
 800b0fe:	bf00      	nop
 800b100:	e000ed00 	.word	0xe000ed00
 800b104:	410fc271 	.word	0x410fc271
 800b108:	410fc270 	.word	0x410fc270
 800b10c:	e000e400 	.word	0xe000e400
 800b110:	2000104c 	.word	0x2000104c
 800b114:	20001050 	.word	0x20001050
 800b118:	e000ed20 	.word	0xe000ed20
 800b11c:	2000006c 	.word	0x2000006c
 800b120:	e000ef34 	.word	0xe000ef34

0800b124 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b124:	b480      	push	{r7}
 800b126:	b083      	sub	sp, #12
 800b128:	af00      	add	r7, sp, #0
	__asm volatile
 800b12a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b12e:	f383 8811 	msr	BASEPRI, r3
 800b132:	f3bf 8f6f 	isb	sy
 800b136:	f3bf 8f4f 	dsb	sy
 800b13a:	607b      	str	r3, [r7, #4]
}
 800b13c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b13e:	4b0f      	ldr	r3, [pc, #60]	; (800b17c <vPortEnterCritical+0x58>)
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	3301      	adds	r3, #1
 800b144:	4a0d      	ldr	r2, [pc, #52]	; (800b17c <vPortEnterCritical+0x58>)
 800b146:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b148:	4b0c      	ldr	r3, [pc, #48]	; (800b17c <vPortEnterCritical+0x58>)
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	2b01      	cmp	r3, #1
 800b14e:	d10f      	bne.n	800b170 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b150:	4b0b      	ldr	r3, [pc, #44]	; (800b180 <vPortEnterCritical+0x5c>)
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	b2db      	uxtb	r3, r3
 800b156:	2b00      	cmp	r3, #0
 800b158:	d00a      	beq.n	800b170 <vPortEnterCritical+0x4c>
	__asm volatile
 800b15a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b15e:	f383 8811 	msr	BASEPRI, r3
 800b162:	f3bf 8f6f 	isb	sy
 800b166:	f3bf 8f4f 	dsb	sy
 800b16a:	603b      	str	r3, [r7, #0]
}
 800b16c:	bf00      	nop
 800b16e:	e7fe      	b.n	800b16e <vPortEnterCritical+0x4a>
	}
}
 800b170:	bf00      	nop
 800b172:	370c      	adds	r7, #12
 800b174:	46bd      	mov	sp, r7
 800b176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17a:	4770      	bx	lr
 800b17c:	2000006c 	.word	0x2000006c
 800b180:	e000ed04 	.word	0xe000ed04

0800b184 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b184:	b480      	push	{r7}
 800b186:	b083      	sub	sp, #12
 800b188:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b18a:	4b12      	ldr	r3, [pc, #72]	; (800b1d4 <vPortExitCritical+0x50>)
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d10a      	bne.n	800b1a8 <vPortExitCritical+0x24>
	__asm volatile
 800b192:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b196:	f383 8811 	msr	BASEPRI, r3
 800b19a:	f3bf 8f6f 	isb	sy
 800b19e:	f3bf 8f4f 	dsb	sy
 800b1a2:	607b      	str	r3, [r7, #4]
}
 800b1a4:	bf00      	nop
 800b1a6:	e7fe      	b.n	800b1a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b1a8:	4b0a      	ldr	r3, [pc, #40]	; (800b1d4 <vPortExitCritical+0x50>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	3b01      	subs	r3, #1
 800b1ae:	4a09      	ldr	r2, [pc, #36]	; (800b1d4 <vPortExitCritical+0x50>)
 800b1b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b1b2:	4b08      	ldr	r3, [pc, #32]	; (800b1d4 <vPortExitCritical+0x50>)
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d105      	bne.n	800b1c6 <vPortExitCritical+0x42>
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	f383 8811 	msr	BASEPRI, r3
}
 800b1c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b1c6:	bf00      	nop
 800b1c8:	370c      	adds	r7, #12
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d0:	4770      	bx	lr
 800b1d2:	bf00      	nop
 800b1d4:	2000006c 	.word	0x2000006c
	...

0800b1e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b1e0:	f3ef 8009 	mrs	r0, PSP
 800b1e4:	f3bf 8f6f 	isb	sy
 800b1e8:	4b15      	ldr	r3, [pc, #84]	; (800b240 <pxCurrentTCBConst>)
 800b1ea:	681a      	ldr	r2, [r3, #0]
 800b1ec:	f01e 0f10 	tst.w	lr, #16
 800b1f0:	bf08      	it	eq
 800b1f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b1f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1fa:	6010      	str	r0, [r2, #0]
 800b1fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b200:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b204:	f380 8811 	msr	BASEPRI, r0
 800b208:	f3bf 8f4f 	dsb	sy
 800b20c:	f3bf 8f6f 	isb	sy
 800b210:	f7fe ffb8 	bl	800a184 <vTaskSwitchContext>
 800b214:	f04f 0000 	mov.w	r0, #0
 800b218:	f380 8811 	msr	BASEPRI, r0
 800b21c:	bc09      	pop	{r0, r3}
 800b21e:	6819      	ldr	r1, [r3, #0]
 800b220:	6808      	ldr	r0, [r1, #0]
 800b222:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b226:	f01e 0f10 	tst.w	lr, #16
 800b22a:	bf08      	it	eq
 800b22c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b230:	f380 8809 	msr	PSP, r0
 800b234:	f3bf 8f6f 	isb	sy
 800b238:	4770      	bx	lr
 800b23a:	bf00      	nop
 800b23c:	f3af 8000 	nop.w

0800b240 <pxCurrentTCBConst>:
 800b240:	20000a20 	.word	0x20000a20
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b244:	bf00      	nop
 800b246:	bf00      	nop

0800b248 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b082      	sub	sp, #8
 800b24c:	af00      	add	r7, sp, #0
	__asm volatile
 800b24e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b252:	f383 8811 	msr	BASEPRI, r3
 800b256:	f3bf 8f6f 	isb	sy
 800b25a:	f3bf 8f4f 	dsb	sy
 800b25e:	607b      	str	r3, [r7, #4]
}
 800b260:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b262:	f7fe fed5 	bl	800a010 <xTaskIncrementTick>
 800b266:	4603      	mov	r3, r0
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d003      	beq.n	800b274 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b26c:	4b06      	ldr	r3, [pc, #24]	; (800b288 <xPortSysTickHandler+0x40>)
 800b26e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b272:	601a      	str	r2, [r3, #0]
 800b274:	2300      	movs	r3, #0
 800b276:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	f383 8811 	msr	BASEPRI, r3
}
 800b27e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b280:	bf00      	nop
 800b282:	3708      	adds	r7, #8
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}
 800b288:	e000ed04 	.word	0xe000ed04

0800b28c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b28c:	b480      	push	{r7}
 800b28e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b290:	4b0b      	ldr	r3, [pc, #44]	; (800b2c0 <vPortSetupTimerInterrupt+0x34>)
 800b292:	2200      	movs	r2, #0
 800b294:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b296:	4b0b      	ldr	r3, [pc, #44]	; (800b2c4 <vPortSetupTimerInterrupt+0x38>)
 800b298:	2200      	movs	r2, #0
 800b29a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b29c:	4b0a      	ldr	r3, [pc, #40]	; (800b2c8 <vPortSetupTimerInterrupt+0x3c>)
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	4a0a      	ldr	r2, [pc, #40]	; (800b2cc <vPortSetupTimerInterrupt+0x40>)
 800b2a2:	fba2 2303 	umull	r2, r3, r2, r3
 800b2a6:	099b      	lsrs	r3, r3, #6
 800b2a8:	4a09      	ldr	r2, [pc, #36]	; (800b2d0 <vPortSetupTimerInterrupt+0x44>)
 800b2aa:	3b01      	subs	r3, #1
 800b2ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b2ae:	4b04      	ldr	r3, [pc, #16]	; (800b2c0 <vPortSetupTimerInterrupt+0x34>)
 800b2b0:	2207      	movs	r2, #7
 800b2b2:	601a      	str	r2, [r3, #0]
}
 800b2b4:	bf00      	nop
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2bc:	4770      	bx	lr
 800b2be:	bf00      	nop
 800b2c0:	e000e010 	.word	0xe000e010
 800b2c4:	e000e018 	.word	0xe000e018
 800b2c8:	20000008 	.word	0x20000008
 800b2cc:	10624dd3 	.word	0x10624dd3
 800b2d0:	e000e014 	.word	0xe000e014

0800b2d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b2d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b2e4 <vPortEnableVFP+0x10>
 800b2d8:	6801      	ldr	r1, [r0, #0]
 800b2da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b2de:	6001      	str	r1, [r0, #0]
 800b2e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b2e2:	bf00      	nop
 800b2e4:	e000ed88 	.word	0xe000ed88

0800b2e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b2e8:	b480      	push	{r7}
 800b2ea:	b085      	sub	sp, #20
 800b2ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b2ee:	f3ef 8305 	mrs	r3, IPSR
 800b2f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	2b0f      	cmp	r3, #15
 800b2f8:	d914      	bls.n	800b324 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b2fa:	4a17      	ldr	r2, [pc, #92]	; (800b358 <vPortValidateInterruptPriority+0x70>)
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	4413      	add	r3, r2
 800b300:	781b      	ldrb	r3, [r3, #0]
 800b302:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b304:	4b15      	ldr	r3, [pc, #84]	; (800b35c <vPortValidateInterruptPriority+0x74>)
 800b306:	781b      	ldrb	r3, [r3, #0]
 800b308:	7afa      	ldrb	r2, [r7, #11]
 800b30a:	429a      	cmp	r2, r3
 800b30c:	d20a      	bcs.n	800b324 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b30e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b312:	f383 8811 	msr	BASEPRI, r3
 800b316:	f3bf 8f6f 	isb	sy
 800b31a:	f3bf 8f4f 	dsb	sy
 800b31e:	607b      	str	r3, [r7, #4]
}
 800b320:	bf00      	nop
 800b322:	e7fe      	b.n	800b322 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b324:	4b0e      	ldr	r3, [pc, #56]	; (800b360 <vPortValidateInterruptPriority+0x78>)
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b32c:	4b0d      	ldr	r3, [pc, #52]	; (800b364 <vPortValidateInterruptPriority+0x7c>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	429a      	cmp	r2, r3
 800b332:	d90a      	bls.n	800b34a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b334:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b338:	f383 8811 	msr	BASEPRI, r3
 800b33c:	f3bf 8f6f 	isb	sy
 800b340:	f3bf 8f4f 	dsb	sy
 800b344:	603b      	str	r3, [r7, #0]
}
 800b346:	bf00      	nop
 800b348:	e7fe      	b.n	800b348 <vPortValidateInterruptPriority+0x60>
	}
 800b34a:	bf00      	nop
 800b34c:	3714      	adds	r7, #20
 800b34e:	46bd      	mov	sp, r7
 800b350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b354:	4770      	bx	lr
 800b356:	bf00      	nop
 800b358:	e000e3f0 	.word	0xe000e3f0
 800b35c:	2000104c 	.word	0x2000104c
 800b360:	e000ed0c 	.word	0xe000ed0c
 800b364:	20001050 	.word	0x20001050

0800b368 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b08a      	sub	sp, #40	; 0x28
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b370:	2300      	movs	r3, #0
 800b372:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b374:	f7fe fd90 	bl	8009e98 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b378:	4b5b      	ldr	r3, [pc, #364]	; (800b4e8 <pvPortMalloc+0x180>)
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d101      	bne.n	800b384 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b380:	f000 f920 	bl	800b5c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b384:	4b59      	ldr	r3, [pc, #356]	; (800b4ec <pvPortMalloc+0x184>)
 800b386:	681a      	ldr	r2, [r3, #0]
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	4013      	ands	r3, r2
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	f040 8093 	bne.w	800b4b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d01d      	beq.n	800b3d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b398:	2208      	movs	r2, #8
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	4413      	add	r3, r2
 800b39e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f003 0307 	and.w	r3, r3, #7
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d014      	beq.n	800b3d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f023 0307 	bic.w	r3, r3, #7
 800b3b0:	3308      	adds	r3, #8
 800b3b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	f003 0307 	and.w	r3, r3, #7
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d00a      	beq.n	800b3d4 <pvPortMalloc+0x6c>
	__asm volatile
 800b3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3c2:	f383 8811 	msr	BASEPRI, r3
 800b3c6:	f3bf 8f6f 	isb	sy
 800b3ca:	f3bf 8f4f 	dsb	sy
 800b3ce:	617b      	str	r3, [r7, #20]
}
 800b3d0:	bf00      	nop
 800b3d2:	e7fe      	b.n	800b3d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d06e      	beq.n	800b4b8 <pvPortMalloc+0x150>
 800b3da:	4b45      	ldr	r3, [pc, #276]	; (800b4f0 <pvPortMalloc+0x188>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	687a      	ldr	r2, [r7, #4]
 800b3e0:	429a      	cmp	r2, r3
 800b3e2:	d869      	bhi.n	800b4b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b3e4:	4b43      	ldr	r3, [pc, #268]	; (800b4f4 <pvPortMalloc+0x18c>)
 800b3e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b3e8:	4b42      	ldr	r3, [pc, #264]	; (800b4f4 <pvPortMalloc+0x18c>)
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b3ee:	e004      	b.n	800b3fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b3fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3fc:	685b      	ldr	r3, [r3, #4]
 800b3fe:	687a      	ldr	r2, [r7, #4]
 800b400:	429a      	cmp	r2, r3
 800b402:	d903      	bls.n	800b40c <pvPortMalloc+0xa4>
 800b404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d1f1      	bne.n	800b3f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b40c:	4b36      	ldr	r3, [pc, #216]	; (800b4e8 <pvPortMalloc+0x180>)
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b412:	429a      	cmp	r2, r3
 800b414:	d050      	beq.n	800b4b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b416:	6a3b      	ldr	r3, [r7, #32]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	2208      	movs	r2, #8
 800b41c:	4413      	add	r3, r2
 800b41e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b422:	681a      	ldr	r2, [r3, #0]
 800b424:	6a3b      	ldr	r3, [r7, #32]
 800b426:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b42a:	685a      	ldr	r2, [r3, #4]
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	1ad2      	subs	r2, r2, r3
 800b430:	2308      	movs	r3, #8
 800b432:	005b      	lsls	r3, r3, #1
 800b434:	429a      	cmp	r2, r3
 800b436:	d91f      	bls.n	800b478 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	4413      	add	r3, r2
 800b43e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b440:	69bb      	ldr	r3, [r7, #24]
 800b442:	f003 0307 	and.w	r3, r3, #7
 800b446:	2b00      	cmp	r3, #0
 800b448:	d00a      	beq.n	800b460 <pvPortMalloc+0xf8>
	__asm volatile
 800b44a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b44e:	f383 8811 	msr	BASEPRI, r3
 800b452:	f3bf 8f6f 	isb	sy
 800b456:	f3bf 8f4f 	dsb	sy
 800b45a:	613b      	str	r3, [r7, #16]
}
 800b45c:	bf00      	nop
 800b45e:	e7fe      	b.n	800b45e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b462:	685a      	ldr	r2, [r3, #4]
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	1ad2      	subs	r2, r2, r3
 800b468:	69bb      	ldr	r3, [r7, #24]
 800b46a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b46e:	687a      	ldr	r2, [r7, #4]
 800b470:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b472:	69b8      	ldr	r0, [r7, #24]
 800b474:	f000 f908 	bl	800b688 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b478:	4b1d      	ldr	r3, [pc, #116]	; (800b4f0 <pvPortMalloc+0x188>)
 800b47a:	681a      	ldr	r2, [r3, #0]
 800b47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b47e:	685b      	ldr	r3, [r3, #4]
 800b480:	1ad3      	subs	r3, r2, r3
 800b482:	4a1b      	ldr	r2, [pc, #108]	; (800b4f0 <pvPortMalloc+0x188>)
 800b484:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b486:	4b1a      	ldr	r3, [pc, #104]	; (800b4f0 <pvPortMalloc+0x188>)
 800b488:	681a      	ldr	r2, [r3, #0]
 800b48a:	4b1b      	ldr	r3, [pc, #108]	; (800b4f8 <pvPortMalloc+0x190>)
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	429a      	cmp	r2, r3
 800b490:	d203      	bcs.n	800b49a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b492:	4b17      	ldr	r3, [pc, #92]	; (800b4f0 <pvPortMalloc+0x188>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	4a18      	ldr	r2, [pc, #96]	; (800b4f8 <pvPortMalloc+0x190>)
 800b498:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b49a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b49c:	685a      	ldr	r2, [r3, #4]
 800b49e:	4b13      	ldr	r3, [pc, #76]	; (800b4ec <pvPortMalloc+0x184>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	431a      	orrs	r2, r3
 800b4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b4ae:	4b13      	ldr	r3, [pc, #76]	; (800b4fc <pvPortMalloc+0x194>)
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	3301      	adds	r3, #1
 800b4b4:	4a11      	ldr	r2, [pc, #68]	; (800b4fc <pvPortMalloc+0x194>)
 800b4b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b4b8:	f7fe fcfc 	bl	8009eb4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b4bc:	69fb      	ldr	r3, [r7, #28]
 800b4be:	f003 0307 	and.w	r3, r3, #7
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d00a      	beq.n	800b4dc <pvPortMalloc+0x174>
	__asm volatile
 800b4c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ca:	f383 8811 	msr	BASEPRI, r3
 800b4ce:	f3bf 8f6f 	isb	sy
 800b4d2:	f3bf 8f4f 	dsb	sy
 800b4d6:	60fb      	str	r3, [r7, #12]
}
 800b4d8:	bf00      	nop
 800b4da:	e7fe      	b.n	800b4da <pvPortMalloc+0x172>
	return pvReturn;
 800b4dc:	69fb      	ldr	r3, [r7, #28]
}
 800b4de:	4618      	mov	r0, r3
 800b4e0:	3728      	adds	r7, #40	; 0x28
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	bd80      	pop	{r7, pc}
 800b4e6:	bf00      	nop
 800b4e8:	20004c5c 	.word	0x20004c5c
 800b4ec:	20004c70 	.word	0x20004c70
 800b4f0:	20004c60 	.word	0x20004c60
 800b4f4:	20004c54 	.word	0x20004c54
 800b4f8:	20004c64 	.word	0x20004c64
 800b4fc:	20004c68 	.word	0x20004c68

0800b500 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b086      	sub	sp, #24
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d04d      	beq.n	800b5ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b512:	2308      	movs	r3, #8
 800b514:	425b      	negs	r3, r3
 800b516:	697a      	ldr	r2, [r7, #20]
 800b518:	4413      	add	r3, r2
 800b51a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b51c:	697b      	ldr	r3, [r7, #20]
 800b51e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b520:	693b      	ldr	r3, [r7, #16]
 800b522:	685a      	ldr	r2, [r3, #4]
 800b524:	4b24      	ldr	r3, [pc, #144]	; (800b5b8 <vPortFree+0xb8>)
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	4013      	ands	r3, r2
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d10a      	bne.n	800b544 <vPortFree+0x44>
	__asm volatile
 800b52e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b532:	f383 8811 	msr	BASEPRI, r3
 800b536:	f3bf 8f6f 	isb	sy
 800b53a:	f3bf 8f4f 	dsb	sy
 800b53e:	60fb      	str	r3, [r7, #12]
}
 800b540:	bf00      	nop
 800b542:	e7fe      	b.n	800b542 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b544:	693b      	ldr	r3, [r7, #16]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d00a      	beq.n	800b562 <vPortFree+0x62>
	__asm volatile
 800b54c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b550:	f383 8811 	msr	BASEPRI, r3
 800b554:	f3bf 8f6f 	isb	sy
 800b558:	f3bf 8f4f 	dsb	sy
 800b55c:	60bb      	str	r3, [r7, #8]
}
 800b55e:	bf00      	nop
 800b560:	e7fe      	b.n	800b560 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b562:	693b      	ldr	r3, [r7, #16]
 800b564:	685a      	ldr	r2, [r3, #4]
 800b566:	4b14      	ldr	r3, [pc, #80]	; (800b5b8 <vPortFree+0xb8>)
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	4013      	ands	r3, r2
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d01e      	beq.n	800b5ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b570:	693b      	ldr	r3, [r7, #16]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d11a      	bne.n	800b5ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b578:	693b      	ldr	r3, [r7, #16]
 800b57a:	685a      	ldr	r2, [r3, #4]
 800b57c:	4b0e      	ldr	r3, [pc, #56]	; (800b5b8 <vPortFree+0xb8>)
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	43db      	mvns	r3, r3
 800b582:	401a      	ands	r2, r3
 800b584:	693b      	ldr	r3, [r7, #16]
 800b586:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b588:	f7fe fc86 	bl	8009e98 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b58c:	693b      	ldr	r3, [r7, #16]
 800b58e:	685a      	ldr	r2, [r3, #4]
 800b590:	4b0a      	ldr	r3, [pc, #40]	; (800b5bc <vPortFree+0xbc>)
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	4413      	add	r3, r2
 800b596:	4a09      	ldr	r2, [pc, #36]	; (800b5bc <vPortFree+0xbc>)
 800b598:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b59a:	6938      	ldr	r0, [r7, #16]
 800b59c:	f000 f874 	bl	800b688 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b5a0:	4b07      	ldr	r3, [pc, #28]	; (800b5c0 <vPortFree+0xc0>)
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	3301      	adds	r3, #1
 800b5a6:	4a06      	ldr	r2, [pc, #24]	; (800b5c0 <vPortFree+0xc0>)
 800b5a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b5aa:	f7fe fc83 	bl	8009eb4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b5ae:	bf00      	nop
 800b5b0:	3718      	adds	r7, #24
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}
 800b5b6:	bf00      	nop
 800b5b8:	20004c70 	.word	0x20004c70
 800b5bc:	20004c60 	.word	0x20004c60
 800b5c0:	20004c6c 	.word	0x20004c6c

0800b5c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b5c4:	b480      	push	{r7}
 800b5c6:	b085      	sub	sp, #20
 800b5c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b5ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b5ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b5d0:	4b27      	ldr	r3, [pc, #156]	; (800b670 <prvHeapInit+0xac>)
 800b5d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	f003 0307 	and.w	r3, r3, #7
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d00c      	beq.n	800b5f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	3307      	adds	r3, #7
 800b5e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	f023 0307 	bic.w	r3, r3, #7
 800b5ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b5ec:	68ba      	ldr	r2, [r7, #8]
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	1ad3      	subs	r3, r2, r3
 800b5f2:	4a1f      	ldr	r2, [pc, #124]	; (800b670 <prvHeapInit+0xac>)
 800b5f4:	4413      	add	r3, r2
 800b5f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b5fc:	4a1d      	ldr	r2, [pc, #116]	; (800b674 <prvHeapInit+0xb0>)
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b602:	4b1c      	ldr	r3, [pc, #112]	; (800b674 <prvHeapInit+0xb0>)
 800b604:	2200      	movs	r2, #0
 800b606:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	68ba      	ldr	r2, [r7, #8]
 800b60c:	4413      	add	r3, r2
 800b60e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b610:	2208      	movs	r2, #8
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	1a9b      	subs	r3, r3, r2
 800b616:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	f023 0307 	bic.w	r3, r3, #7
 800b61e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	4a15      	ldr	r2, [pc, #84]	; (800b678 <prvHeapInit+0xb4>)
 800b624:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b626:	4b14      	ldr	r3, [pc, #80]	; (800b678 <prvHeapInit+0xb4>)
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	2200      	movs	r2, #0
 800b62c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b62e:	4b12      	ldr	r3, [pc, #72]	; (800b678 <prvHeapInit+0xb4>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	2200      	movs	r2, #0
 800b634:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	68fa      	ldr	r2, [r7, #12]
 800b63e:	1ad2      	subs	r2, r2, r3
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b644:	4b0c      	ldr	r3, [pc, #48]	; (800b678 <prvHeapInit+0xb4>)
 800b646:	681a      	ldr	r2, [r3, #0]
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b64c:	683b      	ldr	r3, [r7, #0]
 800b64e:	685b      	ldr	r3, [r3, #4]
 800b650:	4a0a      	ldr	r2, [pc, #40]	; (800b67c <prvHeapInit+0xb8>)
 800b652:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	685b      	ldr	r3, [r3, #4]
 800b658:	4a09      	ldr	r2, [pc, #36]	; (800b680 <prvHeapInit+0xbc>)
 800b65a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b65c:	4b09      	ldr	r3, [pc, #36]	; (800b684 <prvHeapInit+0xc0>)
 800b65e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b662:	601a      	str	r2, [r3, #0]
}
 800b664:	bf00      	nop
 800b666:	3714      	adds	r7, #20
 800b668:	46bd      	mov	sp, r7
 800b66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66e:	4770      	bx	lr
 800b670:	20001054 	.word	0x20001054
 800b674:	20004c54 	.word	0x20004c54
 800b678:	20004c5c 	.word	0x20004c5c
 800b67c:	20004c64 	.word	0x20004c64
 800b680:	20004c60 	.word	0x20004c60
 800b684:	20004c70 	.word	0x20004c70

0800b688 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b688:	b480      	push	{r7}
 800b68a:	b085      	sub	sp, #20
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b690:	4b28      	ldr	r3, [pc, #160]	; (800b734 <prvInsertBlockIntoFreeList+0xac>)
 800b692:	60fb      	str	r3, [r7, #12]
 800b694:	e002      	b.n	800b69c <prvInsertBlockIntoFreeList+0x14>
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	60fb      	str	r3, [r7, #12]
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	687a      	ldr	r2, [r7, #4]
 800b6a2:	429a      	cmp	r2, r3
 800b6a4:	d8f7      	bhi.n	800b696 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	685b      	ldr	r3, [r3, #4]
 800b6ae:	68ba      	ldr	r2, [r7, #8]
 800b6b0:	4413      	add	r3, r2
 800b6b2:	687a      	ldr	r2, [r7, #4]
 800b6b4:	429a      	cmp	r2, r3
 800b6b6:	d108      	bne.n	800b6ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	685a      	ldr	r2, [r3, #4]
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	685b      	ldr	r3, [r3, #4]
 800b6c0:	441a      	add	r2, r3
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	685b      	ldr	r3, [r3, #4]
 800b6d2:	68ba      	ldr	r2, [r7, #8]
 800b6d4:	441a      	add	r2, r3
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	429a      	cmp	r2, r3
 800b6dc:	d118      	bne.n	800b710 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	681a      	ldr	r2, [r3, #0]
 800b6e2:	4b15      	ldr	r3, [pc, #84]	; (800b738 <prvInsertBlockIntoFreeList+0xb0>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	429a      	cmp	r2, r3
 800b6e8:	d00d      	beq.n	800b706 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	685a      	ldr	r2, [r3, #4]
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	685b      	ldr	r3, [r3, #4]
 800b6f4:	441a      	add	r2, r3
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	681a      	ldr	r2, [r3, #0]
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	601a      	str	r2, [r3, #0]
 800b704:	e008      	b.n	800b718 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b706:	4b0c      	ldr	r3, [pc, #48]	; (800b738 <prvInsertBlockIntoFreeList+0xb0>)
 800b708:	681a      	ldr	r2, [r3, #0]
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	601a      	str	r2, [r3, #0]
 800b70e:	e003      	b.n	800b718 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	681a      	ldr	r2, [r3, #0]
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b718:	68fa      	ldr	r2, [r7, #12]
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	429a      	cmp	r2, r3
 800b71e:	d002      	beq.n	800b726 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	687a      	ldr	r2, [r7, #4]
 800b724:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b726:	bf00      	nop
 800b728:	3714      	adds	r7, #20
 800b72a:	46bd      	mov	sp, r7
 800b72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b730:	4770      	bx	lr
 800b732:	bf00      	nop
 800b734:	20004c54 	.word	0x20004c54
 800b738:	20004c5c 	.word	0x20004c5c

0800b73c <__errno>:
 800b73c:	4b01      	ldr	r3, [pc, #4]	; (800b744 <__errno+0x8>)
 800b73e:	6818      	ldr	r0, [r3, #0]
 800b740:	4770      	bx	lr
 800b742:	bf00      	nop
 800b744:	20000070 	.word	0x20000070

0800b748 <__libc_init_array>:
 800b748:	b570      	push	{r4, r5, r6, lr}
 800b74a:	4d0d      	ldr	r5, [pc, #52]	; (800b780 <__libc_init_array+0x38>)
 800b74c:	4c0d      	ldr	r4, [pc, #52]	; (800b784 <__libc_init_array+0x3c>)
 800b74e:	1b64      	subs	r4, r4, r5
 800b750:	10a4      	asrs	r4, r4, #2
 800b752:	2600      	movs	r6, #0
 800b754:	42a6      	cmp	r6, r4
 800b756:	d109      	bne.n	800b76c <__libc_init_array+0x24>
 800b758:	4d0b      	ldr	r5, [pc, #44]	; (800b788 <__libc_init_array+0x40>)
 800b75a:	4c0c      	ldr	r4, [pc, #48]	; (800b78c <__libc_init_array+0x44>)
 800b75c:	f001 fae0 	bl	800cd20 <_init>
 800b760:	1b64      	subs	r4, r4, r5
 800b762:	10a4      	asrs	r4, r4, #2
 800b764:	2600      	movs	r6, #0
 800b766:	42a6      	cmp	r6, r4
 800b768:	d105      	bne.n	800b776 <__libc_init_array+0x2e>
 800b76a:	bd70      	pop	{r4, r5, r6, pc}
 800b76c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b770:	4798      	blx	r3
 800b772:	3601      	adds	r6, #1
 800b774:	e7ee      	b.n	800b754 <__libc_init_array+0xc>
 800b776:	f855 3b04 	ldr.w	r3, [r5], #4
 800b77a:	4798      	blx	r3
 800b77c:	3601      	adds	r6, #1
 800b77e:	e7f2      	b.n	800b766 <__libc_init_array+0x1e>
 800b780:	0800fe04 	.word	0x0800fe04
 800b784:	0800fe04 	.word	0x0800fe04
 800b788:	0800fe04 	.word	0x0800fe04
 800b78c:	0800fe08 	.word	0x0800fe08

0800b790 <__itoa>:
 800b790:	1e93      	subs	r3, r2, #2
 800b792:	2b22      	cmp	r3, #34	; 0x22
 800b794:	b510      	push	{r4, lr}
 800b796:	460c      	mov	r4, r1
 800b798:	d904      	bls.n	800b7a4 <__itoa+0x14>
 800b79a:	2300      	movs	r3, #0
 800b79c:	700b      	strb	r3, [r1, #0]
 800b79e:	461c      	mov	r4, r3
 800b7a0:	4620      	mov	r0, r4
 800b7a2:	bd10      	pop	{r4, pc}
 800b7a4:	2a0a      	cmp	r2, #10
 800b7a6:	d109      	bne.n	800b7bc <__itoa+0x2c>
 800b7a8:	2800      	cmp	r0, #0
 800b7aa:	da07      	bge.n	800b7bc <__itoa+0x2c>
 800b7ac:	232d      	movs	r3, #45	; 0x2d
 800b7ae:	700b      	strb	r3, [r1, #0]
 800b7b0:	4240      	negs	r0, r0
 800b7b2:	2101      	movs	r1, #1
 800b7b4:	4421      	add	r1, r4
 800b7b6:	f000 f961 	bl	800ba7c <__utoa>
 800b7ba:	e7f1      	b.n	800b7a0 <__itoa+0x10>
 800b7bc:	2100      	movs	r1, #0
 800b7be:	e7f9      	b.n	800b7b4 <__itoa+0x24>

0800b7c0 <itoa>:
 800b7c0:	f7ff bfe6 	b.w	800b790 <__itoa>

0800b7c4 <__retarget_lock_acquire_recursive>:
 800b7c4:	4770      	bx	lr

0800b7c6 <__retarget_lock_release_recursive>:
 800b7c6:	4770      	bx	lr

0800b7c8 <malloc>:
 800b7c8:	4b02      	ldr	r3, [pc, #8]	; (800b7d4 <malloc+0xc>)
 800b7ca:	4601      	mov	r1, r0
 800b7cc:	6818      	ldr	r0, [r3, #0]
 800b7ce:	f000 b871 	b.w	800b8b4 <_malloc_r>
 800b7d2:	bf00      	nop
 800b7d4:	20000070 	.word	0x20000070

0800b7d8 <free>:
 800b7d8:	4b02      	ldr	r3, [pc, #8]	; (800b7e4 <free+0xc>)
 800b7da:	4601      	mov	r1, r0
 800b7dc:	6818      	ldr	r0, [r3, #0]
 800b7de:	f000 b819 	b.w	800b814 <_free_r>
 800b7e2:	bf00      	nop
 800b7e4:	20000070 	.word	0x20000070

0800b7e8 <memcpy>:
 800b7e8:	440a      	add	r2, r1
 800b7ea:	4291      	cmp	r1, r2
 800b7ec:	f100 33ff 	add.w	r3, r0, #4294967295
 800b7f0:	d100      	bne.n	800b7f4 <memcpy+0xc>
 800b7f2:	4770      	bx	lr
 800b7f4:	b510      	push	{r4, lr}
 800b7f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b7fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b7fe:	4291      	cmp	r1, r2
 800b800:	d1f9      	bne.n	800b7f6 <memcpy+0xe>
 800b802:	bd10      	pop	{r4, pc}

0800b804 <memset>:
 800b804:	4402      	add	r2, r0
 800b806:	4603      	mov	r3, r0
 800b808:	4293      	cmp	r3, r2
 800b80a:	d100      	bne.n	800b80e <memset+0xa>
 800b80c:	4770      	bx	lr
 800b80e:	f803 1b01 	strb.w	r1, [r3], #1
 800b812:	e7f9      	b.n	800b808 <memset+0x4>

0800b814 <_free_r>:
 800b814:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b816:	2900      	cmp	r1, #0
 800b818:	d048      	beq.n	800b8ac <_free_r+0x98>
 800b81a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b81e:	9001      	str	r0, [sp, #4]
 800b820:	2b00      	cmp	r3, #0
 800b822:	f1a1 0404 	sub.w	r4, r1, #4
 800b826:	bfb8      	it	lt
 800b828:	18e4      	addlt	r4, r4, r3
 800b82a:	f000 f989 	bl	800bb40 <__malloc_lock>
 800b82e:	4a20      	ldr	r2, [pc, #128]	; (800b8b0 <_free_r+0x9c>)
 800b830:	9801      	ldr	r0, [sp, #4]
 800b832:	6813      	ldr	r3, [r2, #0]
 800b834:	4615      	mov	r5, r2
 800b836:	b933      	cbnz	r3, 800b846 <_free_r+0x32>
 800b838:	6063      	str	r3, [r4, #4]
 800b83a:	6014      	str	r4, [r2, #0]
 800b83c:	b003      	add	sp, #12
 800b83e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b842:	f000 b983 	b.w	800bb4c <__malloc_unlock>
 800b846:	42a3      	cmp	r3, r4
 800b848:	d90b      	bls.n	800b862 <_free_r+0x4e>
 800b84a:	6821      	ldr	r1, [r4, #0]
 800b84c:	1862      	adds	r2, r4, r1
 800b84e:	4293      	cmp	r3, r2
 800b850:	bf04      	itt	eq
 800b852:	681a      	ldreq	r2, [r3, #0]
 800b854:	685b      	ldreq	r3, [r3, #4]
 800b856:	6063      	str	r3, [r4, #4]
 800b858:	bf04      	itt	eq
 800b85a:	1852      	addeq	r2, r2, r1
 800b85c:	6022      	streq	r2, [r4, #0]
 800b85e:	602c      	str	r4, [r5, #0]
 800b860:	e7ec      	b.n	800b83c <_free_r+0x28>
 800b862:	461a      	mov	r2, r3
 800b864:	685b      	ldr	r3, [r3, #4]
 800b866:	b10b      	cbz	r3, 800b86c <_free_r+0x58>
 800b868:	42a3      	cmp	r3, r4
 800b86a:	d9fa      	bls.n	800b862 <_free_r+0x4e>
 800b86c:	6811      	ldr	r1, [r2, #0]
 800b86e:	1855      	adds	r5, r2, r1
 800b870:	42a5      	cmp	r5, r4
 800b872:	d10b      	bne.n	800b88c <_free_r+0x78>
 800b874:	6824      	ldr	r4, [r4, #0]
 800b876:	4421      	add	r1, r4
 800b878:	1854      	adds	r4, r2, r1
 800b87a:	42a3      	cmp	r3, r4
 800b87c:	6011      	str	r1, [r2, #0]
 800b87e:	d1dd      	bne.n	800b83c <_free_r+0x28>
 800b880:	681c      	ldr	r4, [r3, #0]
 800b882:	685b      	ldr	r3, [r3, #4]
 800b884:	6053      	str	r3, [r2, #4]
 800b886:	4421      	add	r1, r4
 800b888:	6011      	str	r1, [r2, #0]
 800b88a:	e7d7      	b.n	800b83c <_free_r+0x28>
 800b88c:	d902      	bls.n	800b894 <_free_r+0x80>
 800b88e:	230c      	movs	r3, #12
 800b890:	6003      	str	r3, [r0, #0]
 800b892:	e7d3      	b.n	800b83c <_free_r+0x28>
 800b894:	6825      	ldr	r5, [r4, #0]
 800b896:	1961      	adds	r1, r4, r5
 800b898:	428b      	cmp	r3, r1
 800b89a:	bf04      	itt	eq
 800b89c:	6819      	ldreq	r1, [r3, #0]
 800b89e:	685b      	ldreq	r3, [r3, #4]
 800b8a0:	6063      	str	r3, [r4, #4]
 800b8a2:	bf04      	itt	eq
 800b8a4:	1949      	addeq	r1, r1, r5
 800b8a6:	6021      	streq	r1, [r4, #0]
 800b8a8:	6054      	str	r4, [r2, #4]
 800b8aa:	e7c7      	b.n	800b83c <_free_r+0x28>
 800b8ac:	b003      	add	sp, #12
 800b8ae:	bd30      	pop	{r4, r5, pc}
 800b8b0:	20004c74 	.word	0x20004c74

0800b8b4 <_malloc_r>:
 800b8b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8b6:	1ccd      	adds	r5, r1, #3
 800b8b8:	f025 0503 	bic.w	r5, r5, #3
 800b8bc:	3508      	adds	r5, #8
 800b8be:	2d0c      	cmp	r5, #12
 800b8c0:	bf38      	it	cc
 800b8c2:	250c      	movcc	r5, #12
 800b8c4:	2d00      	cmp	r5, #0
 800b8c6:	4606      	mov	r6, r0
 800b8c8:	db01      	blt.n	800b8ce <_malloc_r+0x1a>
 800b8ca:	42a9      	cmp	r1, r5
 800b8cc:	d903      	bls.n	800b8d6 <_malloc_r+0x22>
 800b8ce:	230c      	movs	r3, #12
 800b8d0:	6033      	str	r3, [r6, #0]
 800b8d2:	2000      	movs	r0, #0
 800b8d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8d6:	f000 f933 	bl	800bb40 <__malloc_lock>
 800b8da:	4921      	ldr	r1, [pc, #132]	; (800b960 <_malloc_r+0xac>)
 800b8dc:	680a      	ldr	r2, [r1, #0]
 800b8de:	4614      	mov	r4, r2
 800b8e0:	b99c      	cbnz	r4, 800b90a <_malloc_r+0x56>
 800b8e2:	4f20      	ldr	r7, [pc, #128]	; (800b964 <_malloc_r+0xb0>)
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	b923      	cbnz	r3, 800b8f2 <_malloc_r+0x3e>
 800b8e8:	4621      	mov	r1, r4
 800b8ea:	4630      	mov	r0, r6
 800b8ec:	f000 f8a6 	bl	800ba3c <_sbrk_r>
 800b8f0:	6038      	str	r0, [r7, #0]
 800b8f2:	4629      	mov	r1, r5
 800b8f4:	4630      	mov	r0, r6
 800b8f6:	f000 f8a1 	bl	800ba3c <_sbrk_r>
 800b8fa:	1c43      	adds	r3, r0, #1
 800b8fc:	d123      	bne.n	800b946 <_malloc_r+0x92>
 800b8fe:	230c      	movs	r3, #12
 800b900:	6033      	str	r3, [r6, #0]
 800b902:	4630      	mov	r0, r6
 800b904:	f000 f922 	bl	800bb4c <__malloc_unlock>
 800b908:	e7e3      	b.n	800b8d2 <_malloc_r+0x1e>
 800b90a:	6823      	ldr	r3, [r4, #0]
 800b90c:	1b5b      	subs	r3, r3, r5
 800b90e:	d417      	bmi.n	800b940 <_malloc_r+0x8c>
 800b910:	2b0b      	cmp	r3, #11
 800b912:	d903      	bls.n	800b91c <_malloc_r+0x68>
 800b914:	6023      	str	r3, [r4, #0]
 800b916:	441c      	add	r4, r3
 800b918:	6025      	str	r5, [r4, #0]
 800b91a:	e004      	b.n	800b926 <_malloc_r+0x72>
 800b91c:	6863      	ldr	r3, [r4, #4]
 800b91e:	42a2      	cmp	r2, r4
 800b920:	bf0c      	ite	eq
 800b922:	600b      	streq	r3, [r1, #0]
 800b924:	6053      	strne	r3, [r2, #4]
 800b926:	4630      	mov	r0, r6
 800b928:	f000 f910 	bl	800bb4c <__malloc_unlock>
 800b92c:	f104 000b 	add.w	r0, r4, #11
 800b930:	1d23      	adds	r3, r4, #4
 800b932:	f020 0007 	bic.w	r0, r0, #7
 800b936:	1ac2      	subs	r2, r0, r3
 800b938:	d0cc      	beq.n	800b8d4 <_malloc_r+0x20>
 800b93a:	1a1b      	subs	r3, r3, r0
 800b93c:	50a3      	str	r3, [r4, r2]
 800b93e:	e7c9      	b.n	800b8d4 <_malloc_r+0x20>
 800b940:	4622      	mov	r2, r4
 800b942:	6864      	ldr	r4, [r4, #4]
 800b944:	e7cc      	b.n	800b8e0 <_malloc_r+0x2c>
 800b946:	1cc4      	adds	r4, r0, #3
 800b948:	f024 0403 	bic.w	r4, r4, #3
 800b94c:	42a0      	cmp	r0, r4
 800b94e:	d0e3      	beq.n	800b918 <_malloc_r+0x64>
 800b950:	1a21      	subs	r1, r4, r0
 800b952:	4630      	mov	r0, r6
 800b954:	f000 f872 	bl	800ba3c <_sbrk_r>
 800b958:	3001      	adds	r0, #1
 800b95a:	d1dd      	bne.n	800b918 <_malloc_r+0x64>
 800b95c:	e7cf      	b.n	800b8fe <_malloc_r+0x4a>
 800b95e:	bf00      	nop
 800b960:	20004c74 	.word	0x20004c74
 800b964:	20004c78 	.word	0x20004c78

0800b968 <cleanup_glue>:
 800b968:	b538      	push	{r3, r4, r5, lr}
 800b96a:	460c      	mov	r4, r1
 800b96c:	6809      	ldr	r1, [r1, #0]
 800b96e:	4605      	mov	r5, r0
 800b970:	b109      	cbz	r1, 800b976 <cleanup_glue+0xe>
 800b972:	f7ff fff9 	bl	800b968 <cleanup_glue>
 800b976:	4621      	mov	r1, r4
 800b978:	4628      	mov	r0, r5
 800b97a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b97e:	f7ff bf49 	b.w	800b814 <_free_r>
	...

0800b984 <_reclaim_reent>:
 800b984:	4b2c      	ldr	r3, [pc, #176]	; (800ba38 <_reclaim_reent+0xb4>)
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	4283      	cmp	r3, r0
 800b98a:	b570      	push	{r4, r5, r6, lr}
 800b98c:	4604      	mov	r4, r0
 800b98e:	d051      	beq.n	800ba34 <_reclaim_reent+0xb0>
 800b990:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b992:	b143      	cbz	r3, 800b9a6 <_reclaim_reent+0x22>
 800b994:	68db      	ldr	r3, [r3, #12]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d14a      	bne.n	800ba30 <_reclaim_reent+0xac>
 800b99a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b99c:	6819      	ldr	r1, [r3, #0]
 800b99e:	b111      	cbz	r1, 800b9a6 <_reclaim_reent+0x22>
 800b9a0:	4620      	mov	r0, r4
 800b9a2:	f7ff ff37 	bl	800b814 <_free_r>
 800b9a6:	6961      	ldr	r1, [r4, #20]
 800b9a8:	b111      	cbz	r1, 800b9b0 <_reclaim_reent+0x2c>
 800b9aa:	4620      	mov	r0, r4
 800b9ac:	f7ff ff32 	bl	800b814 <_free_r>
 800b9b0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b9b2:	b111      	cbz	r1, 800b9ba <_reclaim_reent+0x36>
 800b9b4:	4620      	mov	r0, r4
 800b9b6:	f7ff ff2d 	bl	800b814 <_free_r>
 800b9ba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b9bc:	b111      	cbz	r1, 800b9c4 <_reclaim_reent+0x40>
 800b9be:	4620      	mov	r0, r4
 800b9c0:	f7ff ff28 	bl	800b814 <_free_r>
 800b9c4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b9c6:	b111      	cbz	r1, 800b9ce <_reclaim_reent+0x4a>
 800b9c8:	4620      	mov	r0, r4
 800b9ca:	f7ff ff23 	bl	800b814 <_free_r>
 800b9ce:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b9d0:	b111      	cbz	r1, 800b9d8 <_reclaim_reent+0x54>
 800b9d2:	4620      	mov	r0, r4
 800b9d4:	f7ff ff1e 	bl	800b814 <_free_r>
 800b9d8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b9da:	b111      	cbz	r1, 800b9e2 <_reclaim_reent+0x5e>
 800b9dc:	4620      	mov	r0, r4
 800b9de:	f7ff ff19 	bl	800b814 <_free_r>
 800b9e2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b9e4:	b111      	cbz	r1, 800b9ec <_reclaim_reent+0x68>
 800b9e6:	4620      	mov	r0, r4
 800b9e8:	f7ff ff14 	bl	800b814 <_free_r>
 800b9ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b9ee:	b111      	cbz	r1, 800b9f6 <_reclaim_reent+0x72>
 800b9f0:	4620      	mov	r0, r4
 800b9f2:	f7ff ff0f 	bl	800b814 <_free_r>
 800b9f6:	69a3      	ldr	r3, [r4, #24]
 800b9f8:	b1e3      	cbz	r3, 800ba34 <_reclaim_reent+0xb0>
 800b9fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b9fc:	4620      	mov	r0, r4
 800b9fe:	4798      	blx	r3
 800ba00:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ba02:	b1b9      	cbz	r1, 800ba34 <_reclaim_reent+0xb0>
 800ba04:	4620      	mov	r0, r4
 800ba06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ba0a:	f7ff bfad 	b.w	800b968 <cleanup_glue>
 800ba0e:	5949      	ldr	r1, [r1, r5]
 800ba10:	b941      	cbnz	r1, 800ba24 <_reclaim_reent+0xa0>
 800ba12:	3504      	adds	r5, #4
 800ba14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba16:	2d80      	cmp	r5, #128	; 0x80
 800ba18:	68d9      	ldr	r1, [r3, #12]
 800ba1a:	d1f8      	bne.n	800ba0e <_reclaim_reent+0x8a>
 800ba1c:	4620      	mov	r0, r4
 800ba1e:	f7ff fef9 	bl	800b814 <_free_r>
 800ba22:	e7ba      	b.n	800b99a <_reclaim_reent+0x16>
 800ba24:	680e      	ldr	r6, [r1, #0]
 800ba26:	4620      	mov	r0, r4
 800ba28:	f7ff fef4 	bl	800b814 <_free_r>
 800ba2c:	4631      	mov	r1, r6
 800ba2e:	e7ef      	b.n	800ba10 <_reclaim_reent+0x8c>
 800ba30:	2500      	movs	r5, #0
 800ba32:	e7ef      	b.n	800ba14 <_reclaim_reent+0x90>
 800ba34:	bd70      	pop	{r4, r5, r6, pc}
 800ba36:	bf00      	nop
 800ba38:	20000070 	.word	0x20000070

0800ba3c <_sbrk_r>:
 800ba3c:	b538      	push	{r3, r4, r5, lr}
 800ba3e:	4d06      	ldr	r5, [pc, #24]	; (800ba58 <_sbrk_r+0x1c>)
 800ba40:	2300      	movs	r3, #0
 800ba42:	4604      	mov	r4, r0
 800ba44:	4608      	mov	r0, r1
 800ba46:	602b      	str	r3, [r5, #0]
 800ba48:	f7f7 f92e 	bl	8002ca8 <_sbrk>
 800ba4c:	1c43      	adds	r3, r0, #1
 800ba4e:	d102      	bne.n	800ba56 <_sbrk_r+0x1a>
 800ba50:	682b      	ldr	r3, [r5, #0]
 800ba52:	b103      	cbz	r3, 800ba56 <_sbrk_r+0x1a>
 800ba54:	6023      	str	r3, [r4, #0]
 800ba56:	bd38      	pop	{r3, r4, r5, pc}
 800ba58:	20004ef4 	.word	0x20004ef4

0800ba5c <strcat>:
 800ba5c:	b510      	push	{r4, lr}
 800ba5e:	4602      	mov	r2, r0
 800ba60:	7814      	ldrb	r4, [r2, #0]
 800ba62:	4613      	mov	r3, r2
 800ba64:	3201      	adds	r2, #1
 800ba66:	2c00      	cmp	r4, #0
 800ba68:	d1fa      	bne.n	800ba60 <strcat+0x4>
 800ba6a:	3b01      	subs	r3, #1
 800ba6c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ba70:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ba74:	2a00      	cmp	r2, #0
 800ba76:	d1f9      	bne.n	800ba6c <strcat+0x10>
 800ba78:	bd10      	pop	{r4, pc}
	...

0800ba7c <__utoa>:
 800ba7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba7e:	4c1f      	ldr	r4, [pc, #124]	; (800bafc <__utoa+0x80>)
 800ba80:	b08b      	sub	sp, #44	; 0x2c
 800ba82:	4605      	mov	r5, r0
 800ba84:	460b      	mov	r3, r1
 800ba86:	466e      	mov	r6, sp
 800ba88:	f104 0c20 	add.w	ip, r4, #32
 800ba8c:	6820      	ldr	r0, [r4, #0]
 800ba8e:	6861      	ldr	r1, [r4, #4]
 800ba90:	4637      	mov	r7, r6
 800ba92:	c703      	stmia	r7!, {r0, r1}
 800ba94:	3408      	adds	r4, #8
 800ba96:	4564      	cmp	r4, ip
 800ba98:	463e      	mov	r6, r7
 800ba9a:	d1f7      	bne.n	800ba8c <__utoa+0x10>
 800ba9c:	7921      	ldrb	r1, [r4, #4]
 800ba9e:	7139      	strb	r1, [r7, #4]
 800baa0:	1e91      	subs	r1, r2, #2
 800baa2:	6820      	ldr	r0, [r4, #0]
 800baa4:	6038      	str	r0, [r7, #0]
 800baa6:	2922      	cmp	r1, #34	; 0x22
 800baa8:	f04f 0100 	mov.w	r1, #0
 800baac:	d904      	bls.n	800bab8 <__utoa+0x3c>
 800baae:	7019      	strb	r1, [r3, #0]
 800bab0:	460b      	mov	r3, r1
 800bab2:	4618      	mov	r0, r3
 800bab4:	b00b      	add	sp, #44	; 0x2c
 800bab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bab8:	1e58      	subs	r0, r3, #1
 800baba:	4684      	mov	ip, r0
 800babc:	fbb5 f7f2 	udiv	r7, r5, r2
 800bac0:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800bac4:	fb02 5617 	mls	r6, r2, r7, r5
 800bac8:	4476      	add	r6, lr
 800baca:	460c      	mov	r4, r1
 800bacc:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800bad0:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800bad4:	462e      	mov	r6, r5
 800bad6:	42b2      	cmp	r2, r6
 800bad8:	f101 0101 	add.w	r1, r1, #1
 800badc:	463d      	mov	r5, r7
 800bade:	d9ed      	bls.n	800babc <__utoa+0x40>
 800bae0:	2200      	movs	r2, #0
 800bae2:	545a      	strb	r2, [r3, r1]
 800bae4:	1919      	adds	r1, r3, r4
 800bae6:	1aa5      	subs	r5, r4, r2
 800bae8:	42aa      	cmp	r2, r5
 800baea:	dae2      	bge.n	800bab2 <__utoa+0x36>
 800baec:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800baf0:	780e      	ldrb	r6, [r1, #0]
 800baf2:	7006      	strb	r6, [r0, #0]
 800baf4:	3201      	adds	r2, #1
 800baf6:	f801 5901 	strb.w	r5, [r1], #-1
 800bafa:	e7f4      	b.n	800bae6 <__utoa+0x6a>
 800bafc:	0800f9d4 	.word	0x0800f9d4

0800bb00 <_vsiprintf_r>:
 800bb00:	b500      	push	{lr}
 800bb02:	b09b      	sub	sp, #108	; 0x6c
 800bb04:	9100      	str	r1, [sp, #0]
 800bb06:	9104      	str	r1, [sp, #16]
 800bb08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bb0c:	9105      	str	r1, [sp, #20]
 800bb0e:	9102      	str	r1, [sp, #8]
 800bb10:	4905      	ldr	r1, [pc, #20]	; (800bb28 <_vsiprintf_r+0x28>)
 800bb12:	9103      	str	r1, [sp, #12]
 800bb14:	4669      	mov	r1, sp
 800bb16:	f000 f87b 	bl	800bc10 <_svfiprintf_r>
 800bb1a:	9b00      	ldr	r3, [sp, #0]
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	701a      	strb	r2, [r3, #0]
 800bb20:	b01b      	add	sp, #108	; 0x6c
 800bb22:	f85d fb04 	ldr.w	pc, [sp], #4
 800bb26:	bf00      	nop
 800bb28:	ffff0208 	.word	0xffff0208

0800bb2c <vsiprintf>:
 800bb2c:	4613      	mov	r3, r2
 800bb2e:	460a      	mov	r2, r1
 800bb30:	4601      	mov	r1, r0
 800bb32:	4802      	ldr	r0, [pc, #8]	; (800bb3c <vsiprintf+0x10>)
 800bb34:	6800      	ldr	r0, [r0, #0]
 800bb36:	f7ff bfe3 	b.w	800bb00 <_vsiprintf_r>
 800bb3a:	bf00      	nop
 800bb3c:	20000070 	.word	0x20000070

0800bb40 <__malloc_lock>:
 800bb40:	4801      	ldr	r0, [pc, #4]	; (800bb48 <__malloc_lock+0x8>)
 800bb42:	f7ff be3f 	b.w	800b7c4 <__retarget_lock_acquire_recursive>
 800bb46:	bf00      	nop
 800bb48:	20004eec 	.word	0x20004eec

0800bb4c <__malloc_unlock>:
 800bb4c:	4801      	ldr	r0, [pc, #4]	; (800bb54 <__malloc_unlock+0x8>)
 800bb4e:	f7ff be3a 	b.w	800b7c6 <__retarget_lock_release_recursive>
 800bb52:	bf00      	nop
 800bb54:	20004eec 	.word	0x20004eec

0800bb58 <__ssputs_r>:
 800bb58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb5c:	688e      	ldr	r6, [r1, #8]
 800bb5e:	429e      	cmp	r6, r3
 800bb60:	4682      	mov	sl, r0
 800bb62:	460c      	mov	r4, r1
 800bb64:	4690      	mov	r8, r2
 800bb66:	461f      	mov	r7, r3
 800bb68:	d838      	bhi.n	800bbdc <__ssputs_r+0x84>
 800bb6a:	898a      	ldrh	r2, [r1, #12]
 800bb6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bb70:	d032      	beq.n	800bbd8 <__ssputs_r+0x80>
 800bb72:	6825      	ldr	r5, [r4, #0]
 800bb74:	6909      	ldr	r1, [r1, #16]
 800bb76:	eba5 0901 	sub.w	r9, r5, r1
 800bb7a:	6965      	ldr	r5, [r4, #20]
 800bb7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bb80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bb84:	3301      	adds	r3, #1
 800bb86:	444b      	add	r3, r9
 800bb88:	106d      	asrs	r5, r5, #1
 800bb8a:	429d      	cmp	r5, r3
 800bb8c:	bf38      	it	cc
 800bb8e:	461d      	movcc	r5, r3
 800bb90:	0553      	lsls	r3, r2, #21
 800bb92:	d531      	bpl.n	800bbf8 <__ssputs_r+0xa0>
 800bb94:	4629      	mov	r1, r5
 800bb96:	f7ff fe8d 	bl	800b8b4 <_malloc_r>
 800bb9a:	4606      	mov	r6, r0
 800bb9c:	b950      	cbnz	r0, 800bbb4 <__ssputs_r+0x5c>
 800bb9e:	230c      	movs	r3, #12
 800bba0:	f8ca 3000 	str.w	r3, [sl]
 800bba4:	89a3      	ldrh	r3, [r4, #12]
 800bba6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbaa:	81a3      	strh	r3, [r4, #12]
 800bbac:	f04f 30ff 	mov.w	r0, #4294967295
 800bbb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbb4:	6921      	ldr	r1, [r4, #16]
 800bbb6:	464a      	mov	r2, r9
 800bbb8:	f7ff fe16 	bl	800b7e8 <memcpy>
 800bbbc:	89a3      	ldrh	r3, [r4, #12]
 800bbbe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bbc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bbc6:	81a3      	strh	r3, [r4, #12]
 800bbc8:	6126      	str	r6, [r4, #16]
 800bbca:	6165      	str	r5, [r4, #20]
 800bbcc:	444e      	add	r6, r9
 800bbce:	eba5 0509 	sub.w	r5, r5, r9
 800bbd2:	6026      	str	r6, [r4, #0]
 800bbd4:	60a5      	str	r5, [r4, #8]
 800bbd6:	463e      	mov	r6, r7
 800bbd8:	42be      	cmp	r6, r7
 800bbda:	d900      	bls.n	800bbde <__ssputs_r+0x86>
 800bbdc:	463e      	mov	r6, r7
 800bbde:	4632      	mov	r2, r6
 800bbe0:	6820      	ldr	r0, [r4, #0]
 800bbe2:	4641      	mov	r1, r8
 800bbe4:	f000 faa8 	bl	800c138 <memmove>
 800bbe8:	68a3      	ldr	r3, [r4, #8]
 800bbea:	6822      	ldr	r2, [r4, #0]
 800bbec:	1b9b      	subs	r3, r3, r6
 800bbee:	4432      	add	r2, r6
 800bbf0:	60a3      	str	r3, [r4, #8]
 800bbf2:	6022      	str	r2, [r4, #0]
 800bbf4:	2000      	movs	r0, #0
 800bbf6:	e7db      	b.n	800bbb0 <__ssputs_r+0x58>
 800bbf8:	462a      	mov	r2, r5
 800bbfa:	f000 fab7 	bl	800c16c <_realloc_r>
 800bbfe:	4606      	mov	r6, r0
 800bc00:	2800      	cmp	r0, #0
 800bc02:	d1e1      	bne.n	800bbc8 <__ssputs_r+0x70>
 800bc04:	6921      	ldr	r1, [r4, #16]
 800bc06:	4650      	mov	r0, sl
 800bc08:	f7ff fe04 	bl	800b814 <_free_r>
 800bc0c:	e7c7      	b.n	800bb9e <__ssputs_r+0x46>
	...

0800bc10 <_svfiprintf_r>:
 800bc10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc14:	4698      	mov	r8, r3
 800bc16:	898b      	ldrh	r3, [r1, #12]
 800bc18:	061b      	lsls	r3, r3, #24
 800bc1a:	b09d      	sub	sp, #116	; 0x74
 800bc1c:	4607      	mov	r7, r0
 800bc1e:	460d      	mov	r5, r1
 800bc20:	4614      	mov	r4, r2
 800bc22:	d50e      	bpl.n	800bc42 <_svfiprintf_r+0x32>
 800bc24:	690b      	ldr	r3, [r1, #16]
 800bc26:	b963      	cbnz	r3, 800bc42 <_svfiprintf_r+0x32>
 800bc28:	2140      	movs	r1, #64	; 0x40
 800bc2a:	f7ff fe43 	bl	800b8b4 <_malloc_r>
 800bc2e:	6028      	str	r0, [r5, #0]
 800bc30:	6128      	str	r0, [r5, #16]
 800bc32:	b920      	cbnz	r0, 800bc3e <_svfiprintf_r+0x2e>
 800bc34:	230c      	movs	r3, #12
 800bc36:	603b      	str	r3, [r7, #0]
 800bc38:	f04f 30ff 	mov.w	r0, #4294967295
 800bc3c:	e0d1      	b.n	800bde2 <_svfiprintf_r+0x1d2>
 800bc3e:	2340      	movs	r3, #64	; 0x40
 800bc40:	616b      	str	r3, [r5, #20]
 800bc42:	2300      	movs	r3, #0
 800bc44:	9309      	str	r3, [sp, #36]	; 0x24
 800bc46:	2320      	movs	r3, #32
 800bc48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bc4c:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc50:	2330      	movs	r3, #48	; 0x30
 800bc52:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bdfc <_svfiprintf_r+0x1ec>
 800bc56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bc5a:	f04f 0901 	mov.w	r9, #1
 800bc5e:	4623      	mov	r3, r4
 800bc60:	469a      	mov	sl, r3
 800bc62:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc66:	b10a      	cbz	r2, 800bc6c <_svfiprintf_r+0x5c>
 800bc68:	2a25      	cmp	r2, #37	; 0x25
 800bc6a:	d1f9      	bne.n	800bc60 <_svfiprintf_r+0x50>
 800bc6c:	ebba 0b04 	subs.w	fp, sl, r4
 800bc70:	d00b      	beq.n	800bc8a <_svfiprintf_r+0x7a>
 800bc72:	465b      	mov	r3, fp
 800bc74:	4622      	mov	r2, r4
 800bc76:	4629      	mov	r1, r5
 800bc78:	4638      	mov	r0, r7
 800bc7a:	f7ff ff6d 	bl	800bb58 <__ssputs_r>
 800bc7e:	3001      	adds	r0, #1
 800bc80:	f000 80aa 	beq.w	800bdd8 <_svfiprintf_r+0x1c8>
 800bc84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc86:	445a      	add	r2, fp
 800bc88:	9209      	str	r2, [sp, #36]	; 0x24
 800bc8a:	f89a 3000 	ldrb.w	r3, [sl]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	f000 80a2 	beq.w	800bdd8 <_svfiprintf_r+0x1c8>
 800bc94:	2300      	movs	r3, #0
 800bc96:	f04f 32ff 	mov.w	r2, #4294967295
 800bc9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc9e:	f10a 0a01 	add.w	sl, sl, #1
 800bca2:	9304      	str	r3, [sp, #16]
 800bca4:	9307      	str	r3, [sp, #28]
 800bca6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bcaa:	931a      	str	r3, [sp, #104]	; 0x68
 800bcac:	4654      	mov	r4, sl
 800bcae:	2205      	movs	r2, #5
 800bcb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcb4:	4851      	ldr	r0, [pc, #324]	; (800bdfc <_svfiprintf_r+0x1ec>)
 800bcb6:	f7f4 faa3 	bl	8000200 <memchr>
 800bcba:	9a04      	ldr	r2, [sp, #16]
 800bcbc:	b9d8      	cbnz	r0, 800bcf6 <_svfiprintf_r+0xe6>
 800bcbe:	06d0      	lsls	r0, r2, #27
 800bcc0:	bf44      	itt	mi
 800bcc2:	2320      	movmi	r3, #32
 800bcc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bcc8:	0711      	lsls	r1, r2, #28
 800bcca:	bf44      	itt	mi
 800bccc:	232b      	movmi	r3, #43	; 0x2b
 800bcce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bcd2:	f89a 3000 	ldrb.w	r3, [sl]
 800bcd6:	2b2a      	cmp	r3, #42	; 0x2a
 800bcd8:	d015      	beq.n	800bd06 <_svfiprintf_r+0xf6>
 800bcda:	9a07      	ldr	r2, [sp, #28]
 800bcdc:	4654      	mov	r4, sl
 800bcde:	2000      	movs	r0, #0
 800bce0:	f04f 0c0a 	mov.w	ip, #10
 800bce4:	4621      	mov	r1, r4
 800bce6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bcea:	3b30      	subs	r3, #48	; 0x30
 800bcec:	2b09      	cmp	r3, #9
 800bcee:	d94e      	bls.n	800bd8e <_svfiprintf_r+0x17e>
 800bcf0:	b1b0      	cbz	r0, 800bd20 <_svfiprintf_r+0x110>
 800bcf2:	9207      	str	r2, [sp, #28]
 800bcf4:	e014      	b.n	800bd20 <_svfiprintf_r+0x110>
 800bcf6:	eba0 0308 	sub.w	r3, r0, r8
 800bcfa:	fa09 f303 	lsl.w	r3, r9, r3
 800bcfe:	4313      	orrs	r3, r2
 800bd00:	9304      	str	r3, [sp, #16]
 800bd02:	46a2      	mov	sl, r4
 800bd04:	e7d2      	b.n	800bcac <_svfiprintf_r+0x9c>
 800bd06:	9b03      	ldr	r3, [sp, #12]
 800bd08:	1d19      	adds	r1, r3, #4
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	9103      	str	r1, [sp, #12]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	bfbb      	ittet	lt
 800bd12:	425b      	neglt	r3, r3
 800bd14:	f042 0202 	orrlt.w	r2, r2, #2
 800bd18:	9307      	strge	r3, [sp, #28]
 800bd1a:	9307      	strlt	r3, [sp, #28]
 800bd1c:	bfb8      	it	lt
 800bd1e:	9204      	strlt	r2, [sp, #16]
 800bd20:	7823      	ldrb	r3, [r4, #0]
 800bd22:	2b2e      	cmp	r3, #46	; 0x2e
 800bd24:	d10c      	bne.n	800bd40 <_svfiprintf_r+0x130>
 800bd26:	7863      	ldrb	r3, [r4, #1]
 800bd28:	2b2a      	cmp	r3, #42	; 0x2a
 800bd2a:	d135      	bne.n	800bd98 <_svfiprintf_r+0x188>
 800bd2c:	9b03      	ldr	r3, [sp, #12]
 800bd2e:	1d1a      	adds	r2, r3, #4
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	9203      	str	r2, [sp, #12]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	bfb8      	it	lt
 800bd38:	f04f 33ff 	movlt.w	r3, #4294967295
 800bd3c:	3402      	adds	r4, #2
 800bd3e:	9305      	str	r3, [sp, #20]
 800bd40:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800be0c <_svfiprintf_r+0x1fc>
 800bd44:	7821      	ldrb	r1, [r4, #0]
 800bd46:	2203      	movs	r2, #3
 800bd48:	4650      	mov	r0, sl
 800bd4a:	f7f4 fa59 	bl	8000200 <memchr>
 800bd4e:	b140      	cbz	r0, 800bd62 <_svfiprintf_r+0x152>
 800bd50:	2340      	movs	r3, #64	; 0x40
 800bd52:	eba0 000a 	sub.w	r0, r0, sl
 800bd56:	fa03 f000 	lsl.w	r0, r3, r0
 800bd5a:	9b04      	ldr	r3, [sp, #16]
 800bd5c:	4303      	orrs	r3, r0
 800bd5e:	3401      	adds	r4, #1
 800bd60:	9304      	str	r3, [sp, #16]
 800bd62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd66:	4826      	ldr	r0, [pc, #152]	; (800be00 <_svfiprintf_r+0x1f0>)
 800bd68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bd6c:	2206      	movs	r2, #6
 800bd6e:	f7f4 fa47 	bl	8000200 <memchr>
 800bd72:	2800      	cmp	r0, #0
 800bd74:	d038      	beq.n	800bde8 <_svfiprintf_r+0x1d8>
 800bd76:	4b23      	ldr	r3, [pc, #140]	; (800be04 <_svfiprintf_r+0x1f4>)
 800bd78:	bb1b      	cbnz	r3, 800bdc2 <_svfiprintf_r+0x1b2>
 800bd7a:	9b03      	ldr	r3, [sp, #12]
 800bd7c:	3307      	adds	r3, #7
 800bd7e:	f023 0307 	bic.w	r3, r3, #7
 800bd82:	3308      	adds	r3, #8
 800bd84:	9303      	str	r3, [sp, #12]
 800bd86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd88:	4433      	add	r3, r6
 800bd8a:	9309      	str	r3, [sp, #36]	; 0x24
 800bd8c:	e767      	b.n	800bc5e <_svfiprintf_r+0x4e>
 800bd8e:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd92:	460c      	mov	r4, r1
 800bd94:	2001      	movs	r0, #1
 800bd96:	e7a5      	b.n	800bce4 <_svfiprintf_r+0xd4>
 800bd98:	2300      	movs	r3, #0
 800bd9a:	3401      	adds	r4, #1
 800bd9c:	9305      	str	r3, [sp, #20]
 800bd9e:	4619      	mov	r1, r3
 800bda0:	f04f 0c0a 	mov.w	ip, #10
 800bda4:	4620      	mov	r0, r4
 800bda6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bdaa:	3a30      	subs	r2, #48	; 0x30
 800bdac:	2a09      	cmp	r2, #9
 800bdae:	d903      	bls.n	800bdb8 <_svfiprintf_r+0x1a8>
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d0c5      	beq.n	800bd40 <_svfiprintf_r+0x130>
 800bdb4:	9105      	str	r1, [sp, #20]
 800bdb6:	e7c3      	b.n	800bd40 <_svfiprintf_r+0x130>
 800bdb8:	fb0c 2101 	mla	r1, ip, r1, r2
 800bdbc:	4604      	mov	r4, r0
 800bdbe:	2301      	movs	r3, #1
 800bdc0:	e7f0      	b.n	800bda4 <_svfiprintf_r+0x194>
 800bdc2:	ab03      	add	r3, sp, #12
 800bdc4:	9300      	str	r3, [sp, #0]
 800bdc6:	462a      	mov	r2, r5
 800bdc8:	4b0f      	ldr	r3, [pc, #60]	; (800be08 <_svfiprintf_r+0x1f8>)
 800bdca:	a904      	add	r1, sp, #16
 800bdcc:	4638      	mov	r0, r7
 800bdce:	f3af 8000 	nop.w
 800bdd2:	1c42      	adds	r2, r0, #1
 800bdd4:	4606      	mov	r6, r0
 800bdd6:	d1d6      	bne.n	800bd86 <_svfiprintf_r+0x176>
 800bdd8:	89ab      	ldrh	r3, [r5, #12]
 800bdda:	065b      	lsls	r3, r3, #25
 800bddc:	f53f af2c 	bmi.w	800bc38 <_svfiprintf_r+0x28>
 800bde0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bde2:	b01d      	add	sp, #116	; 0x74
 800bde4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bde8:	ab03      	add	r3, sp, #12
 800bdea:	9300      	str	r3, [sp, #0]
 800bdec:	462a      	mov	r2, r5
 800bdee:	4b06      	ldr	r3, [pc, #24]	; (800be08 <_svfiprintf_r+0x1f8>)
 800bdf0:	a904      	add	r1, sp, #16
 800bdf2:	4638      	mov	r0, r7
 800bdf4:	f000 f87a 	bl	800beec <_printf_i>
 800bdf8:	e7eb      	b.n	800bdd2 <_svfiprintf_r+0x1c2>
 800bdfa:	bf00      	nop
 800bdfc:	0800f9f9 	.word	0x0800f9f9
 800be00:	0800fa03 	.word	0x0800fa03
 800be04:	00000000 	.word	0x00000000
 800be08:	0800bb59 	.word	0x0800bb59
 800be0c:	0800f9ff 	.word	0x0800f9ff

0800be10 <_printf_common>:
 800be10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be14:	4616      	mov	r6, r2
 800be16:	4699      	mov	r9, r3
 800be18:	688a      	ldr	r2, [r1, #8]
 800be1a:	690b      	ldr	r3, [r1, #16]
 800be1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800be20:	4293      	cmp	r3, r2
 800be22:	bfb8      	it	lt
 800be24:	4613      	movlt	r3, r2
 800be26:	6033      	str	r3, [r6, #0]
 800be28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800be2c:	4607      	mov	r7, r0
 800be2e:	460c      	mov	r4, r1
 800be30:	b10a      	cbz	r2, 800be36 <_printf_common+0x26>
 800be32:	3301      	adds	r3, #1
 800be34:	6033      	str	r3, [r6, #0]
 800be36:	6823      	ldr	r3, [r4, #0]
 800be38:	0699      	lsls	r1, r3, #26
 800be3a:	bf42      	ittt	mi
 800be3c:	6833      	ldrmi	r3, [r6, #0]
 800be3e:	3302      	addmi	r3, #2
 800be40:	6033      	strmi	r3, [r6, #0]
 800be42:	6825      	ldr	r5, [r4, #0]
 800be44:	f015 0506 	ands.w	r5, r5, #6
 800be48:	d106      	bne.n	800be58 <_printf_common+0x48>
 800be4a:	f104 0a19 	add.w	sl, r4, #25
 800be4e:	68e3      	ldr	r3, [r4, #12]
 800be50:	6832      	ldr	r2, [r6, #0]
 800be52:	1a9b      	subs	r3, r3, r2
 800be54:	42ab      	cmp	r3, r5
 800be56:	dc26      	bgt.n	800bea6 <_printf_common+0x96>
 800be58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800be5c:	1e13      	subs	r3, r2, #0
 800be5e:	6822      	ldr	r2, [r4, #0]
 800be60:	bf18      	it	ne
 800be62:	2301      	movne	r3, #1
 800be64:	0692      	lsls	r2, r2, #26
 800be66:	d42b      	bmi.n	800bec0 <_printf_common+0xb0>
 800be68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800be6c:	4649      	mov	r1, r9
 800be6e:	4638      	mov	r0, r7
 800be70:	47c0      	blx	r8
 800be72:	3001      	adds	r0, #1
 800be74:	d01e      	beq.n	800beb4 <_printf_common+0xa4>
 800be76:	6823      	ldr	r3, [r4, #0]
 800be78:	68e5      	ldr	r5, [r4, #12]
 800be7a:	6832      	ldr	r2, [r6, #0]
 800be7c:	f003 0306 	and.w	r3, r3, #6
 800be80:	2b04      	cmp	r3, #4
 800be82:	bf08      	it	eq
 800be84:	1aad      	subeq	r5, r5, r2
 800be86:	68a3      	ldr	r3, [r4, #8]
 800be88:	6922      	ldr	r2, [r4, #16]
 800be8a:	bf0c      	ite	eq
 800be8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800be90:	2500      	movne	r5, #0
 800be92:	4293      	cmp	r3, r2
 800be94:	bfc4      	itt	gt
 800be96:	1a9b      	subgt	r3, r3, r2
 800be98:	18ed      	addgt	r5, r5, r3
 800be9a:	2600      	movs	r6, #0
 800be9c:	341a      	adds	r4, #26
 800be9e:	42b5      	cmp	r5, r6
 800bea0:	d11a      	bne.n	800bed8 <_printf_common+0xc8>
 800bea2:	2000      	movs	r0, #0
 800bea4:	e008      	b.n	800beb8 <_printf_common+0xa8>
 800bea6:	2301      	movs	r3, #1
 800bea8:	4652      	mov	r2, sl
 800beaa:	4649      	mov	r1, r9
 800beac:	4638      	mov	r0, r7
 800beae:	47c0      	blx	r8
 800beb0:	3001      	adds	r0, #1
 800beb2:	d103      	bne.n	800bebc <_printf_common+0xac>
 800beb4:	f04f 30ff 	mov.w	r0, #4294967295
 800beb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bebc:	3501      	adds	r5, #1
 800bebe:	e7c6      	b.n	800be4e <_printf_common+0x3e>
 800bec0:	18e1      	adds	r1, r4, r3
 800bec2:	1c5a      	adds	r2, r3, #1
 800bec4:	2030      	movs	r0, #48	; 0x30
 800bec6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800beca:	4422      	add	r2, r4
 800becc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bed0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bed4:	3302      	adds	r3, #2
 800bed6:	e7c7      	b.n	800be68 <_printf_common+0x58>
 800bed8:	2301      	movs	r3, #1
 800beda:	4622      	mov	r2, r4
 800bedc:	4649      	mov	r1, r9
 800bede:	4638      	mov	r0, r7
 800bee0:	47c0      	blx	r8
 800bee2:	3001      	adds	r0, #1
 800bee4:	d0e6      	beq.n	800beb4 <_printf_common+0xa4>
 800bee6:	3601      	adds	r6, #1
 800bee8:	e7d9      	b.n	800be9e <_printf_common+0x8e>
	...

0800beec <_printf_i>:
 800beec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bef0:	460c      	mov	r4, r1
 800bef2:	4691      	mov	r9, r2
 800bef4:	7e27      	ldrb	r7, [r4, #24]
 800bef6:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bef8:	2f78      	cmp	r7, #120	; 0x78
 800befa:	4680      	mov	r8, r0
 800befc:	469a      	mov	sl, r3
 800befe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bf02:	d807      	bhi.n	800bf14 <_printf_i+0x28>
 800bf04:	2f62      	cmp	r7, #98	; 0x62
 800bf06:	d80a      	bhi.n	800bf1e <_printf_i+0x32>
 800bf08:	2f00      	cmp	r7, #0
 800bf0a:	f000 80d8 	beq.w	800c0be <_printf_i+0x1d2>
 800bf0e:	2f58      	cmp	r7, #88	; 0x58
 800bf10:	f000 80a3 	beq.w	800c05a <_printf_i+0x16e>
 800bf14:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bf18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bf1c:	e03a      	b.n	800bf94 <_printf_i+0xa8>
 800bf1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bf22:	2b15      	cmp	r3, #21
 800bf24:	d8f6      	bhi.n	800bf14 <_printf_i+0x28>
 800bf26:	a001      	add	r0, pc, #4	; (adr r0, 800bf2c <_printf_i+0x40>)
 800bf28:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800bf2c:	0800bf85 	.word	0x0800bf85
 800bf30:	0800bf99 	.word	0x0800bf99
 800bf34:	0800bf15 	.word	0x0800bf15
 800bf38:	0800bf15 	.word	0x0800bf15
 800bf3c:	0800bf15 	.word	0x0800bf15
 800bf40:	0800bf15 	.word	0x0800bf15
 800bf44:	0800bf99 	.word	0x0800bf99
 800bf48:	0800bf15 	.word	0x0800bf15
 800bf4c:	0800bf15 	.word	0x0800bf15
 800bf50:	0800bf15 	.word	0x0800bf15
 800bf54:	0800bf15 	.word	0x0800bf15
 800bf58:	0800c0a5 	.word	0x0800c0a5
 800bf5c:	0800bfc9 	.word	0x0800bfc9
 800bf60:	0800c087 	.word	0x0800c087
 800bf64:	0800bf15 	.word	0x0800bf15
 800bf68:	0800bf15 	.word	0x0800bf15
 800bf6c:	0800c0c7 	.word	0x0800c0c7
 800bf70:	0800bf15 	.word	0x0800bf15
 800bf74:	0800bfc9 	.word	0x0800bfc9
 800bf78:	0800bf15 	.word	0x0800bf15
 800bf7c:	0800bf15 	.word	0x0800bf15
 800bf80:	0800c08f 	.word	0x0800c08f
 800bf84:	680b      	ldr	r3, [r1, #0]
 800bf86:	1d1a      	adds	r2, r3, #4
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	600a      	str	r2, [r1, #0]
 800bf8c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bf90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bf94:	2301      	movs	r3, #1
 800bf96:	e0a3      	b.n	800c0e0 <_printf_i+0x1f4>
 800bf98:	6825      	ldr	r5, [r4, #0]
 800bf9a:	6808      	ldr	r0, [r1, #0]
 800bf9c:	062e      	lsls	r6, r5, #24
 800bf9e:	f100 0304 	add.w	r3, r0, #4
 800bfa2:	d50a      	bpl.n	800bfba <_printf_i+0xce>
 800bfa4:	6805      	ldr	r5, [r0, #0]
 800bfa6:	600b      	str	r3, [r1, #0]
 800bfa8:	2d00      	cmp	r5, #0
 800bfaa:	da03      	bge.n	800bfb4 <_printf_i+0xc8>
 800bfac:	232d      	movs	r3, #45	; 0x2d
 800bfae:	426d      	negs	r5, r5
 800bfb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bfb4:	485e      	ldr	r0, [pc, #376]	; (800c130 <_printf_i+0x244>)
 800bfb6:	230a      	movs	r3, #10
 800bfb8:	e019      	b.n	800bfee <_printf_i+0x102>
 800bfba:	f015 0f40 	tst.w	r5, #64	; 0x40
 800bfbe:	6805      	ldr	r5, [r0, #0]
 800bfc0:	600b      	str	r3, [r1, #0]
 800bfc2:	bf18      	it	ne
 800bfc4:	b22d      	sxthne	r5, r5
 800bfc6:	e7ef      	b.n	800bfa8 <_printf_i+0xbc>
 800bfc8:	680b      	ldr	r3, [r1, #0]
 800bfca:	6825      	ldr	r5, [r4, #0]
 800bfcc:	1d18      	adds	r0, r3, #4
 800bfce:	6008      	str	r0, [r1, #0]
 800bfd0:	0628      	lsls	r0, r5, #24
 800bfd2:	d501      	bpl.n	800bfd8 <_printf_i+0xec>
 800bfd4:	681d      	ldr	r5, [r3, #0]
 800bfd6:	e002      	b.n	800bfde <_printf_i+0xf2>
 800bfd8:	0669      	lsls	r1, r5, #25
 800bfda:	d5fb      	bpl.n	800bfd4 <_printf_i+0xe8>
 800bfdc:	881d      	ldrh	r5, [r3, #0]
 800bfde:	4854      	ldr	r0, [pc, #336]	; (800c130 <_printf_i+0x244>)
 800bfe0:	2f6f      	cmp	r7, #111	; 0x6f
 800bfe2:	bf0c      	ite	eq
 800bfe4:	2308      	moveq	r3, #8
 800bfe6:	230a      	movne	r3, #10
 800bfe8:	2100      	movs	r1, #0
 800bfea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bfee:	6866      	ldr	r6, [r4, #4]
 800bff0:	60a6      	str	r6, [r4, #8]
 800bff2:	2e00      	cmp	r6, #0
 800bff4:	bfa2      	ittt	ge
 800bff6:	6821      	ldrge	r1, [r4, #0]
 800bff8:	f021 0104 	bicge.w	r1, r1, #4
 800bffc:	6021      	strge	r1, [r4, #0]
 800bffe:	b90d      	cbnz	r5, 800c004 <_printf_i+0x118>
 800c000:	2e00      	cmp	r6, #0
 800c002:	d04d      	beq.n	800c0a0 <_printf_i+0x1b4>
 800c004:	4616      	mov	r6, r2
 800c006:	fbb5 f1f3 	udiv	r1, r5, r3
 800c00a:	fb03 5711 	mls	r7, r3, r1, r5
 800c00e:	5dc7      	ldrb	r7, [r0, r7]
 800c010:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c014:	462f      	mov	r7, r5
 800c016:	42bb      	cmp	r3, r7
 800c018:	460d      	mov	r5, r1
 800c01a:	d9f4      	bls.n	800c006 <_printf_i+0x11a>
 800c01c:	2b08      	cmp	r3, #8
 800c01e:	d10b      	bne.n	800c038 <_printf_i+0x14c>
 800c020:	6823      	ldr	r3, [r4, #0]
 800c022:	07df      	lsls	r7, r3, #31
 800c024:	d508      	bpl.n	800c038 <_printf_i+0x14c>
 800c026:	6923      	ldr	r3, [r4, #16]
 800c028:	6861      	ldr	r1, [r4, #4]
 800c02a:	4299      	cmp	r1, r3
 800c02c:	bfde      	ittt	le
 800c02e:	2330      	movle	r3, #48	; 0x30
 800c030:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c034:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c038:	1b92      	subs	r2, r2, r6
 800c03a:	6122      	str	r2, [r4, #16]
 800c03c:	f8cd a000 	str.w	sl, [sp]
 800c040:	464b      	mov	r3, r9
 800c042:	aa03      	add	r2, sp, #12
 800c044:	4621      	mov	r1, r4
 800c046:	4640      	mov	r0, r8
 800c048:	f7ff fee2 	bl	800be10 <_printf_common>
 800c04c:	3001      	adds	r0, #1
 800c04e:	d14c      	bne.n	800c0ea <_printf_i+0x1fe>
 800c050:	f04f 30ff 	mov.w	r0, #4294967295
 800c054:	b004      	add	sp, #16
 800c056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c05a:	4835      	ldr	r0, [pc, #212]	; (800c130 <_printf_i+0x244>)
 800c05c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c060:	6823      	ldr	r3, [r4, #0]
 800c062:	680e      	ldr	r6, [r1, #0]
 800c064:	061f      	lsls	r7, r3, #24
 800c066:	f856 5b04 	ldr.w	r5, [r6], #4
 800c06a:	600e      	str	r6, [r1, #0]
 800c06c:	d514      	bpl.n	800c098 <_printf_i+0x1ac>
 800c06e:	07d9      	lsls	r1, r3, #31
 800c070:	bf44      	itt	mi
 800c072:	f043 0320 	orrmi.w	r3, r3, #32
 800c076:	6023      	strmi	r3, [r4, #0]
 800c078:	b91d      	cbnz	r5, 800c082 <_printf_i+0x196>
 800c07a:	6823      	ldr	r3, [r4, #0]
 800c07c:	f023 0320 	bic.w	r3, r3, #32
 800c080:	6023      	str	r3, [r4, #0]
 800c082:	2310      	movs	r3, #16
 800c084:	e7b0      	b.n	800bfe8 <_printf_i+0xfc>
 800c086:	6823      	ldr	r3, [r4, #0]
 800c088:	f043 0320 	orr.w	r3, r3, #32
 800c08c:	6023      	str	r3, [r4, #0]
 800c08e:	2378      	movs	r3, #120	; 0x78
 800c090:	4828      	ldr	r0, [pc, #160]	; (800c134 <_printf_i+0x248>)
 800c092:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c096:	e7e3      	b.n	800c060 <_printf_i+0x174>
 800c098:	065e      	lsls	r6, r3, #25
 800c09a:	bf48      	it	mi
 800c09c:	b2ad      	uxthmi	r5, r5
 800c09e:	e7e6      	b.n	800c06e <_printf_i+0x182>
 800c0a0:	4616      	mov	r6, r2
 800c0a2:	e7bb      	b.n	800c01c <_printf_i+0x130>
 800c0a4:	680b      	ldr	r3, [r1, #0]
 800c0a6:	6826      	ldr	r6, [r4, #0]
 800c0a8:	6960      	ldr	r0, [r4, #20]
 800c0aa:	1d1d      	adds	r5, r3, #4
 800c0ac:	600d      	str	r5, [r1, #0]
 800c0ae:	0635      	lsls	r5, r6, #24
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	d501      	bpl.n	800c0b8 <_printf_i+0x1cc>
 800c0b4:	6018      	str	r0, [r3, #0]
 800c0b6:	e002      	b.n	800c0be <_printf_i+0x1d2>
 800c0b8:	0671      	lsls	r1, r6, #25
 800c0ba:	d5fb      	bpl.n	800c0b4 <_printf_i+0x1c8>
 800c0bc:	8018      	strh	r0, [r3, #0]
 800c0be:	2300      	movs	r3, #0
 800c0c0:	6123      	str	r3, [r4, #16]
 800c0c2:	4616      	mov	r6, r2
 800c0c4:	e7ba      	b.n	800c03c <_printf_i+0x150>
 800c0c6:	680b      	ldr	r3, [r1, #0]
 800c0c8:	1d1a      	adds	r2, r3, #4
 800c0ca:	600a      	str	r2, [r1, #0]
 800c0cc:	681e      	ldr	r6, [r3, #0]
 800c0ce:	6862      	ldr	r2, [r4, #4]
 800c0d0:	2100      	movs	r1, #0
 800c0d2:	4630      	mov	r0, r6
 800c0d4:	f7f4 f894 	bl	8000200 <memchr>
 800c0d8:	b108      	cbz	r0, 800c0de <_printf_i+0x1f2>
 800c0da:	1b80      	subs	r0, r0, r6
 800c0dc:	6060      	str	r0, [r4, #4]
 800c0de:	6863      	ldr	r3, [r4, #4]
 800c0e0:	6123      	str	r3, [r4, #16]
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c0e8:	e7a8      	b.n	800c03c <_printf_i+0x150>
 800c0ea:	6923      	ldr	r3, [r4, #16]
 800c0ec:	4632      	mov	r2, r6
 800c0ee:	4649      	mov	r1, r9
 800c0f0:	4640      	mov	r0, r8
 800c0f2:	47d0      	blx	sl
 800c0f4:	3001      	adds	r0, #1
 800c0f6:	d0ab      	beq.n	800c050 <_printf_i+0x164>
 800c0f8:	6823      	ldr	r3, [r4, #0]
 800c0fa:	079b      	lsls	r3, r3, #30
 800c0fc:	d413      	bmi.n	800c126 <_printf_i+0x23a>
 800c0fe:	68e0      	ldr	r0, [r4, #12]
 800c100:	9b03      	ldr	r3, [sp, #12]
 800c102:	4298      	cmp	r0, r3
 800c104:	bfb8      	it	lt
 800c106:	4618      	movlt	r0, r3
 800c108:	e7a4      	b.n	800c054 <_printf_i+0x168>
 800c10a:	2301      	movs	r3, #1
 800c10c:	4632      	mov	r2, r6
 800c10e:	4649      	mov	r1, r9
 800c110:	4640      	mov	r0, r8
 800c112:	47d0      	blx	sl
 800c114:	3001      	adds	r0, #1
 800c116:	d09b      	beq.n	800c050 <_printf_i+0x164>
 800c118:	3501      	adds	r5, #1
 800c11a:	68e3      	ldr	r3, [r4, #12]
 800c11c:	9903      	ldr	r1, [sp, #12]
 800c11e:	1a5b      	subs	r3, r3, r1
 800c120:	42ab      	cmp	r3, r5
 800c122:	dcf2      	bgt.n	800c10a <_printf_i+0x21e>
 800c124:	e7eb      	b.n	800c0fe <_printf_i+0x212>
 800c126:	2500      	movs	r5, #0
 800c128:	f104 0619 	add.w	r6, r4, #25
 800c12c:	e7f5      	b.n	800c11a <_printf_i+0x22e>
 800c12e:	bf00      	nop
 800c130:	0800fa0a 	.word	0x0800fa0a
 800c134:	0800fa1b 	.word	0x0800fa1b

0800c138 <memmove>:
 800c138:	4288      	cmp	r0, r1
 800c13a:	b510      	push	{r4, lr}
 800c13c:	eb01 0402 	add.w	r4, r1, r2
 800c140:	d902      	bls.n	800c148 <memmove+0x10>
 800c142:	4284      	cmp	r4, r0
 800c144:	4623      	mov	r3, r4
 800c146:	d807      	bhi.n	800c158 <memmove+0x20>
 800c148:	1e43      	subs	r3, r0, #1
 800c14a:	42a1      	cmp	r1, r4
 800c14c:	d008      	beq.n	800c160 <memmove+0x28>
 800c14e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c152:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c156:	e7f8      	b.n	800c14a <memmove+0x12>
 800c158:	4402      	add	r2, r0
 800c15a:	4601      	mov	r1, r0
 800c15c:	428a      	cmp	r2, r1
 800c15e:	d100      	bne.n	800c162 <memmove+0x2a>
 800c160:	bd10      	pop	{r4, pc}
 800c162:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c166:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c16a:	e7f7      	b.n	800c15c <memmove+0x24>

0800c16c <_realloc_r>:
 800c16c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c16e:	4607      	mov	r7, r0
 800c170:	4614      	mov	r4, r2
 800c172:	460e      	mov	r6, r1
 800c174:	b921      	cbnz	r1, 800c180 <_realloc_r+0x14>
 800c176:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c17a:	4611      	mov	r1, r2
 800c17c:	f7ff bb9a 	b.w	800b8b4 <_malloc_r>
 800c180:	b922      	cbnz	r2, 800c18c <_realloc_r+0x20>
 800c182:	f7ff fb47 	bl	800b814 <_free_r>
 800c186:	4625      	mov	r5, r4
 800c188:	4628      	mov	r0, r5
 800c18a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c18c:	f000 f814 	bl	800c1b8 <_malloc_usable_size_r>
 800c190:	42a0      	cmp	r0, r4
 800c192:	d20f      	bcs.n	800c1b4 <_realloc_r+0x48>
 800c194:	4621      	mov	r1, r4
 800c196:	4638      	mov	r0, r7
 800c198:	f7ff fb8c 	bl	800b8b4 <_malloc_r>
 800c19c:	4605      	mov	r5, r0
 800c19e:	2800      	cmp	r0, #0
 800c1a0:	d0f2      	beq.n	800c188 <_realloc_r+0x1c>
 800c1a2:	4631      	mov	r1, r6
 800c1a4:	4622      	mov	r2, r4
 800c1a6:	f7ff fb1f 	bl	800b7e8 <memcpy>
 800c1aa:	4631      	mov	r1, r6
 800c1ac:	4638      	mov	r0, r7
 800c1ae:	f7ff fb31 	bl	800b814 <_free_r>
 800c1b2:	e7e9      	b.n	800c188 <_realloc_r+0x1c>
 800c1b4:	4635      	mov	r5, r6
 800c1b6:	e7e7      	b.n	800c188 <_realloc_r+0x1c>

0800c1b8 <_malloc_usable_size_r>:
 800c1b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c1bc:	1f18      	subs	r0, r3, #4
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	bfbc      	itt	lt
 800c1c2:	580b      	ldrlt	r3, [r1, r0]
 800c1c4:	18c0      	addlt	r0, r0, r3
 800c1c6:	4770      	bx	lr

0800c1c8 <cosf>:
 800c1c8:	ee10 3a10 	vmov	r3, s0
 800c1cc:	b507      	push	{r0, r1, r2, lr}
 800c1ce:	4a1c      	ldr	r2, [pc, #112]	; (800c240 <cosf+0x78>)
 800c1d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c1d4:	4293      	cmp	r3, r2
 800c1d6:	dc04      	bgt.n	800c1e2 <cosf+0x1a>
 800c1d8:	eddf 0a1a 	vldr	s1, [pc, #104]	; 800c244 <cosf+0x7c>
 800c1dc:	f000 f9b2 	bl	800c544 <__kernel_cosf>
 800c1e0:	e004      	b.n	800c1ec <cosf+0x24>
 800c1e2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c1e6:	db04      	blt.n	800c1f2 <cosf+0x2a>
 800c1e8:	ee30 0a40 	vsub.f32	s0, s0, s0
 800c1ec:	b003      	add	sp, #12
 800c1ee:	f85d fb04 	ldr.w	pc, [sp], #4
 800c1f2:	4668      	mov	r0, sp
 800c1f4:	f000 f86a 	bl	800c2cc <__ieee754_rem_pio2f>
 800c1f8:	f000 0003 	and.w	r0, r0, #3
 800c1fc:	2801      	cmp	r0, #1
 800c1fe:	d007      	beq.n	800c210 <cosf+0x48>
 800c200:	2802      	cmp	r0, #2
 800c202:	d00e      	beq.n	800c222 <cosf+0x5a>
 800c204:	b9a0      	cbnz	r0, 800c230 <cosf+0x68>
 800c206:	eddd 0a01 	vldr	s1, [sp, #4]
 800c20a:	ed9d 0a00 	vldr	s0, [sp]
 800c20e:	e7e5      	b.n	800c1dc <cosf+0x14>
 800c210:	eddd 0a01 	vldr	s1, [sp, #4]
 800c214:	ed9d 0a00 	vldr	s0, [sp]
 800c218:	f000 fc7e 	bl	800cb18 <__kernel_sinf>
 800c21c:	eeb1 0a40 	vneg.f32	s0, s0
 800c220:	e7e4      	b.n	800c1ec <cosf+0x24>
 800c222:	eddd 0a01 	vldr	s1, [sp, #4]
 800c226:	ed9d 0a00 	vldr	s0, [sp]
 800c22a:	f000 f98b 	bl	800c544 <__kernel_cosf>
 800c22e:	e7f5      	b.n	800c21c <cosf+0x54>
 800c230:	eddd 0a01 	vldr	s1, [sp, #4]
 800c234:	ed9d 0a00 	vldr	s0, [sp]
 800c238:	2001      	movs	r0, #1
 800c23a:	f000 fc6d 	bl	800cb18 <__kernel_sinf>
 800c23e:	e7d5      	b.n	800c1ec <cosf+0x24>
 800c240:	3f490fd8 	.word	0x3f490fd8
 800c244:	00000000 	.word	0x00000000

0800c248 <sinf>:
 800c248:	ee10 3a10 	vmov	r3, s0
 800c24c:	b507      	push	{r0, r1, r2, lr}
 800c24e:	4a1d      	ldr	r2, [pc, #116]	; (800c2c4 <sinf+0x7c>)
 800c250:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c254:	4293      	cmp	r3, r2
 800c256:	dc05      	bgt.n	800c264 <sinf+0x1c>
 800c258:	eddf 0a1b 	vldr	s1, [pc, #108]	; 800c2c8 <sinf+0x80>
 800c25c:	2000      	movs	r0, #0
 800c25e:	f000 fc5b 	bl	800cb18 <__kernel_sinf>
 800c262:	e004      	b.n	800c26e <sinf+0x26>
 800c264:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c268:	db04      	blt.n	800c274 <sinf+0x2c>
 800c26a:	ee30 0a40 	vsub.f32	s0, s0, s0
 800c26e:	b003      	add	sp, #12
 800c270:	f85d fb04 	ldr.w	pc, [sp], #4
 800c274:	4668      	mov	r0, sp
 800c276:	f000 f829 	bl	800c2cc <__ieee754_rem_pio2f>
 800c27a:	f000 0003 	and.w	r0, r0, #3
 800c27e:	2801      	cmp	r0, #1
 800c280:	d008      	beq.n	800c294 <sinf+0x4c>
 800c282:	2802      	cmp	r0, #2
 800c284:	d00d      	beq.n	800c2a2 <sinf+0x5a>
 800c286:	b9b0      	cbnz	r0, 800c2b6 <sinf+0x6e>
 800c288:	eddd 0a01 	vldr	s1, [sp, #4]
 800c28c:	ed9d 0a00 	vldr	s0, [sp]
 800c290:	2001      	movs	r0, #1
 800c292:	e7e4      	b.n	800c25e <sinf+0x16>
 800c294:	eddd 0a01 	vldr	s1, [sp, #4]
 800c298:	ed9d 0a00 	vldr	s0, [sp]
 800c29c:	f000 f952 	bl	800c544 <__kernel_cosf>
 800c2a0:	e7e5      	b.n	800c26e <sinf+0x26>
 800c2a2:	eddd 0a01 	vldr	s1, [sp, #4]
 800c2a6:	ed9d 0a00 	vldr	s0, [sp]
 800c2aa:	2001      	movs	r0, #1
 800c2ac:	f000 fc34 	bl	800cb18 <__kernel_sinf>
 800c2b0:	eeb1 0a40 	vneg.f32	s0, s0
 800c2b4:	e7db      	b.n	800c26e <sinf+0x26>
 800c2b6:	eddd 0a01 	vldr	s1, [sp, #4]
 800c2ba:	ed9d 0a00 	vldr	s0, [sp]
 800c2be:	f000 f941 	bl	800c544 <__kernel_cosf>
 800c2c2:	e7f5      	b.n	800c2b0 <sinf+0x68>
 800c2c4:	3f490fd8 	.word	0x3f490fd8
 800c2c8:	00000000 	.word	0x00000000

0800c2cc <__ieee754_rem_pio2f>:
 800c2cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2ce:	ee10 6a10 	vmov	r6, s0
 800c2d2:	4b8e      	ldr	r3, [pc, #568]	; (800c50c <__ieee754_rem_pio2f+0x240>)
 800c2d4:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800c2d8:	429d      	cmp	r5, r3
 800c2da:	b087      	sub	sp, #28
 800c2dc:	eef0 7a40 	vmov.f32	s15, s0
 800c2e0:	4604      	mov	r4, r0
 800c2e2:	dc05      	bgt.n	800c2f0 <__ieee754_rem_pio2f+0x24>
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	ed80 0a00 	vstr	s0, [r0]
 800c2ea:	6043      	str	r3, [r0, #4]
 800c2ec:	2000      	movs	r0, #0
 800c2ee:	e01a      	b.n	800c326 <__ieee754_rem_pio2f+0x5a>
 800c2f0:	4b87      	ldr	r3, [pc, #540]	; (800c510 <__ieee754_rem_pio2f+0x244>)
 800c2f2:	429d      	cmp	r5, r3
 800c2f4:	dc46      	bgt.n	800c384 <__ieee754_rem_pio2f+0xb8>
 800c2f6:	2e00      	cmp	r6, #0
 800c2f8:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800c514 <__ieee754_rem_pio2f+0x248>
 800c2fc:	4b86      	ldr	r3, [pc, #536]	; (800c518 <__ieee754_rem_pio2f+0x24c>)
 800c2fe:	f025 050f 	bic.w	r5, r5, #15
 800c302:	dd1f      	ble.n	800c344 <__ieee754_rem_pio2f+0x78>
 800c304:	429d      	cmp	r5, r3
 800c306:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800c30a:	d00e      	beq.n	800c32a <__ieee754_rem_pio2f+0x5e>
 800c30c:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800c51c <__ieee754_rem_pio2f+0x250>
 800c310:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800c314:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800c318:	ed80 0a00 	vstr	s0, [r0]
 800c31c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c320:	2001      	movs	r0, #1
 800c322:	edc4 7a01 	vstr	s15, [r4, #4]
 800c326:	b007      	add	sp, #28
 800c328:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c32a:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800c520 <__ieee754_rem_pio2f+0x254>
 800c32e:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800c524 <__ieee754_rem_pio2f+0x258>
 800c332:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800c336:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800c33a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c33e:	edc0 6a00 	vstr	s13, [r0]
 800c342:	e7eb      	b.n	800c31c <__ieee754_rem_pio2f+0x50>
 800c344:	429d      	cmp	r5, r3
 800c346:	ee77 7a80 	vadd.f32	s15, s15, s0
 800c34a:	d00e      	beq.n	800c36a <__ieee754_rem_pio2f+0x9e>
 800c34c:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800c51c <__ieee754_rem_pio2f+0x250>
 800c350:	ee37 0a87 	vadd.f32	s0, s15, s14
 800c354:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800c358:	ed80 0a00 	vstr	s0, [r0]
 800c35c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c360:	f04f 30ff 	mov.w	r0, #4294967295
 800c364:	edc4 7a01 	vstr	s15, [r4, #4]
 800c368:	e7dd      	b.n	800c326 <__ieee754_rem_pio2f+0x5a>
 800c36a:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800c520 <__ieee754_rem_pio2f+0x254>
 800c36e:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800c524 <__ieee754_rem_pio2f+0x258>
 800c372:	ee77 7a80 	vadd.f32	s15, s15, s0
 800c376:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c37a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c37e:	edc0 6a00 	vstr	s13, [r0]
 800c382:	e7eb      	b.n	800c35c <__ieee754_rem_pio2f+0x90>
 800c384:	4b68      	ldr	r3, [pc, #416]	; (800c528 <__ieee754_rem_pio2f+0x25c>)
 800c386:	429d      	cmp	r5, r3
 800c388:	dc72      	bgt.n	800c470 <__ieee754_rem_pio2f+0x1a4>
 800c38a:	f000 fc0d 	bl	800cba8 <fabsf>
 800c38e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800c52c <__ieee754_rem_pio2f+0x260>
 800c392:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c396:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c39a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c39e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c3a2:	ee17 0a90 	vmov	r0, s15
 800c3a6:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800c514 <__ieee754_rem_pio2f+0x248>
 800c3aa:	eea7 0a67 	vfms.f32	s0, s14, s15
 800c3ae:	281f      	cmp	r0, #31
 800c3b0:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800c51c <__ieee754_rem_pio2f+0x250>
 800c3b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3b8:	eeb1 6a47 	vneg.f32	s12, s14
 800c3bc:	ee70 6a67 	vsub.f32	s13, s0, s15
 800c3c0:	ee16 2a90 	vmov	r2, s13
 800c3c4:	dc1c      	bgt.n	800c400 <__ieee754_rem_pio2f+0x134>
 800c3c6:	495a      	ldr	r1, [pc, #360]	; (800c530 <__ieee754_rem_pio2f+0x264>)
 800c3c8:	1e47      	subs	r7, r0, #1
 800c3ca:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800c3ce:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800c3d2:	428b      	cmp	r3, r1
 800c3d4:	d014      	beq.n	800c400 <__ieee754_rem_pio2f+0x134>
 800c3d6:	6022      	str	r2, [r4, #0]
 800c3d8:	ed94 7a00 	vldr	s14, [r4]
 800c3dc:	ee30 0a47 	vsub.f32	s0, s0, s14
 800c3e0:	2e00      	cmp	r6, #0
 800c3e2:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c3e6:	ed84 0a01 	vstr	s0, [r4, #4]
 800c3ea:	da9c      	bge.n	800c326 <__ieee754_rem_pio2f+0x5a>
 800c3ec:	eeb1 7a47 	vneg.f32	s14, s14
 800c3f0:	eeb1 0a40 	vneg.f32	s0, s0
 800c3f4:	ed84 7a00 	vstr	s14, [r4]
 800c3f8:	ed84 0a01 	vstr	s0, [r4, #4]
 800c3fc:	4240      	negs	r0, r0
 800c3fe:	e792      	b.n	800c326 <__ieee754_rem_pio2f+0x5a>
 800c400:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800c404:	15eb      	asrs	r3, r5, #23
 800c406:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800c40a:	2d08      	cmp	r5, #8
 800c40c:	dde3      	ble.n	800c3d6 <__ieee754_rem_pio2f+0x10a>
 800c40e:	eddf 7a44 	vldr	s15, [pc, #272]	; 800c520 <__ieee754_rem_pio2f+0x254>
 800c412:	eef0 6a40 	vmov.f32	s13, s0
 800c416:	eee6 6a27 	vfma.f32	s13, s12, s15
 800c41a:	ee30 0a66 	vsub.f32	s0, s0, s13
 800c41e:	eea6 0a27 	vfma.f32	s0, s12, s15
 800c422:	eddf 7a40 	vldr	s15, [pc, #256]	; 800c524 <__ieee754_rem_pio2f+0x258>
 800c426:	ee97 0a27 	vfnms.f32	s0, s14, s15
 800c42a:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800c42e:	eef0 7a40 	vmov.f32	s15, s0
 800c432:	ee15 2a90 	vmov	r2, s11
 800c436:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800c43a:	1a5b      	subs	r3, r3, r1
 800c43c:	2b19      	cmp	r3, #25
 800c43e:	dc04      	bgt.n	800c44a <__ieee754_rem_pio2f+0x17e>
 800c440:	edc4 5a00 	vstr	s11, [r4]
 800c444:	eeb0 0a66 	vmov.f32	s0, s13
 800c448:	e7c6      	b.n	800c3d8 <__ieee754_rem_pio2f+0x10c>
 800c44a:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800c534 <__ieee754_rem_pio2f+0x268>
 800c44e:	eeb0 0a66 	vmov.f32	s0, s13
 800c452:	eea6 0a25 	vfma.f32	s0, s12, s11
 800c456:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800c45a:	eddf 6a37 	vldr	s13, [pc, #220]	; 800c538 <__ieee754_rem_pio2f+0x26c>
 800c45e:	eee6 7a25 	vfma.f32	s15, s12, s11
 800c462:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800c466:	ee30 7a67 	vsub.f32	s14, s0, s15
 800c46a:	ed84 7a00 	vstr	s14, [r4]
 800c46e:	e7b3      	b.n	800c3d8 <__ieee754_rem_pio2f+0x10c>
 800c470:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800c474:	db06      	blt.n	800c484 <__ieee754_rem_pio2f+0x1b8>
 800c476:	ee70 7a40 	vsub.f32	s15, s0, s0
 800c47a:	edc0 7a01 	vstr	s15, [r0, #4]
 800c47e:	edc0 7a00 	vstr	s15, [r0]
 800c482:	e733      	b.n	800c2ec <__ieee754_rem_pio2f+0x20>
 800c484:	15ea      	asrs	r2, r5, #23
 800c486:	3a86      	subs	r2, #134	; 0x86
 800c488:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800c48c:	ee07 3a90 	vmov	s15, r3
 800c490:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800c494:	eddf 6a29 	vldr	s13, [pc, #164]	; 800c53c <__ieee754_rem_pio2f+0x270>
 800c498:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c49c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c4a0:	ed8d 7a03 	vstr	s14, [sp, #12]
 800c4a4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c4a8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800c4ac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c4b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c4b4:	ed8d 7a04 	vstr	s14, [sp, #16]
 800c4b8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c4bc:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c4c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4c4:	edcd 7a05 	vstr	s15, [sp, #20]
 800c4c8:	d11e      	bne.n	800c508 <__ieee754_rem_pio2f+0x23c>
 800c4ca:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800c4ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4d2:	bf14      	ite	ne
 800c4d4:	2302      	movne	r3, #2
 800c4d6:	2301      	moveq	r3, #1
 800c4d8:	4919      	ldr	r1, [pc, #100]	; (800c540 <__ieee754_rem_pio2f+0x274>)
 800c4da:	9101      	str	r1, [sp, #4]
 800c4dc:	2102      	movs	r1, #2
 800c4de:	9100      	str	r1, [sp, #0]
 800c4e0:	a803      	add	r0, sp, #12
 800c4e2:	4621      	mov	r1, r4
 800c4e4:	f000 f88e 	bl	800c604 <__kernel_rem_pio2f>
 800c4e8:	2e00      	cmp	r6, #0
 800c4ea:	f6bf af1c 	bge.w	800c326 <__ieee754_rem_pio2f+0x5a>
 800c4ee:	edd4 7a00 	vldr	s15, [r4]
 800c4f2:	eef1 7a67 	vneg.f32	s15, s15
 800c4f6:	edc4 7a00 	vstr	s15, [r4]
 800c4fa:	edd4 7a01 	vldr	s15, [r4, #4]
 800c4fe:	eef1 7a67 	vneg.f32	s15, s15
 800c502:	edc4 7a01 	vstr	s15, [r4, #4]
 800c506:	e779      	b.n	800c3fc <__ieee754_rem_pio2f+0x130>
 800c508:	2303      	movs	r3, #3
 800c50a:	e7e5      	b.n	800c4d8 <__ieee754_rem_pio2f+0x20c>
 800c50c:	3f490fd8 	.word	0x3f490fd8
 800c510:	4016cbe3 	.word	0x4016cbe3
 800c514:	3fc90f80 	.word	0x3fc90f80
 800c518:	3fc90fd0 	.word	0x3fc90fd0
 800c51c:	37354443 	.word	0x37354443
 800c520:	37354400 	.word	0x37354400
 800c524:	2e85a308 	.word	0x2e85a308
 800c528:	43490f80 	.word	0x43490f80
 800c52c:	3f22f984 	.word	0x3f22f984
 800c530:	0800fa2c 	.word	0x0800fa2c
 800c534:	2e85a300 	.word	0x2e85a300
 800c538:	248d3132 	.word	0x248d3132
 800c53c:	43800000 	.word	0x43800000
 800c540:	0800faac 	.word	0x0800faac

0800c544 <__kernel_cosf>:
 800c544:	ee10 3a10 	vmov	r3, s0
 800c548:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c54c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800c550:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800c554:	da05      	bge.n	800c562 <__kernel_cosf+0x1e>
 800c556:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800c55a:	ee17 2a90 	vmov	r2, s15
 800c55e:	2a00      	cmp	r2, #0
 800c560:	d03d      	beq.n	800c5de <__kernel_cosf+0x9a>
 800c562:	ee60 5a00 	vmul.f32	s11, s0, s0
 800c566:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800c5e4 <__kernel_cosf+0xa0>
 800c56a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800c5e8 <__kernel_cosf+0xa4>
 800c56e:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800c5ec <__kernel_cosf+0xa8>
 800c572:	4a1f      	ldr	r2, [pc, #124]	; (800c5f0 <__kernel_cosf+0xac>)
 800c574:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800c578:	4293      	cmp	r3, r2
 800c57a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800c5f4 <__kernel_cosf+0xb0>
 800c57e:	eee7 7a25 	vfma.f32	s15, s14, s11
 800c582:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800c5f8 <__kernel_cosf+0xb4>
 800c586:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800c58a:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800c5fc <__kernel_cosf+0xb8>
 800c58e:	eee7 7a25 	vfma.f32	s15, s14, s11
 800c592:	eeb0 7a66 	vmov.f32	s14, s13
 800c596:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800c59a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800c59e:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800c5a2:	ee67 6a25 	vmul.f32	s13, s14, s11
 800c5a6:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800c5aa:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800c5ae:	dc04      	bgt.n	800c5ba <__kernel_cosf+0x76>
 800c5b0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800c5b4:	ee36 0a47 	vsub.f32	s0, s12, s14
 800c5b8:	4770      	bx	lr
 800c5ba:	4a11      	ldr	r2, [pc, #68]	; (800c600 <__kernel_cosf+0xbc>)
 800c5bc:	4293      	cmp	r3, r2
 800c5be:	bfda      	itte	le
 800c5c0:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800c5c4:	ee06 3a90 	vmovle	s13, r3
 800c5c8:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800c5cc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c5d0:	ee36 0a66 	vsub.f32	s0, s12, s13
 800c5d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c5d8:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c5dc:	4770      	bx	lr
 800c5de:	eeb0 0a46 	vmov.f32	s0, s12
 800c5e2:	4770      	bx	lr
 800c5e4:	ad47d74e 	.word	0xad47d74e
 800c5e8:	310f74f6 	.word	0x310f74f6
 800c5ec:	3d2aaaab 	.word	0x3d2aaaab
 800c5f0:	3e999999 	.word	0x3e999999
 800c5f4:	b493f27c 	.word	0xb493f27c
 800c5f8:	37d00d01 	.word	0x37d00d01
 800c5fc:	bab60b61 	.word	0xbab60b61
 800c600:	3f480000 	.word	0x3f480000

0800c604 <__kernel_rem_pio2f>:
 800c604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c608:	ed2d 8b04 	vpush	{d8-d9}
 800c60c:	b0d7      	sub	sp, #348	; 0x15c
 800c60e:	4616      	mov	r6, r2
 800c610:	4698      	mov	r8, r3
 800c612:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800c614:	4bbb      	ldr	r3, [pc, #748]	; (800c904 <__kernel_rem_pio2f+0x300>)
 800c616:	9001      	str	r0, [sp, #4]
 800c618:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 800c61c:	1d33      	adds	r3, r6, #4
 800c61e:	460d      	mov	r5, r1
 800c620:	f108 39ff 	add.w	r9, r8, #4294967295
 800c624:	db29      	blt.n	800c67a <__kernel_rem_pio2f+0x76>
 800c626:	1ef1      	subs	r1, r6, #3
 800c628:	bf48      	it	mi
 800c62a:	1d31      	addmi	r1, r6, #4
 800c62c:	10c9      	asrs	r1, r1, #3
 800c62e:	1c4c      	adds	r4, r1, #1
 800c630:	00e3      	lsls	r3, r4, #3
 800c632:	9302      	str	r3, [sp, #8]
 800c634:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800c636:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 800c914 <__kernel_rem_pio2f+0x310>
 800c63a:	eba1 0009 	sub.w	r0, r1, r9
 800c63e:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 800c642:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 800c646:	eb07 0c09 	add.w	ip, r7, r9
 800c64a:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 800c64e:	2300      	movs	r3, #0
 800c650:	4563      	cmp	r3, ip
 800c652:	dd14      	ble.n	800c67e <__kernel_rem_pio2f+0x7a>
 800c654:	ab1a      	add	r3, sp, #104	; 0x68
 800c656:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 800c65a:	46cc      	mov	ip, r9
 800c65c:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 800c660:	f1c8 0b01 	rsb	fp, r8, #1
 800c664:	eb0b 020c 	add.w	r2, fp, ip
 800c668:	4297      	cmp	r7, r2
 800c66a:	db27      	blt.n	800c6bc <__kernel_rem_pio2f+0xb8>
 800c66c:	f8dd e004 	ldr.w	lr, [sp, #4]
 800c670:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800c914 <__kernel_rem_pio2f+0x310>
 800c674:	4618      	mov	r0, r3
 800c676:	2200      	movs	r2, #0
 800c678:	e016      	b.n	800c6a8 <__kernel_rem_pio2f+0xa4>
 800c67a:	2100      	movs	r1, #0
 800c67c:	e7d7      	b.n	800c62e <__kernel_rem_pio2f+0x2a>
 800c67e:	42d8      	cmn	r0, r3
 800c680:	bf5d      	ittte	pl
 800c682:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 800c686:	ee07 2a90 	vmovpl	s15, r2
 800c68a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800c68e:	eef0 7a47 	vmovmi.f32	s15, s14
 800c692:	ecea 7a01 	vstmia	sl!, {s15}
 800c696:	3301      	adds	r3, #1
 800c698:	e7da      	b.n	800c650 <__kernel_rem_pio2f+0x4c>
 800c69a:	ecfe 6a01 	vldmia	lr!, {s13}
 800c69e:	ed90 7a00 	vldr	s14, [r0]
 800c6a2:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c6a6:	3201      	adds	r2, #1
 800c6a8:	454a      	cmp	r2, r9
 800c6aa:	f1a0 0004 	sub.w	r0, r0, #4
 800c6ae:	ddf4      	ble.n	800c69a <__kernel_rem_pio2f+0x96>
 800c6b0:	ecea 7a01 	vstmia	sl!, {s15}
 800c6b4:	3304      	adds	r3, #4
 800c6b6:	f10c 0c01 	add.w	ip, ip, #1
 800c6ba:	e7d3      	b.n	800c664 <__kernel_rem_pio2f+0x60>
 800c6bc:	ab06      	add	r3, sp, #24
 800c6be:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800c6c2:	9304      	str	r3, [sp, #16]
 800c6c4:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800c6c6:	eddf 8a92 	vldr	s17, [pc, #584]	; 800c910 <__kernel_rem_pio2f+0x30c>
 800c6ca:	ed9f 9a90 	vldr	s18, [pc, #576]	; 800c90c <__kernel_rem_pio2f+0x308>
 800c6ce:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800c6d2:	9303      	str	r3, [sp, #12]
 800c6d4:	46ba      	mov	sl, r7
 800c6d6:	ab56      	add	r3, sp, #344	; 0x158
 800c6d8:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800c6dc:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 800c6e0:	ab06      	add	r3, sp, #24
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	4652      	mov	r2, sl
 800c6e6:	2a00      	cmp	r2, #0
 800c6e8:	dc51      	bgt.n	800c78e <__kernel_rem_pio2f+0x18a>
 800c6ea:	4620      	mov	r0, r4
 800c6ec:	9305      	str	r3, [sp, #20]
 800c6ee:	f000 faa5 	bl	800cc3c <scalbnf>
 800c6f2:	eeb0 8a40 	vmov.f32	s16, s0
 800c6f6:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800c6fa:	ee28 0a00 	vmul.f32	s0, s16, s0
 800c6fe:	f000 fa5b 	bl	800cbb8 <floorf>
 800c702:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800c706:	eea0 8a67 	vfms.f32	s16, s0, s15
 800c70a:	2c00      	cmp	r4, #0
 800c70c:	9b05      	ldr	r3, [sp, #20]
 800c70e:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800c712:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800c716:	edcd 7a00 	vstr	s15, [sp]
 800c71a:	ee38 8a40 	vsub.f32	s16, s16, s0
 800c71e:	dd4b      	ble.n	800c7b8 <__kernel_rem_pio2f+0x1b4>
 800c720:	f10a 3cff 	add.w	ip, sl, #4294967295
 800c724:	aa06      	add	r2, sp, #24
 800c726:	f1c4 0e08 	rsb	lr, r4, #8
 800c72a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800c72e:	ee17 1a90 	vmov	r1, s15
 800c732:	fa42 f00e 	asr.w	r0, r2, lr
 800c736:	4401      	add	r1, r0
 800c738:	9100      	str	r1, [sp, #0]
 800c73a:	fa00 f00e 	lsl.w	r0, r0, lr
 800c73e:	a906      	add	r1, sp, #24
 800c740:	1a12      	subs	r2, r2, r0
 800c742:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800c746:	f1c4 0007 	rsb	r0, r4, #7
 800c74a:	fa42 fb00 	asr.w	fp, r2, r0
 800c74e:	f1bb 0f00 	cmp.w	fp, #0
 800c752:	dd43      	ble.n	800c7dc <__kernel_rem_pio2f+0x1d8>
 800c754:	9a00      	ldr	r2, [sp, #0]
 800c756:	f04f 0e00 	mov.w	lr, #0
 800c75a:	3201      	adds	r2, #1
 800c75c:	9200      	str	r2, [sp, #0]
 800c75e:	4670      	mov	r0, lr
 800c760:	45f2      	cmp	sl, lr
 800c762:	dc6c      	bgt.n	800c83e <__kernel_rem_pio2f+0x23a>
 800c764:	2c00      	cmp	r4, #0
 800c766:	dd04      	ble.n	800c772 <__kernel_rem_pio2f+0x16e>
 800c768:	2c01      	cmp	r4, #1
 800c76a:	d079      	beq.n	800c860 <__kernel_rem_pio2f+0x25c>
 800c76c:	2c02      	cmp	r4, #2
 800c76e:	f000 8082 	beq.w	800c876 <__kernel_rem_pio2f+0x272>
 800c772:	f1bb 0f02 	cmp.w	fp, #2
 800c776:	d131      	bne.n	800c7dc <__kernel_rem_pio2f+0x1d8>
 800c778:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c77c:	ee30 8a48 	vsub.f32	s16, s0, s16
 800c780:	b360      	cbz	r0, 800c7dc <__kernel_rem_pio2f+0x1d8>
 800c782:	4620      	mov	r0, r4
 800c784:	f000 fa5a 	bl	800cc3c <scalbnf>
 800c788:	ee38 8a40 	vsub.f32	s16, s16, s0
 800c78c:	e026      	b.n	800c7dc <__kernel_rem_pio2f+0x1d8>
 800c78e:	ee60 7a28 	vmul.f32	s15, s0, s17
 800c792:	3a01      	subs	r2, #1
 800c794:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c798:	a942      	add	r1, sp, #264	; 0x108
 800c79a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c79e:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 800c7a2:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800c7a6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c7aa:	eca0 0a01 	vstmia	r0!, {s0}
 800c7ae:	ed9c 0a00 	vldr	s0, [ip]
 800c7b2:	ee37 0a80 	vadd.f32	s0, s15, s0
 800c7b6:	e796      	b.n	800c6e6 <__kernel_rem_pio2f+0xe2>
 800c7b8:	d107      	bne.n	800c7ca <__kernel_rem_pio2f+0x1c6>
 800c7ba:	f10a 32ff 	add.w	r2, sl, #4294967295
 800c7be:	a906      	add	r1, sp, #24
 800c7c0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800c7c4:	ea4f 2b22 	mov.w	fp, r2, asr #8
 800c7c8:	e7c1      	b.n	800c74e <__kernel_rem_pio2f+0x14a>
 800c7ca:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c7ce:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800c7d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7d6:	da2f      	bge.n	800c838 <__kernel_rem_pio2f+0x234>
 800c7d8:	f04f 0b00 	mov.w	fp, #0
 800c7dc:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800c7e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7e4:	f040 8098 	bne.w	800c918 <__kernel_rem_pio2f+0x314>
 800c7e8:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c7ec:	469c      	mov	ip, r3
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	45bc      	cmp	ip, r7
 800c7f2:	da48      	bge.n	800c886 <__kernel_rem_pio2f+0x282>
 800c7f4:	2a00      	cmp	r2, #0
 800c7f6:	d05f      	beq.n	800c8b8 <__kernel_rem_pio2f+0x2b4>
 800c7f8:	aa06      	add	r2, sp, #24
 800c7fa:	3c08      	subs	r4, #8
 800c7fc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800c800:	2900      	cmp	r1, #0
 800c802:	d07d      	beq.n	800c900 <__kernel_rem_pio2f+0x2fc>
 800c804:	4620      	mov	r0, r4
 800c806:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c80a:	9301      	str	r3, [sp, #4]
 800c80c:	f000 fa16 	bl	800cc3c <scalbnf>
 800c810:	9b01      	ldr	r3, [sp, #4]
 800c812:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800c910 <__kernel_rem_pio2f+0x30c>
 800c816:	4619      	mov	r1, r3
 800c818:	2900      	cmp	r1, #0
 800c81a:	f280 80af 	bge.w	800c97c <__kernel_rem_pio2f+0x378>
 800c81e:	4618      	mov	r0, r3
 800c820:	2400      	movs	r4, #0
 800c822:	2800      	cmp	r0, #0
 800c824:	f2c0 80d0 	blt.w	800c9c8 <__kernel_rem_pio2f+0x3c4>
 800c828:	a942      	add	r1, sp, #264	; 0x108
 800c82a:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 800c82e:	4a36      	ldr	r2, [pc, #216]	; (800c908 <__kernel_rem_pio2f+0x304>)
 800c830:	eddf 7a38 	vldr	s15, [pc, #224]	; 800c914 <__kernel_rem_pio2f+0x310>
 800c834:	2100      	movs	r1, #0
 800c836:	e0bb      	b.n	800c9b0 <__kernel_rem_pio2f+0x3ac>
 800c838:	f04f 0b02 	mov.w	fp, #2
 800c83c:	e78a      	b.n	800c754 <__kernel_rem_pio2f+0x150>
 800c83e:	681a      	ldr	r2, [r3, #0]
 800c840:	b948      	cbnz	r0, 800c856 <__kernel_rem_pio2f+0x252>
 800c842:	b11a      	cbz	r2, 800c84c <__kernel_rem_pio2f+0x248>
 800c844:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 800c848:	601a      	str	r2, [r3, #0]
 800c84a:	2201      	movs	r2, #1
 800c84c:	f10e 0e01 	add.w	lr, lr, #1
 800c850:	3304      	adds	r3, #4
 800c852:	4610      	mov	r0, r2
 800c854:	e784      	b.n	800c760 <__kernel_rem_pio2f+0x15c>
 800c856:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 800c85a:	601a      	str	r2, [r3, #0]
 800c85c:	4602      	mov	r2, r0
 800c85e:	e7f5      	b.n	800c84c <__kernel_rem_pio2f+0x248>
 800c860:	f10a 3cff 	add.w	ip, sl, #4294967295
 800c864:	ab06      	add	r3, sp, #24
 800c866:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800c86a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c86e:	aa06      	add	r2, sp, #24
 800c870:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 800c874:	e77d      	b.n	800c772 <__kernel_rem_pio2f+0x16e>
 800c876:	f10a 3cff 	add.w	ip, sl, #4294967295
 800c87a:	ab06      	add	r3, sp, #24
 800c87c:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800c880:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c884:	e7f3      	b.n	800c86e <__kernel_rem_pio2f+0x26a>
 800c886:	a906      	add	r1, sp, #24
 800c888:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 800c88c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c890:	4302      	orrs	r2, r0
 800c892:	e7ad      	b.n	800c7f0 <__kernel_rem_pio2f+0x1ec>
 800c894:	3001      	adds	r0, #1
 800c896:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c89a:	2a00      	cmp	r2, #0
 800c89c:	d0fa      	beq.n	800c894 <__kernel_rem_pio2f+0x290>
 800c89e:	a91a      	add	r1, sp, #104	; 0x68
 800c8a0:	eb0a 0208 	add.w	r2, sl, r8
 800c8a4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800c8a8:	f10a 0301 	add.w	r3, sl, #1
 800c8ac:	eb0a 0100 	add.w	r1, sl, r0
 800c8b0:	4299      	cmp	r1, r3
 800c8b2:	da04      	bge.n	800c8be <__kernel_rem_pio2f+0x2ba>
 800c8b4:	468a      	mov	sl, r1
 800c8b6:	e70e      	b.n	800c6d6 <__kernel_rem_pio2f+0xd2>
 800c8b8:	9b04      	ldr	r3, [sp, #16]
 800c8ba:	2001      	movs	r0, #1
 800c8bc:	e7eb      	b.n	800c896 <__kernel_rem_pio2f+0x292>
 800c8be:	9803      	ldr	r0, [sp, #12]
 800c8c0:	f8dd c004 	ldr.w	ip, [sp, #4]
 800c8c4:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800c8c8:	9000      	str	r0, [sp, #0]
 800c8ca:	ee07 0a90 	vmov	s15, r0
 800c8ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c8d2:	2000      	movs	r0, #0
 800c8d4:	ece2 7a01 	vstmia	r2!, {s15}
 800c8d8:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800c914 <__kernel_rem_pio2f+0x310>
 800c8dc:	4696      	mov	lr, r2
 800c8de:	4548      	cmp	r0, r9
 800c8e0:	dd06      	ble.n	800c8f0 <__kernel_rem_pio2f+0x2ec>
 800c8e2:	a842      	add	r0, sp, #264	; 0x108
 800c8e4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800c8e8:	edc0 7a00 	vstr	s15, [r0]
 800c8ec:	3301      	adds	r3, #1
 800c8ee:	e7df      	b.n	800c8b0 <__kernel_rem_pio2f+0x2ac>
 800c8f0:	ecfc 6a01 	vldmia	ip!, {s13}
 800c8f4:	ed3e 7a01 	vldmdb	lr!, {s14}
 800c8f8:	3001      	adds	r0, #1
 800c8fa:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c8fe:	e7ee      	b.n	800c8de <__kernel_rem_pio2f+0x2da>
 800c900:	3b01      	subs	r3, #1
 800c902:	e779      	b.n	800c7f8 <__kernel_rem_pio2f+0x1f4>
 800c904:	0800fdf0 	.word	0x0800fdf0
 800c908:	0800fdc4 	.word	0x0800fdc4
 800c90c:	43800000 	.word	0x43800000
 800c910:	3b800000 	.word	0x3b800000
 800c914:	00000000 	.word	0x00000000
 800c918:	9b02      	ldr	r3, [sp, #8]
 800c91a:	eeb0 0a48 	vmov.f32	s0, s16
 800c91e:	1b98      	subs	r0, r3, r6
 800c920:	f000 f98c 	bl	800cc3c <scalbnf>
 800c924:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800c90c <__kernel_rem_pio2f+0x308>
 800c928:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800c92c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c930:	db1b      	blt.n	800c96a <__kernel_rem_pio2f+0x366>
 800c932:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800c910 <__kernel_rem_pio2f+0x30c>
 800c936:	ee60 7a27 	vmul.f32	s15, s0, s15
 800c93a:	aa06      	add	r2, sp, #24
 800c93c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c940:	a906      	add	r1, sp, #24
 800c942:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c946:	3408      	adds	r4, #8
 800c948:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800c94c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c950:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c954:	ee10 3a10 	vmov	r3, s0
 800c958:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 800c95c:	ee17 2a90 	vmov	r2, s15
 800c960:	f10a 0301 	add.w	r3, sl, #1
 800c964:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c968:	e74c      	b.n	800c804 <__kernel_rem_pio2f+0x200>
 800c96a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c96e:	aa06      	add	r2, sp, #24
 800c970:	ee10 3a10 	vmov	r3, s0
 800c974:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 800c978:	4653      	mov	r3, sl
 800c97a:	e743      	b.n	800c804 <__kernel_rem_pio2f+0x200>
 800c97c:	aa42      	add	r2, sp, #264	; 0x108
 800c97e:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 800c982:	aa06      	add	r2, sp, #24
 800c984:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800c988:	9201      	str	r2, [sp, #4]
 800c98a:	ee07 2a90 	vmov	s15, r2
 800c98e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c992:	3901      	subs	r1, #1
 800c994:	ee67 7a80 	vmul.f32	s15, s15, s0
 800c998:	ee20 0a07 	vmul.f32	s0, s0, s14
 800c99c:	edc0 7a00 	vstr	s15, [r0]
 800c9a0:	e73a      	b.n	800c818 <__kernel_rem_pio2f+0x214>
 800c9a2:	ecf2 6a01 	vldmia	r2!, {s13}
 800c9a6:	ecb6 7a01 	vldmia	r6!, {s14}
 800c9aa:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c9ae:	3101      	adds	r1, #1
 800c9b0:	42b9      	cmp	r1, r7
 800c9b2:	dc01      	bgt.n	800c9b8 <__kernel_rem_pio2f+0x3b4>
 800c9b4:	428c      	cmp	r4, r1
 800c9b6:	daf4      	bge.n	800c9a2 <__kernel_rem_pio2f+0x39e>
 800c9b8:	aa56      	add	r2, sp, #344	; 0x158
 800c9ba:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 800c9be:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800c9c2:	3801      	subs	r0, #1
 800c9c4:	3401      	adds	r4, #1
 800c9c6:	e72c      	b.n	800c822 <__kernel_rem_pio2f+0x21e>
 800c9c8:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800c9ca:	2a02      	cmp	r2, #2
 800c9cc:	dc0a      	bgt.n	800c9e4 <__kernel_rem_pio2f+0x3e0>
 800c9ce:	2a00      	cmp	r2, #0
 800c9d0:	dc61      	bgt.n	800ca96 <__kernel_rem_pio2f+0x492>
 800c9d2:	d03c      	beq.n	800ca4e <__kernel_rem_pio2f+0x44a>
 800c9d4:	9b00      	ldr	r3, [sp, #0]
 800c9d6:	f003 0007 	and.w	r0, r3, #7
 800c9da:	b057      	add	sp, #348	; 0x15c
 800c9dc:	ecbd 8b04 	vpop	{d8-d9}
 800c9e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9e4:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800c9e6:	2a03      	cmp	r2, #3
 800c9e8:	d1f4      	bne.n	800c9d4 <__kernel_rem_pio2f+0x3d0>
 800c9ea:	aa2e      	add	r2, sp, #184	; 0xb8
 800c9ec:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800c9f0:	4608      	mov	r0, r1
 800c9f2:	461c      	mov	r4, r3
 800c9f4:	2c00      	cmp	r4, #0
 800c9f6:	f1a0 0004 	sub.w	r0, r0, #4
 800c9fa:	dc59      	bgt.n	800cab0 <__kernel_rem_pio2f+0x4ac>
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	2801      	cmp	r0, #1
 800ca00:	f1a1 0104 	sub.w	r1, r1, #4
 800ca04:	dc64      	bgt.n	800cad0 <__kernel_rem_pio2f+0x4cc>
 800ca06:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 800c914 <__kernel_rem_pio2f+0x310>
 800ca0a:	2b01      	cmp	r3, #1
 800ca0c:	dc70      	bgt.n	800caf0 <__kernel_rem_pio2f+0x4ec>
 800ca0e:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800ca12:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800ca16:	f1bb 0f00 	cmp.w	fp, #0
 800ca1a:	d172      	bne.n	800cb02 <__kernel_rem_pio2f+0x4fe>
 800ca1c:	edc5 6a00 	vstr	s13, [r5]
 800ca20:	ed85 7a01 	vstr	s14, [r5, #4]
 800ca24:	edc5 7a02 	vstr	s15, [r5, #8]
 800ca28:	e7d4      	b.n	800c9d4 <__kernel_rem_pio2f+0x3d0>
 800ca2a:	aa2e      	add	r2, sp, #184	; 0xb8
 800ca2c:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800ca30:	ed91 7a00 	vldr	s14, [r1]
 800ca34:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ca38:	3b01      	subs	r3, #1
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	daf5      	bge.n	800ca2a <__kernel_rem_pio2f+0x426>
 800ca3e:	f1bb 0f00 	cmp.w	fp, #0
 800ca42:	d001      	beq.n	800ca48 <__kernel_rem_pio2f+0x444>
 800ca44:	eef1 7a67 	vneg.f32	s15, s15
 800ca48:	edc5 7a00 	vstr	s15, [r5]
 800ca4c:	e7c2      	b.n	800c9d4 <__kernel_rem_pio2f+0x3d0>
 800ca4e:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 800c914 <__kernel_rem_pio2f+0x310>
 800ca52:	e7f2      	b.n	800ca3a <__kernel_rem_pio2f+0x436>
 800ca54:	aa2e      	add	r2, sp, #184	; 0xb8
 800ca56:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 800ca5a:	edd0 7a00 	vldr	s15, [r0]
 800ca5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ca62:	3901      	subs	r1, #1
 800ca64:	2900      	cmp	r1, #0
 800ca66:	daf5      	bge.n	800ca54 <__kernel_rem_pio2f+0x450>
 800ca68:	f1bb 0f00 	cmp.w	fp, #0
 800ca6c:	d017      	beq.n	800ca9e <__kernel_rem_pio2f+0x49a>
 800ca6e:	eef1 7a47 	vneg.f32	s15, s14
 800ca72:	edc5 7a00 	vstr	s15, [r5]
 800ca76:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800ca7a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ca7e:	a82f      	add	r0, sp, #188	; 0xbc
 800ca80:	2101      	movs	r1, #1
 800ca82:	428b      	cmp	r3, r1
 800ca84:	da0e      	bge.n	800caa4 <__kernel_rem_pio2f+0x4a0>
 800ca86:	f1bb 0f00 	cmp.w	fp, #0
 800ca8a:	d001      	beq.n	800ca90 <__kernel_rem_pio2f+0x48c>
 800ca8c:	eef1 7a67 	vneg.f32	s15, s15
 800ca90:	edc5 7a01 	vstr	s15, [r5, #4]
 800ca94:	e79e      	b.n	800c9d4 <__kernel_rem_pio2f+0x3d0>
 800ca96:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 800c914 <__kernel_rem_pio2f+0x310>
 800ca9a:	4619      	mov	r1, r3
 800ca9c:	e7e2      	b.n	800ca64 <__kernel_rem_pio2f+0x460>
 800ca9e:	eef0 7a47 	vmov.f32	s15, s14
 800caa2:	e7e6      	b.n	800ca72 <__kernel_rem_pio2f+0x46e>
 800caa4:	ecb0 7a01 	vldmia	r0!, {s14}
 800caa8:	3101      	adds	r1, #1
 800caaa:	ee77 7a87 	vadd.f32	s15, s15, s14
 800caae:	e7e8      	b.n	800ca82 <__kernel_rem_pio2f+0x47e>
 800cab0:	edd0 7a00 	vldr	s15, [r0]
 800cab4:	edd0 6a01 	vldr	s13, [r0, #4]
 800cab8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800cabc:	3c01      	subs	r4, #1
 800cabe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cac2:	ed80 7a00 	vstr	s14, [r0]
 800cac6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800caca:	edc0 7a01 	vstr	s15, [r0, #4]
 800cace:	e791      	b.n	800c9f4 <__kernel_rem_pio2f+0x3f0>
 800cad0:	edd1 7a00 	vldr	s15, [r1]
 800cad4:	edd1 6a01 	vldr	s13, [r1, #4]
 800cad8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800cadc:	3801      	subs	r0, #1
 800cade:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cae2:	ed81 7a00 	vstr	s14, [r1]
 800cae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800caea:	edc1 7a01 	vstr	s15, [r1, #4]
 800caee:	e786      	b.n	800c9fe <__kernel_rem_pio2f+0x3fa>
 800caf0:	aa2e      	add	r2, sp, #184	; 0xb8
 800caf2:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800caf6:	ed91 7a00 	vldr	s14, [r1]
 800cafa:	3b01      	subs	r3, #1
 800cafc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cb00:	e783      	b.n	800ca0a <__kernel_rem_pio2f+0x406>
 800cb02:	eef1 6a66 	vneg.f32	s13, s13
 800cb06:	eeb1 7a47 	vneg.f32	s14, s14
 800cb0a:	edc5 6a00 	vstr	s13, [r5]
 800cb0e:	ed85 7a01 	vstr	s14, [r5, #4]
 800cb12:	eef1 7a67 	vneg.f32	s15, s15
 800cb16:	e785      	b.n	800ca24 <__kernel_rem_pio2f+0x420>

0800cb18 <__kernel_sinf>:
 800cb18:	ee10 3a10 	vmov	r3, s0
 800cb1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cb20:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800cb24:	da04      	bge.n	800cb30 <__kernel_sinf+0x18>
 800cb26:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800cb2a:	ee17 3a90 	vmov	r3, s15
 800cb2e:	b35b      	cbz	r3, 800cb88 <__kernel_sinf+0x70>
 800cb30:	ee20 7a00 	vmul.f32	s14, s0, s0
 800cb34:	eddf 7a15 	vldr	s15, [pc, #84]	; 800cb8c <__kernel_sinf+0x74>
 800cb38:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800cb90 <__kernel_sinf+0x78>
 800cb3c:	eea7 6a27 	vfma.f32	s12, s14, s15
 800cb40:	eddf 7a14 	vldr	s15, [pc, #80]	; 800cb94 <__kernel_sinf+0x7c>
 800cb44:	eee6 7a07 	vfma.f32	s15, s12, s14
 800cb48:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800cb98 <__kernel_sinf+0x80>
 800cb4c:	eea7 6a87 	vfma.f32	s12, s15, s14
 800cb50:	eddf 7a12 	vldr	s15, [pc, #72]	; 800cb9c <__kernel_sinf+0x84>
 800cb54:	ee60 6a07 	vmul.f32	s13, s0, s14
 800cb58:	eee6 7a07 	vfma.f32	s15, s12, s14
 800cb5c:	b930      	cbnz	r0, 800cb6c <__kernel_sinf+0x54>
 800cb5e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800cba0 <__kernel_sinf+0x88>
 800cb62:	eea7 6a27 	vfma.f32	s12, s14, s15
 800cb66:	eea6 0a26 	vfma.f32	s0, s12, s13
 800cb6a:	4770      	bx	lr
 800cb6c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800cb70:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800cb74:	eee0 7a86 	vfma.f32	s15, s1, s12
 800cb78:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800cb7c:	eddf 7a09 	vldr	s15, [pc, #36]	; 800cba4 <__kernel_sinf+0x8c>
 800cb80:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800cb84:	ee30 0a60 	vsub.f32	s0, s0, s1
 800cb88:	4770      	bx	lr
 800cb8a:	bf00      	nop
 800cb8c:	2f2ec9d3 	.word	0x2f2ec9d3
 800cb90:	b2d72f34 	.word	0xb2d72f34
 800cb94:	3638ef1b 	.word	0x3638ef1b
 800cb98:	b9500d01 	.word	0xb9500d01
 800cb9c:	3c088889 	.word	0x3c088889
 800cba0:	be2aaaab 	.word	0xbe2aaaab
 800cba4:	3e2aaaab 	.word	0x3e2aaaab

0800cba8 <fabsf>:
 800cba8:	ee10 3a10 	vmov	r3, s0
 800cbac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cbb0:	ee00 3a10 	vmov	s0, r3
 800cbb4:	4770      	bx	lr
	...

0800cbb8 <floorf>:
 800cbb8:	ee10 3a10 	vmov	r3, s0
 800cbbc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800cbc0:	3a7f      	subs	r2, #127	; 0x7f
 800cbc2:	2a16      	cmp	r2, #22
 800cbc4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cbc8:	dc2a      	bgt.n	800cc20 <floorf+0x68>
 800cbca:	2a00      	cmp	r2, #0
 800cbcc:	da11      	bge.n	800cbf2 <floorf+0x3a>
 800cbce:	eddf 7a18 	vldr	s15, [pc, #96]	; 800cc30 <floorf+0x78>
 800cbd2:	ee30 0a27 	vadd.f32	s0, s0, s15
 800cbd6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800cbda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbde:	dd05      	ble.n	800cbec <floorf+0x34>
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	da23      	bge.n	800cc2c <floorf+0x74>
 800cbe4:	4a13      	ldr	r2, [pc, #76]	; (800cc34 <floorf+0x7c>)
 800cbe6:	2900      	cmp	r1, #0
 800cbe8:	bf18      	it	ne
 800cbea:	4613      	movne	r3, r2
 800cbec:	ee00 3a10 	vmov	s0, r3
 800cbf0:	4770      	bx	lr
 800cbf2:	4911      	ldr	r1, [pc, #68]	; (800cc38 <floorf+0x80>)
 800cbf4:	4111      	asrs	r1, r2
 800cbf6:	420b      	tst	r3, r1
 800cbf8:	d0fa      	beq.n	800cbf0 <floorf+0x38>
 800cbfa:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800cc30 <floorf+0x78>
 800cbfe:	ee30 0a27 	vadd.f32	s0, s0, s15
 800cc02:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800cc06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc0a:	ddef      	ble.n	800cbec <floorf+0x34>
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	bfbe      	ittt	lt
 800cc10:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800cc14:	fa40 f202 	asrlt.w	r2, r0, r2
 800cc18:	189b      	addlt	r3, r3, r2
 800cc1a:	ea23 0301 	bic.w	r3, r3, r1
 800cc1e:	e7e5      	b.n	800cbec <floorf+0x34>
 800cc20:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800cc24:	d3e4      	bcc.n	800cbf0 <floorf+0x38>
 800cc26:	ee30 0a00 	vadd.f32	s0, s0, s0
 800cc2a:	4770      	bx	lr
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	e7dd      	b.n	800cbec <floorf+0x34>
 800cc30:	7149f2ca 	.word	0x7149f2ca
 800cc34:	bf800000 	.word	0xbf800000
 800cc38:	007fffff 	.word	0x007fffff

0800cc3c <scalbnf>:
 800cc3c:	ee10 3a10 	vmov	r3, s0
 800cc40:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800cc44:	d025      	beq.n	800cc92 <scalbnf+0x56>
 800cc46:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800cc4a:	d302      	bcc.n	800cc52 <scalbnf+0x16>
 800cc4c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800cc50:	4770      	bx	lr
 800cc52:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800cc56:	d122      	bne.n	800cc9e <scalbnf+0x62>
 800cc58:	4b2a      	ldr	r3, [pc, #168]	; (800cd04 <scalbnf+0xc8>)
 800cc5a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800cd08 <scalbnf+0xcc>
 800cc5e:	4298      	cmp	r0, r3
 800cc60:	ee20 0a27 	vmul.f32	s0, s0, s15
 800cc64:	db16      	blt.n	800cc94 <scalbnf+0x58>
 800cc66:	ee10 3a10 	vmov	r3, s0
 800cc6a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800cc6e:	3a19      	subs	r2, #25
 800cc70:	4402      	add	r2, r0
 800cc72:	2afe      	cmp	r2, #254	; 0xfe
 800cc74:	dd15      	ble.n	800cca2 <scalbnf+0x66>
 800cc76:	ee10 3a10 	vmov	r3, s0
 800cc7a:	eddf 7a24 	vldr	s15, [pc, #144]	; 800cd0c <scalbnf+0xd0>
 800cc7e:	eddf 6a24 	vldr	s13, [pc, #144]	; 800cd10 <scalbnf+0xd4>
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	eeb0 7a67 	vmov.f32	s14, s15
 800cc88:	bfb8      	it	lt
 800cc8a:	eef0 7a66 	vmovlt.f32	s15, s13
 800cc8e:	ee27 0a27 	vmul.f32	s0, s14, s15
 800cc92:	4770      	bx	lr
 800cc94:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800cd14 <scalbnf+0xd8>
 800cc98:	ee20 0a27 	vmul.f32	s0, s0, s15
 800cc9c:	4770      	bx	lr
 800cc9e:	0dd2      	lsrs	r2, r2, #23
 800cca0:	e7e6      	b.n	800cc70 <scalbnf+0x34>
 800cca2:	2a00      	cmp	r2, #0
 800cca4:	dd06      	ble.n	800ccb4 <scalbnf+0x78>
 800cca6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ccaa:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800ccae:	ee00 3a10 	vmov	s0, r3
 800ccb2:	4770      	bx	lr
 800ccb4:	f112 0f16 	cmn.w	r2, #22
 800ccb8:	da1a      	bge.n	800ccf0 <scalbnf+0xb4>
 800ccba:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ccbe:	4298      	cmp	r0, r3
 800ccc0:	ee10 3a10 	vmov	r3, s0
 800ccc4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ccc8:	dd0a      	ble.n	800cce0 <scalbnf+0xa4>
 800ccca:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800cd0c <scalbnf+0xd0>
 800ccce:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800cd10 <scalbnf+0xd4>
 800ccd2:	eef0 7a40 	vmov.f32	s15, s0
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	bf18      	it	ne
 800ccda:	eeb0 0a47 	vmovne.f32	s0, s14
 800ccde:	e7db      	b.n	800cc98 <scalbnf+0x5c>
 800cce0:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800cd14 <scalbnf+0xd8>
 800cce4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800cd18 <scalbnf+0xdc>
 800cce8:	eef0 7a40 	vmov.f32	s15, s0
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	e7f3      	b.n	800ccd8 <scalbnf+0x9c>
 800ccf0:	3219      	adds	r2, #25
 800ccf2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ccf6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800ccfa:	eddf 7a08 	vldr	s15, [pc, #32]	; 800cd1c <scalbnf+0xe0>
 800ccfe:	ee07 3a10 	vmov	s14, r3
 800cd02:	e7c4      	b.n	800cc8e <scalbnf+0x52>
 800cd04:	ffff3cb0 	.word	0xffff3cb0
 800cd08:	4c000000 	.word	0x4c000000
 800cd0c:	7149f2ca 	.word	0x7149f2ca
 800cd10:	f149f2ca 	.word	0xf149f2ca
 800cd14:	0da24260 	.word	0x0da24260
 800cd18:	8da24260 	.word	0x8da24260
 800cd1c:	33000000 	.word	0x33000000

0800cd20 <_init>:
 800cd20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd22:	bf00      	nop
 800cd24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd26:	bc08      	pop	{r3}
 800cd28:	469e      	mov	lr, r3
 800cd2a:	4770      	bx	lr

0800cd2c <_fini>:
 800cd2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd2e:	bf00      	nop
 800cd30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd32:	bc08      	pop	{r3}
 800cd34:	469e      	mov	lr, r3
 800cd36:	4770      	bx	lr
